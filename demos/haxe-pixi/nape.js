// Generated by Haxe 3.4.7
(function ($hx_exports, $global) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
Math.__name__ = true;
var Perf = $hx_exports["Perf"] = function(pos,offset) {
	if(offset == null) {
		offset = 0;
	}
	if(pos == null) {
		pos = "TR";
	}
	this._perfObj = window.performance;
	if(Reflect.field(this._perfObj,"memory") != null) {
		this._memoryObj = Reflect.field(this._perfObj,"memory");
	}
	this._memCheck = this._perfObj != null && this._memoryObj != null && this._memoryObj.totalJSHeapSize > 0;
	this._pos = pos;
	this._offset = offset;
	this.currentFps = 60;
	this.currentMs = 0;
	this.currentMem = "0";
	this.lowFps = 60;
	this.avgFps = 60;
	this._measureCount = 0;
	this._totalFps = 0;
	this._time = 0;
	this._ticks = 0;
	this._fpsMin = 60;
	this._fpsMax = 60;
	this._startTime = this._perfObj != null && ($_=this._perfObj,$bind($_,$_.now)) != null ? this._perfObj.now() : new Date().getTime();
	this._prevTime = -Perf.MEASUREMENT_INTERVAL;
	this._createFpsDom();
	this._createMsDom();
	if(this._memCheck) {
		this._createMemoryDom();
	}
	if(($_=window,$bind($_,$_.requestAnimationFrame)) != null) {
		this.RAF = ($_=window,$bind($_,$_.requestAnimationFrame));
	} else if(window.mozRequestAnimationFrame != null) {
		this.RAF = window.mozRequestAnimationFrame;
	} else if(window.webkitRequestAnimationFrame != null) {
		this.RAF = window.webkitRequestAnimationFrame;
	} else if(window.msRequestAnimationFrame != null) {
		this.RAF = window.msRequestAnimationFrame;
	}
	if(($_=window,$bind($_,$_.cancelAnimationFrame)) != null) {
		this.CAF = ($_=window,$bind($_,$_.cancelAnimationFrame));
	} else if(window.mozCancelAnimationFrame != null) {
		this.CAF = window.mozCancelAnimationFrame;
	} else if(window.webkitCancelAnimationFrame != null) {
		this.CAF = window.webkitCancelAnimationFrame;
	} else if(window.msCancelAnimationFrame != null) {
		this.CAF = window.msCancelAnimationFrame;
	}
	if(this.RAF != null) {
		this._raf = this.RAF.apply(window,[$bind(this,this._tick)]);
	}
};
Perf.__name__ = true;
Perf.prototype = {
	_tick: function(val) {
		var time = this._perfObj != null && ($_=this._perfObj,$bind($_,$_.now)) != null ? this._perfObj.now() : new Date().getTime();
		this._ticks++;
		if(this._raf != null && time > this._prevTime + Perf.MEASUREMENT_INTERVAL) {
			this.currentMs = Math.round(time - this._startTime);
			this.ms.innerHTML = "MS: " + this.currentMs;
			this.currentFps = Math.round(this._ticks * 1000 / (time - this._prevTime));
			if(this.currentFps > 0 && val > Perf.DELAY_TIME) {
				this._measureCount++;
				this._totalFps += this.currentFps;
				this.lowFps = this._fpsMin = Math.min(this._fpsMin,this.currentFps);
				this._fpsMax = Math.max(this._fpsMax,this.currentFps);
				this.avgFps = Math.round(this._totalFps / this._measureCount);
			}
			this.fps.innerHTML = "FPS: " + this.currentFps + " (" + this._fpsMin + "-" + this._fpsMax + ")";
			if(this.currentFps >= 30) {
				this.fps.style.backgroundColor = Perf.FPS_BG_CLR;
			} else if(this.currentFps >= 15) {
				this.fps.style.backgroundColor = Perf.FPS_WARN_BG_CLR;
			} else {
				this.fps.style.backgroundColor = Perf.FPS_PROB_BG_CLR;
			}
			this._prevTime = time;
			this._ticks = 0;
			if(this._memCheck) {
				this.currentMem = this._getFormattedSize(this._memoryObj.usedJSHeapSize,2);
				this.memory.innerHTML = "MEM: " + this.currentMem;
			}
		}
		this._startTime = time;
		if(this._raf != null) {
			this._raf = this.RAF.apply(window,[$bind(this,this._tick)]);
		}
	}
	,_createDiv: function(id,top) {
		if(top == null) {
			top = 0;
		}
		var div = window.document.createElement("div");
		div.id = id;
		div.className = id;
		div.style.position = "absolute";
		var _g = this._pos;
		switch(_g) {
		case "BL":
			div.style.left = this._offset + "px";
			div.style.bottom = (this._memCheck ? 48 : 32) - top + "px";
			break;
		case "BR":
			div.style.right = this._offset + "px";
			div.style.bottom = (this._memCheck ? 48 : 32) - top + "px";
			break;
		case "TL":
			div.style.left = this._offset + "px";
			div.style.top = top + "px";
			break;
		case "TR":
			div.style.right = this._offset + "px";
			div.style.top = top + "px";
			break;
		}
		div.style.width = "80px";
		div.style.height = "12px";
		div.style.lineHeight = "12px";
		div.style.padding = "2px";
		div.style.fontFamily = Perf.FONT_FAMILY;
		div.style.fontSize = "9px";
		div.style.fontWeight = "bold";
		div.style.textAlign = "center";
		window.document.body.appendChild(div);
		return div;
	}
	,_createFpsDom: function() {
		this.fps = this._createDiv("fps");
		this.fps.style.backgroundColor = Perf.FPS_BG_CLR;
		this.fps.style.zIndex = "995";
		this.fps.style.color = Perf.FPS_TXT_CLR;
		this.fps.innerHTML = "FPS: 0";
	}
	,_createMsDom: function() {
		this.ms = this._createDiv("ms",16);
		this.ms.style.backgroundColor = Perf.MS_BG_CLR;
		this.ms.style.zIndex = "996";
		this.ms.style.color = Perf.MS_TXT_CLR;
		this.ms.innerHTML = "MS: 0";
	}
	,_createMemoryDom: function() {
		this.memory = this._createDiv("memory",32);
		this.memory.style.backgroundColor = Perf.MEM_BG_CLR;
		this.memory.style.color = Perf.MEM_TXT_CLR;
		this.memory.style.zIndex = "997";
		this.memory.innerHTML = "MEM: 0";
	}
	,_getFormattedSize: function(bytes,frac) {
		if(frac == null) {
			frac = 0;
		}
		var sizes = ["Bytes","KB","MB","GB","TB"];
		if(bytes == 0) {
			return "0";
		}
		var precision = Math.pow(10,frac);
		var i = Math.floor(Math.log(bytes) / Math.log(1024));
		return Math.round(bytes * precision / Math.pow(1024,i)) / precision + " " + sizes[i];
	}
	,addInfo: function(val) {
		this.info = this._createDiv("info",this._memCheck ? 48 : 32);
		this.info.style.backgroundColor = Perf.INFO_BG_CLR;
		this.info.style.color = Perf.INFO_TXT_CLR;
		this.info.style.zIndex = "998";
		this.info.innerHTML = val;
	}
	,__class__: Perf
};
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.prototype = {
	run: function() {
	}
	,__class__: haxe_Timer
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var nape_Config = function() { };
nape_Config.__name__ = true;
var pixi_plugins_app_Application = function() {
	this._animationFrameId = null;
	this.pixelRatio = 1;
	this.autoResize = true;
	this.transparent = false;
	this.antialias = false;
	this.forceFXAA = false;
	this.roundPixels = false;
	this.legacy = false;
	this.clearBeforeRender = true;
	this.preserveDrawingBuffer = false;
	this.backgroundColor = 16777215;
	this.width = window.innerWidth;
	this.height = window.innerHeight;
	this.position = "static";
};
pixi_plugins_app_Application.__name__ = true;
pixi_plugins_app_Application.prototype = {
	start: function(rendererType,parentDom,canvasElement) {
		if(rendererType == null) {
			rendererType = "auto";
		}
		if(canvasElement == null) {
			this.canvas = window.document.createElement("canvas");
			this.canvas.style.width = this.width + "px";
			this.canvas.style.height = this.height + "px";
			this.canvas.style.position = this.position;
		} else {
			this.canvas = canvasElement;
		}
		if(this.autoResize) {
			window.onresize = $bind(this,this._onWindowResize);
		}
		var renderingOptions = { };
		renderingOptions.width = this.width | 0;
		renderingOptions.height = this.height | 0;
		renderingOptions.view = this.canvas;
		renderingOptions.backgroundColor = this.backgroundColor;
		renderingOptions.resolution = this.pixelRatio;
		renderingOptions.antialias = this.antialias;
		renderingOptions.forceFXAA = this.forceFXAA;
		renderingOptions.autoResize = this.autoResize;
		renderingOptions.transparent = this.transparent;
		renderingOptions.clearBeforeRender = this.clearBeforeRender;
		renderingOptions.preserveDrawingBuffer = this.preserveDrawingBuffer;
		renderingOptions.roundPixels = this.roundPixels;
		renderingOptions.legacy = this.legacy;
		if(rendererType == null) {
			this.app = new PIXI.Application(renderingOptions);
		} else if(rendererType == "canvas") {
			renderingOptions.forceCanvas = true;
			this.app = new PIXI.Application(renderingOptions);
		} else {
			this.app = new PIXI.Application(renderingOptions);
		}
		this.stage = this.app.stage;
		this.renderer = this.app.renderer;
		if(parentDom == null) {
			window.document.body.appendChild(this.app.view);
		} else {
			parentDom.appendChild(this.app.view);
		}
		this.app.ticker.add($bind(this,this._onRequestAnimationFrame));
		this.addStats();
	}
	,_onWindowResize: function(event) {
		this.width = window.innerWidth;
		this.height = window.innerHeight;
		this.app.renderer.resize(this.width,this.height);
		this.canvas.style.width = this.width + "px";
		this.canvas.style.height = this.height + "px";
		if(this.onResize != null) {
			this.onResize();
		}
	}
	,_onRequestAnimationFrame: function() {
		if(this.onUpdate != null) {
			this.onUpdate(this.app.ticker.deltaTime);
		}
	}
	,addStats: function() {
		if(window.Perf != null) {
			var rendererType = this.app.renderer.type;
			var renderer;
			switch(rendererType) {
			case 1:
				renderer = "WEBGL";
				break;
			case 2:
				renderer = "CANVAS";
				break;
			default:
				renderer = "UNKNOWN";
			}
			new Perf().addInfo(renderer + " - " + this.pixelRatio);
		}
	}
	,__class__: pixi_plugins_app_Application
};
var nape_Main = function() {
	pixi_plugins_app_Application.call(this);
	this._init();
	this._balls = [];
	this._pballs = [];
	this._setUpPhysics();
	this.onUpdate = $bind(this,this._onUpdate);
	var timer = new haxe_Timer(1000);
	timer.run = $bind(this,this._addBall);
	this._addBall();
};
nape_Main.__name__ = true;
nape_Main.main = function() {
	new nape_Main();
};
nape_Main.__super__ = pixi_plugins_app_Application;
nape_Main.prototype = $extend(pixi_plugins_app_Application.prototype,{
	_init: function() {
		this.position = "fixed";
		this.backgroundColor = 6724095;
		this.autoResize = false;
		this.width = 800;
		this.height = 600;
		pixi_plugins_app_Application.prototype.start.call(this);
	}
	,_onUpdate: function(elapsedTime) {
		this._space.step(0.016666666666666666);
		var _g1 = 0;
		var _g = this._pballs.length;
		while(_g1 < _g) {
			var i = _g1++;
			var _this = this._pballs[i];
			if(_this.zpp_inner.wrap_pos == null) {
				_this.zpp_inner.setupPosition();
			}
			var _this1 = _this.zpp_inner.wrap_pos;
			if(_this1 != null && _this1.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = _this1.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			this._balls[i].position.x = _this1.zpp_inner.x;
			var _this3 = this._pballs[i];
			if(_this3.zpp_inner.wrap_pos == null) {
				_this3.zpp_inner.setupPosition();
			}
			var _this4 = _this3.zpp_inner.wrap_pos;
			if(_this4 != null && _this4.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this5 = _this4.zpp_inner;
			if(_this5._validate != null) {
				_this5._validate();
			}
			this._balls[i].position.y = _this4.zpp_inner.y;
			this._balls[i].rotation = this._pballs[i].zpp_inner.rot;
		}
	}
	,_setUpPhysics: function() {
		var ret;
		if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
			ret = new nape_geom_Vec2();
		} else {
			ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
				ret1 = new zpp_$nape_geom_ZPP_$Vec2();
			} else {
				ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = 0;
			ret1.y = 600;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = ret.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			if(ret.zpp_inner.x == 0) {
				if(ret != null && ret.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = ret.zpp_inner;
				if(_this2._validate != null) {
					_this2._validate();
				}
				tmp = ret.zpp_inner.y == 600;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = 0;
				ret.zpp_inner.y = 600;
				var _this3 = ret.zpp_inner;
				if(_this3._invalidate != null) {
					_this3._invalidate(_this3);
				}
			}
		}
		ret.zpp_inner.weak = true;
		var gravity = ret;
		this._space = new nape_space_Space(gravity);
		if(zpp_$nape_util_ZPP_$Flags.BodyType_STATIC == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.BodyType_STATIC = new nape_phys_BodyType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		this._floor = new nape_phys_Body(zpp_$nape_util_ZPP_$Flags.BodyType_STATIC);
		this._floor.setShapeMaterials(nape_phys_Material.wood());
		var _this4 = this._floor.zpp_inner.wrap_shapes;
		var obj = new nape_shape_Polygon(nape_shape_Polygon.rect(0,595,800,1));
		if(_this4.zpp_inner.reverse_flag) {
			_this4.push(obj);
		} else {
			_this4.unshift(obj);
		}
		var _this5 = this._floor;
		var space = this._space;
		if(_this5.zpp_inner.compound != null) {
			throw new js__$Boot_HaxeError("Error: Cannot set the space of a Body belonging to a Compound, only the root Compound space can be set");
		}
		_this5.zpp_inner.immutable_midstep("Body::space");
		if(_this5.zpp_inner.world) {
			throw new js__$Boot_HaxeError("Error: Space::world is immutable");
		}
		if((_this5.zpp_inner.space == null ? null : _this5.zpp_inner.space.outer) != space) {
			if((_this5.zpp_inner.space == null ? null : _this5.zpp_inner.space.outer) != null) {
				_this5.zpp_inner.component.woken = false;
			}
			if((_this5.zpp_inner.space == null ? null : _this5.zpp_inner.space.outer) != null) {
				(_this5.zpp_inner.space == null ? null : _this5.zpp_inner.space.outer).zpp_inner.wrap_bodies.remove(_this5);
			}
			if(space != null) {
				var _this6 = space.zpp_inner.wrap_bodies;
				if(_this6.zpp_inner.reverse_flag) {
					_this6.push(_this5);
				} else {
					_this6.unshift(_this5);
				}
			}
		}
		var tmp1 = _this5.zpp_inner.space == null;
	}
	,_addBall: function() {
		var ball = new PIXI.Sprite(PIXI.Texture.from("assets/nape/ball.png"));
		ball.anchor.set(0.5,0.5);
		this._balls.push(ball);
		this.stage.addChild(ball);
		if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		var pball = new nape_phys_Body(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC);
		var _this = pball.zpp_inner.wrap_shapes;
		var obj = new nape_shape_Circle(10);
		if(_this.zpp_inner.reverse_flag) {
			_this.push(obj);
		} else {
			_this.unshift(obj);
		}
		if(pball.zpp_inner.wrap_pos == null) {
			pball.zpp_inner.setupPosition();
		}
		var _this1 = pball.zpp_inner.wrap_pos;
		var x = Std.random(800);
		if(_this1 != null && _this1.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this2 = _this1.zpp_inner;
		if(_this2._immutable) {
			throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
		}
		if(_this2._isimmutable != null) {
			_this2._isimmutable();
		}
		if(x != x) {
			throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(_this1 != null && _this1.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this3 = _this1.zpp_inner;
		if(_this3._validate != null) {
			_this3._validate();
		}
		if(_this1.zpp_inner.x == x) {
			if(_this1 != null && _this1.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this4 = _this1.zpp_inner;
			if(_this4._validate != null) {
				_this4._validate();
			}
			tmp = _this1.zpp_inner.y == 0;
		} else {
			tmp = false;
		}
		if(!tmp) {
			_this1.zpp_inner.x = x;
			_this1.zpp_inner.y = 0;
			var _this5 = _this1.zpp_inner;
			if(_this5._invalidate != null) {
				_this5._invalidate(_this5);
			}
		}
		if(pball.zpp_inner.world) {
			throw new js__$Boot_HaxeError("Error: Space::world is immutable");
		}
		if(pball.zpp_inner.angvel != 0) {
			if(pball.zpp_inner.type == 1) {
				throw new js__$Boot_HaxeError("Error: A static object cannot be given a velocity");
			}
			pball.zpp_inner.angvel = 0;
			pball.zpp_inner.wake();
		}
		pball.zpp_inner.immutable_midstep("Body::" + "true");
		if(!pball.zpp_inner.norotate != true) {
			pball.zpp_inner.norotate = false;
			pball.zpp_inner.invalidate_inertia();
		}
		pball.setShapeMaterials(nape_phys_Material.rubber());
		var space = this._space;
		if(pball.zpp_inner.compound != null) {
			throw new js__$Boot_HaxeError("Error: Cannot set the space of a Body belonging to a Compound, only the root Compound space can be set");
		}
		pball.zpp_inner.immutable_midstep("Body::space");
		if(pball.zpp_inner.world) {
			throw new js__$Boot_HaxeError("Error: Space::world is immutable");
		}
		if((pball.zpp_inner.space == null ? null : pball.zpp_inner.space.outer) != space) {
			if((pball.zpp_inner.space == null ? null : pball.zpp_inner.space.outer) != null) {
				pball.zpp_inner.component.woken = false;
			}
			if((pball.zpp_inner.space == null ? null : pball.zpp_inner.space.outer) != null) {
				(pball.zpp_inner.space == null ? null : pball.zpp_inner.space.outer).zpp_inner.wrap_bodies.remove(pball);
			}
			if(space != null) {
				var _this6 = space.zpp_inner.wrap_bodies;
				if(_this6.zpp_inner.reverse_flag) {
					_this6.push(pball);
				} else {
					_this6.unshift(pball);
				}
			}
		}
		var tmp1 = pball.zpp_inner.space == null;
		this._pballs.push(pball);
	}
	,__class__: nape_Main
});
var nape_callbacks_Callback = function() {
	this.zpp_inner = null;
	if(!zpp_$nape_callbacks_ZPP_$Callback.internal) {
		throw new js__$Boot_HaxeError("Error: Callback cannot be instantiated derp!");
	}
};
nape_callbacks_Callback.__name__ = true;
nape_callbacks_Callback.prototype = {
	toString: function() {
		return "";
	}
	,__class__: nape_callbacks_Callback
};
var nape_callbacks_BodyCallback = function() {
	nape_callbacks_Callback.call(this);
};
nape_callbacks_BodyCallback.__name__ = true;
nape_callbacks_BodyCallback.__super__ = nape_callbacks_Callback;
nape_callbacks_BodyCallback.prototype = $extend(nape_callbacks_Callback.prototype,{
	toString: function() {
		var ret = "Cb:";
		ret += ["WAKE","SLEEP"][this.zpp_inner.event - 2];
		ret += ":" + this.zpp_inner.body.outer.toString();
		ret += " : listener: " + Std.string(this.zpp_inner.listener.outer);
		return ret;
	}
	,__class__: nape_callbacks_BodyCallback
});
var nape_callbacks_Listener = function() {
	this.zpp_inner = null;
	if(!zpp_$nape_callbacks_ZPP_$Listener.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate Listener derp!");
	}
};
nape_callbacks_Listener.__name__ = true;
nape_callbacks_Listener.prototype = {
	toString: function() {
		var event = ["BEGIN","END","WAKE","SLEEP","BREAK","PRE","ONGOING"][this.zpp_inner.event];
		if(this.zpp_inner.type == 0) {
			var body = this.zpp_inner.body;
			return "BodyListener{" + event + "::" + Std.string(body.outer_zn.zpp_inner_zn.options.outer) + "}";
		} else if(this.zpp_inner.type == 1) {
			var con = this.zpp_inner.constraint;
			return "ConstraintListener{" + event + "::" + Std.string(con.outer_zn.zpp_inner_zn.options.outer) + "}";
		} else {
			var con1 = this.zpp_inner.interaction;
			var itype;
			var _g = con1.itype;
			switch(_g) {
			case 1:
				itype = "COLLISION";
				break;
			case 2:
				itype = "SENSOR";
				break;
			case 4:
				itype = "FLUID";
				break;
			default:
				itype = "ALL";
			}
			return (this.zpp_inner.type == 2 ? "InteractionListener{" + event + "#" + itype + "::" + Std.string(con1.outer_zni.zpp_inner_zn.options1.outer) + ":" + Std.string(con1.outer_zni.zpp_inner_zn.options2.outer) + "}" : "PreListener{" + itype + "::" + Std.string(con1.outer_znp.zpp_inner_zn.options1.outer) + ":" + Std.string(con1.outer_znp.zpp_inner_zn.options2.outer) + "}") + " precedence=" + this.zpp_inner.precedence;
		}
	}
	,__class__: nape_callbacks_Listener
};
var nape_callbacks_BodyListener = function(event,options,handler,precedence) {
	if(precedence == null) {
		precedence = 0;
	}
	this.zpp_inner_zn = null;
	zpp_$nape_callbacks_ZPP_$Listener.internal = true;
	nape_callbacks_Listener.call(this);
	zpp_$nape_callbacks_ZPP_$Listener.internal = false;
	if(handler == null) {
		throw new js__$Boot_HaxeError("Error: BodyListener::handler cannot be null");
	}
	var xevent = -1;
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	if(event == zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE) {
		xevent = 2;
	} else {
		if(zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP = new nape_callbacks_CbEvent();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(event == zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP) {
			xevent = 3;
		} else {
			throw new js__$Boot_HaxeError("Error: cbEvent '" + event.toString() + "' is not a valid event type for a BodyListener");
		}
	}
	this.zpp_inner_zn = new zpp_$nape_callbacks_ZPP_$BodyListener(zpp_$nape_callbacks_ZPP_$OptionType.argument(options),xevent,handler);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner.precedence = precedence;
};
nape_callbacks_BodyListener.__name__ = true;
nape_callbacks_BodyListener.__super__ = nape_callbacks_Listener;
nape_callbacks_BodyListener.prototype = $extend(nape_callbacks_Listener.prototype,{
	__class__: nape_callbacks_BodyListener
});
var nape_callbacks_CbEvent = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "CbEvent" + " derp!");
	}
};
nape_callbacks_CbEvent.__name__ = true;
nape_callbacks_CbEvent.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN = new nape_callbacks_CbEvent();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN) {
			return "BEGIN";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING = new nape_callbacks_CbEvent();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING) {
				return "ONGOING";
			} else {
				if(zpp_$nape_util_ZPP_$Flags.CbEvent_END == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.CbEvent_END = new nape_callbacks_CbEvent();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(this == zpp_$nape_util_ZPP_$Flags.CbEvent_END) {
					return "END";
				} else {
					if(zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE == null) {
						zpp_$nape_util_ZPP_$Flags.internal = true;
						zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE = new nape_callbacks_CbEvent();
						zpp_$nape_util_ZPP_$Flags.internal = false;
					}
					if(this == zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE) {
						return "WAKE";
					} else {
						if(zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP == null) {
							zpp_$nape_util_ZPP_$Flags.internal = true;
							zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP = new nape_callbacks_CbEvent();
							zpp_$nape_util_ZPP_$Flags.internal = false;
						}
						if(this == zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP) {
							return "SLEEP";
						} else {
							if(zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK == null) {
								zpp_$nape_util_ZPP_$Flags.internal = true;
								zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK = new nape_callbacks_CbEvent();
								zpp_$nape_util_ZPP_$Flags.internal = false;
							}
							if(this == zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK) {
								return "BREAK";
							} else {
								if(zpp_$nape_util_ZPP_$Flags.CbEvent_PRE == null) {
									zpp_$nape_util_ZPP_$Flags.internal = true;
									zpp_$nape_util_ZPP_$Flags.CbEvent_PRE = new nape_callbacks_CbEvent();
									zpp_$nape_util_ZPP_$Flags.internal = false;
								}
								if(this == zpp_$nape_util_ZPP_$Flags.CbEvent_PRE) {
									return "PRE";
								} else {
									return "";
								}
							}
						}
					}
				}
			}
		}
	}
	,__class__: nape_callbacks_CbEvent
};
var nape_callbacks_CbType = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_callbacks_ZPP_$CbType();
	this.zpp_inner.outer = this;
};
nape_callbacks_CbType.__name__ = true;
nape_callbacks_CbType.get_ANY_BODY = function() {
	return zpp_$nape_callbacks_ZPP_$CbType.ANY_BODY;
};
nape_callbacks_CbType.get_ANY_CONSTRAINT = function() {
	return zpp_$nape_callbacks_ZPP_$CbType.ANY_CONSTRAINT;
};
nape_callbacks_CbType.get_ANY_SHAPE = function() {
	return zpp_$nape_callbacks_ZPP_$CbType.ANY_SHAPE;
};
nape_callbacks_CbType.get_ANY_COMPOUND = function() {
	return zpp_$nape_callbacks_ZPP_$CbType.ANY_COMPOUND;
};
nape_callbacks_CbType.prototype = {
	toString: function() {
		if(this == zpp_$nape_callbacks_ZPP_$CbType.ANY_BODY) {
			return "ANY_BODY";
		} else if(this == zpp_$nape_callbacks_ZPP_$CbType.ANY_SHAPE) {
			return "ANY_SHAPE";
		} else if(this == zpp_$nape_callbacks_ZPP_$CbType.ANY_COMPOUND) {
			return "ANY_COMPOUND";
		} else if(this == zpp_$nape_callbacks_ZPP_$CbType.ANY_CONSTRAINT) {
			return "ANY_CONSTRAINT";
		} else {
			return "CbType#" + this.zpp_inner.id;
		}
	}
	,__class__: nape_callbacks_CbType
};
var nape_callbacks_CbTypeIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$CbTypeList.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "CbType" + "Iterator derp!");
	}
};
nape_callbacks_CbTypeIterator.__name__ = true;
nape_callbacks_CbTypeIterator.get = function(list) {
	var ret;
	if(nape_callbacks_CbTypeIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$CbTypeList.internal = true;
		var ret1 = new nape_callbacks_CbTypeIterator();
		zpp_$nape_util_ZPP_$CbTypeList.internal = false;
		ret = ret1;
	} else {
		var r = nape_callbacks_CbTypeIterator.zpp_pool;
		nape_callbacks_CbTypeIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_callbacks_CbTypeIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_callbacks_CbTypeIterator.zpp_pool;
			nape_callbacks_CbTypeIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_callbacks_CbTypeIterator
};
var nape_callbacks_CbTypeList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$CbTypeList();
	this.zpp_inner.outer = this;
};
nape_callbacks_CbTypeList.__name__ = true;
nape_callbacks_CbTypeList.fromArray = function(array) {
	if(array == null) {
		throw new js__$Boot_HaxeError("Error: Cannot convert null Array to Nape list");
	}
	var ret = new nape_callbacks_CbTypeList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape_callbacks_CbTypeList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		var tmp;
		if(index >= 0) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			tmp = index >= this.zpp_inner.user_length;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) {
			throw new js__$Boot_HaxeError("Error: " + "CbType" + "List is immutable");
		}
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				this.zpp_inner.inner.add(obj.zpp_inner);
			} else {
				if(this.zpp_inner.push_ite == null) {
					var tmp;
					if(this.zpp_inner.inner.head == null) {
						tmp = null;
					} else {
						var tmp1 = this.zpp_inner.inner;
						this.zpp_inner.valmod();
						if(this.zpp_inner.zip_length) {
							this.zpp_inner.zip_length = false;
							this.zpp_inner.user_length = this.zpp_inner.inner.length;
						}
						tmp = tmp1.iterator_at(this.zpp_inner.user_length - 1);
					}
					this.zpp_inner.push_ite = tmp;
				}
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_callbacks_CbTypeIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_callbacks_CbTypeIterator.zpp_pool;
				nape_callbacks_CbTypeIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_callbacks_CbTypeList
};
var nape_callbacks_ConstraintCallback = function() {
	nape_callbacks_Callback.call(this);
};
nape_callbacks_ConstraintCallback.__name__ = true;
nape_callbacks_ConstraintCallback.__super__ = nape_callbacks_Callback;
nape_callbacks_ConstraintCallback.prototype = $extend(nape_callbacks_Callback.prototype,{
	toString: function() {
		var ret = "Cb:";
		ret += ["WAKE","SLEEP","BREAK"][this.zpp_inner.event - 2];
		ret += ":" + this.zpp_inner.constraint.outer.toString();
		ret += " : listener: " + Std.string(this.zpp_inner.listener.outer);
		return ret;
	}
	,__class__: nape_callbacks_ConstraintCallback
});
var nape_callbacks_ConstraintListener = function(event,options,handler,precedence) {
	if(precedence == null) {
		precedence = 0;
	}
	this.zpp_inner_zn = null;
	zpp_$nape_callbacks_ZPP_$Listener.internal = true;
	nape_callbacks_Listener.call(this);
	zpp_$nape_callbacks_ZPP_$Listener.internal = false;
	if(handler == null) {
		throw new js__$Boot_HaxeError("Error: ConstraintListener::handler cannot be null");
	}
	var xevent = -1;
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	if(event == zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE) {
		xevent = 2;
	} else {
		if(zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP = new nape_callbacks_CbEvent();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(event == zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP) {
			xevent = 3;
		} else {
			if(zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK = new nape_callbacks_CbEvent();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(event == zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK) {
				xevent = 4;
			} else {
				throw new js__$Boot_HaxeError("Error: cbEvent '" + event.toString() + "' is not a valid event type for a ConstraintListener");
			}
		}
	}
	this.zpp_inner_zn = new zpp_$nape_callbacks_ZPP_$ConstraintListener(zpp_$nape_callbacks_ZPP_$OptionType.argument(options),xevent,handler);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner.precedence = precedence;
};
nape_callbacks_ConstraintListener.__name__ = true;
nape_callbacks_ConstraintListener.__super__ = nape_callbacks_Listener;
nape_callbacks_ConstraintListener.prototype = $extend(nape_callbacks_Listener.prototype,{
	__class__: nape_callbacks_ConstraintListener
});
var nape_callbacks_InteractionCallback = function() {
	nape_callbacks_Callback.call(this);
};
nape_callbacks_InteractionCallback.__name__ = true;
nape_callbacks_InteractionCallback.__super__ = nape_callbacks_Callback;
nape_callbacks_InteractionCallback.prototype = $extend(nape_callbacks_Callback.prototype,{
	toString: function() {
		var ret = "Cb:";
		ret += ["BEGIN","END","","","","","ONGOING"][this.zpp_inner.event];
		ret += ":" + this.zpp_inner.int1.outer_i.toString() + "/" + this.zpp_inner.int2.outer_i.toString();
		ret += " : " + this.zpp_inner.wrap_arbiters.toString();
		ret += " : listener: " + Std.string(this.zpp_inner.listener.outer);
		return ret;
	}
	,__class__: nape_callbacks_InteractionCallback
});
var nape_callbacks_InteractionListener = function(event,interactionType,options1,options2,handler,precedence) {
	if(precedence == null) {
		precedence = 0;
	}
	this.zpp_inner_zn = null;
	zpp_$nape_callbacks_ZPP_$Listener.internal = true;
	nape_callbacks_Listener.call(this);
	zpp_$nape_callbacks_ZPP_$Listener.internal = false;
	if(handler == null) {
		throw new js__$Boot_HaxeError("Error: InteractionListener::handler cannot be null");
	}
	if(event == null) {
		throw new js__$Boot_HaxeError("Error: CbEvent cannot be null for InteractionListener");
	}
	var xevent = -1;
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	if(event == zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN) {
		xevent = 0;
	} else {
		if(zpp_$nape_util_ZPP_$Flags.CbEvent_END == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.CbEvent_END = new nape_callbacks_CbEvent();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(event == zpp_$nape_util_ZPP_$Flags.CbEvent_END) {
			xevent = 1;
		} else {
			if(zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING = new nape_callbacks_CbEvent();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(event == zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING) {
				xevent = 6;
			} else {
				throw new js__$Boot_HaxeError("Error: CbEvent '" + event.toString() + "' is not a valid event type for InteractionListener");
			}
		}
	}
	this.zpp_inner_zn = new zpp_$nape_callbacks_ZPP_$InteractionListener(zpp_$nape_callbacks_ZPP_$OptionType.argument(options1),zpp_$nape_callbacks_ZPP_$OptionType.argument(options2),xevent,2);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zni = this;
	this.zpp_inner.precedence = precedence;
	this.zpp_inner_zn.handleri = handler;
	if(interactionType == null) {
		throw new js__$Boot_HaxeError("Error: Cannot set listener interaction type to null");
	}
	var ret = this.zpp_inner_zn.itype;
	var tmp;
	if(ret == 1) {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		tmp = zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION;
	} else if(ret == 2) {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		tmp = zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR;
	} else if(ret == 4) {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		tmp = zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID;
	} else if(ret == 7) {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_ANY == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_ANY = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		tmp = zpp_$nape_util_ZPP_$Flags.InteractionType_ANY;
	} else {
		tmp = null;
	}
	if(tmp != interactionType) {
		var xtype;
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(interactionType == zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION) {
			xtype = 1;
		} else {
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(interactionType == zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR) {
				xtype = 2;
			} else {
				if(zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID = new nape_callbacks_InteractionType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(interactionType == zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID) {
					xtype = 4;
				} else {
					xtype = 7;
				}
			}
		}
		this.zpp_inner_zn.itype = xtype;
	}
	var ret1 = this.zpp_inner_zn.itype;
	if(ret1 == 1) {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
	} else if(ret1 == 2) {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
	} else if(ret1 == 4) {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
	} else if(ret1 == 7) {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_ANY == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_ANY = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
	}
};
nape_callbacks_InteractionListener.__name__ = true;
nape_callbacks_InteractionListener.__super__ = nape_callbacks_Listener;
nape_callbacks_InteractionListener.prototype = $extend(nape_callbacks_Listener.prototype,{
	__class__: nape_callbacks_InteractionListener
});
var nape_callbacks_InteractionType = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "InteractionType" + " derp!");
	}
};
nape_callbacks_InteractionType.__name__ = true;
nape_callbacks_InteractionType.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION) {
			return "COLLISION";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR) {
				return "SENSOR";
			} else {
				if(zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID = new nape_callbacks_InteractionType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(this == zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID) {
					return "FLUID";
				} else {
					if(zpp_$nape_util_ZPP_$Flags.InteractionType_ANY == null) {
						zpp_$nape_util_ZPP_$Flags.internal = true;
						zpp_$nape_util_ZPP_$Flags.InteractionType_ANY = new nape_callbacks_InteractionType();
						zpp_$nape_util_ZPP_$Flags.internal = false;
					}
					if(this == zpp_$nape_util_ZPP_$Flags.InteractionType_ANY) {
						return "ANY";
					} else {
						return "";
					}
				}
			}
		}
	}
	,__class__: nape_callbacks_InteractionType
};
var nape_callbacks_ListenerIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$ListenerList.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "Listener" + "Iterator derp!");
	}
};
nape_callbacks_ListenerIterator.__name__ = true;
nape_callbacks_ListenerIterator.get = function(list) {
	var ret;
	if(nape_callbacks_ListenerIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ListenerList.internal = true;
		var ret1 = new nape_callbacks_ListenerIterator();
		zpp_$nape_util_ZPP_$ListenerList.internal = false;
		ret = ret1;
	} else {
		var r = nape_callbacks_ListenerIterator.zpp_pool;
		nape_callbacks_ListenerIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_callbacks_ListenerIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_callbacks_ListenerIterator.zpp_pool;
			nape_callbacks_ListenerIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_callbacks_ListenerIterator
};
var nape_callbacks_ListenerList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$ListenerList();
	this.zpp_inner.outer = this;
};
nape_callbacks_ListenerList.__name__ = true;
nape_callbacks_ListenerList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		var tmp;
		if(index >= 0) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			tmp = index >= this.zpp_inner.user_length;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) {
			throw new js__$Boot_HaxeError("Error: " + "Listener" + "List is immutable");
		}
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) {
				this.zpp_inner.subber(obj);
			}
			if(!this.zpp_inner.dontremove) {
				this.zpp_inner.inner.remove(obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_callbacks_ListenerIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_callbacks_ListenerIterator.zpp_pool;
				nape_callbacks_ListenerIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_callbacks_ListenerList
};
var nape_callbacks_ListenerType = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "ListenerType" + " derp!");
	}
};
nape_callbacks_ListenerType.__name__ = true;
nape_callbacks_ListenerType.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.ListenerType_PRE == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.ListenerType_PRE = new nape_callbacks_ListenerType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.ListenerType_PRE) {
			return "PRE";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.ListenerType_BODY == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ListenerType_BODY = new nape_callbacks_ListenerType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.ListenerType_BODY) {
				return "BODY";
			} else {
				if(zpp_$nape_util_ZPP_$Flags.ListenerType_CONSTRAINT == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.ListenerType_CONSTRAINT = new nape_callbacks_ListenerType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(this == zpp_$nape_util_ZPP_$Flags.ListenerType_CONSTRAINT) {
					return "CONSTRAINT";
				} else {
					if(zpp_$nape_util_ZPP_$Flags.ListenerType_INTERACTION == null) {
						zpp_$nape_util_ZPP_$Flags.internal = true;
						zpp_$nape_util_ZPP_$Flags.ListenerType_INTERACTION = new nape_callbacks_ListenerType();
						zpp_$nape_util_ZPP_$Flags.internal = false;
					}
					if(this == zpp_$nape_util_ZPP_$Flags.ListenerType_INTERACTION) {
						return "INTERACTION";
					} else {
						return "";
					}
				}
			}
		}
	}
	,__class__: nape_callbacks_ListenerType
};
var nape_callbacks_OptionType = function(includes,excludes) {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_callbacks_ZPP_$OptionType();
	this.zpp_inner.outer = this;
	if(includes != null) {
		this.including(includes);
	}
	if(excludes != null) {
		this.excluding(excludes);
	}
};
nape_callbacks_OptionType.__name__ = true;
nape_callbacks_OptionType.prototype = {
	including: function(includes) {
		this.zpp_inner.append(this.zpp_inner.includes,includes);
		return this;
	}
	,excluding: function(excludes) {
		this.zpp_inner.append(this.zpp_inner.excludes,excludes);
		return this;
	}
	,toString: function() {
		if(this.zpp_inner.wrap_includes == null) {
			this.zpp_inner.setup_includes();
		}
		var inc = this.zpp_inner.wrap_includes.toString();
		if(this.zpp_inner.wrap_excludes == null) {
			this.zpp_inner.setup_excludes();
		}
		var exc = this.zpp_inner.wrap_excludes.toString();
		return "@{" + inc + " excluding " + exc + "}";
	}
	,__class__: nape_callbacks_OptionType
};
var nape_callbacks_PreCallback = function() {
	nape_callbacks_Callback.call(this);
};
nape_callbacks_PreCallback.__name__ = true;
nape_callbacks_PreCallback.__super__ = nape_callbacks_Callback;
nape_callbacks_PreCallback.prototype = $extend(nape_callbacks_Callback.prototype,{
	toString: function() {
		var ret = "Cb:PRE:";
		ret += ":" + this.zpp_inner.int1.outer_i.toString() + "/" + this.zpp_inner.int2.outer_i.toString();
		ret += " : " + this.zpp_inner.pre_arbiter.wrapper().toString();
		ret += " : listnener: " + Std.string(this.zpp_inner.listener.outer);
		return ret;
	}
	,__class__: nape_callbacks_PreCallback
});
var nape_callbacks_PreFlag = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "PreFlag" + " derp!");
	}
};
nape_callbacks_PreFlag.__name__ = true;
nape_callbacks_PreFlag.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT = new nape_callbacks_PreFlag();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT) {
			return "ACCEPT";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE = new nape_callbacks_PreFlag();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE) {
				return "IGNORE";
			} else {
				if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE = new nape_callbacks_PreFlag();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(this == zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE) {
					return "ACCEPT_ONCE";
				} else {
					if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE == null) {
						zpp_$nape_util_ZPP_$Flags.internal = true;
						zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE = new nape_callbacks_PreFlag();
						zpp_$nape_util_ZPP_$Flags.internal = false;
					}
					if(this == zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE) {
						return "IGNORE_ONCE";
					} else {
						return "";
					}
				}
			}
		}
	}
	,__class__: nape_callbacks_PreFlag
};
var nape_callbacks_PreListener = function(interactionType,options1,options2,handler,precedence,pure) {
	if(pure == null) {
		pure = false;
	}
	if(precedence == null) {
		precedence = 0;
	}
	this.zpp_inner_zn = null;
	zpp_$nape_callbacks_ZPP_$Listener.internal = true;
	nape_callbacks_Listener.call(this);
	zpp_$nape_callbacks_ZPP_$Listener.internal = false;
	if(handler == null) {
		throw new js__$Boot_HaxeError("Error: PreListener must take a handler!");
	}
	this.zpp_inner_zn = new zpp_$nape_callbacks_ZPP_$InteractionListener(zpp_$nape_callbacks_ZPP_$OptionType.argument(options1),zpp_$nape_callbacks_ZPP_$OptionType.argument(options2),5,3);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_znp = this;
	this.zpp_inner.precedence = precedence;
	this.zpp_inner_zn.pure = pure;
	this.zpp_inner_zn.handlerp = handler;
	if(interactionType == null) {
		throw new js__$Boot_HaxeError("Error: Cannot set listener interaction type to null");
	}
	var ret = this.zpp_inner_zn.itype;
	var tmp;
	if(ret == 1) {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		tmp = zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION;
	} else if(ret == 2) {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		tmp = zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR;
	} else if(ret == 4) {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		tmp = zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID;
	} else if(ret == 7) {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_ANY == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_ANY = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		tmp = zpp_$nape_util_ZPP_$Flags.InteractionType_ANY;
	} else {
		tmp = null;
	}
	if(tmp != interactionType) {
		var xtype;
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(interactionType == zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION) {
			xtype = 1;
		} else {
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(interactionType == zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR) {
				xtype = 2;
			} else {
				if(zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID = new nape_callbacks_InteractionType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(interactionType == zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID) {
					xtype = 4;
				} else {
					xtype = 7;
				}
			}
		}
		this.zpp_inner_zn.itype = xtype;
	}
	var ret1 = this.zpp_inner_zn.itype;
	if(ret1 == 1) {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
	} else if(ret1 == 2) {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
	} else if(ret1 == 4) {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
	} else if(ret1 == 7) {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_ANY == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_ANY = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
	}
};
nape_callbacks_PreListener.__name__ = true;
nape_callbacks_PreListener.__super__ = nape_callbacks_Listener;
nape_callbacks_PreListener.prototype = $extend(nape_callbacks_Listener.prototype,{
	__class__: nape_callbacks_PreListener
});
var nape_constraint_Constraint = function() {
	this.zpp_inner.insert_cbtype(zpp_$nape_callbacks_ZPP_$CbType.ANY_CONSTRAINT.zpp_inner);
	if(!nape_constraint_Constraint.zpp_internalAlloc) {
		throw new js__$Boot_HaxeError("Error: Constraint cannot be instantiated derp!");
	}
};
nape_constraint_Constraint.__name__ = true;
nape_constraint_Constraint.prototype = {
	toString: function() {
		return "{Constraint}";
	}
	,__class__: nape_constraint_Constraint
};
var nape_constraint_AngleJoint = function(body1,body2,jointMin,jointMax,ratio) {
	if(ratio == null) {
		ratio = 1.0;
	}
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_$nape_constraint_ZPP_$AngleJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape_constraint_Constraint.zpp_internalAlloc = true;
	nape_constraint_Constraint.call(this);
	nape_constraint_Constraint.zpp_internalAlloc = false;
	this.zpp_inner.immutable_midstep("Constraint::" + "body1");
	var inbody1 = body1 == null ? null : body1.zpp_inner;
	if(inbody1 != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
				if(this.zpp_inner_zn.b1 != null) {
					this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b1.wake();
			}
		}
		this.zpp_inner_zn.b1 = inbody1;
		if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
			if(inbody1 != null) {
				inbody1.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody1 != null) {
				inbody1.wake();
			}
		}
	}
	var tmp = this.zpp_inner_zn.b1 == null;
	this.zpp_inner.immutable_midstep("Constraint::" + "body2");
	var inbody2 = body2 == null ? null : body2.zpp_inner;
	if(inbody2 != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
				if(this.zpp_inner_zn.b2 != null) {
					this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b2.wake();
			}
		}
		this.zpp_inner_zn.b2 = inbody2;
		if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
			if(inbody2 != null) {
				inbody2.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody2 != null) {
				inbody2.wake();
			}
		}
	}
	var tmp1 = this.zpp_inner_zn.b2 == null;
	this.zpp_inner.immutable_midstep("AngleJoint::jointMin");
	if(jointMin != jointMin) {
		throw new js__$Boot_HaxeError("Error: AngleJoint::jointMin cannot be NaN");
	}
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	this.zpp_inner.immutable_midstep("AngleJoint::jointMax");
	if(jointMax != jointMax) {
		throw new js__$Boot_HaxeError("Error: AngleJoint::jointMax cannot be NaN");
	}
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	this.zpp_inner.immutable_midstep("AngleJoint::ratio");
	if(ratio != ratio) {
		throw new js__$Boot_HaxeError("Error: AngleJoint::ratio cannot be NaN");
	}
	if(this.zpp_inner_zn.ratio != ratio) {
		this.zpp_inner_zn.ratio = ratio;
		this.zpp_inner.wake();
	}
};
nape_constraint_AngleJoint.__name__ = true;
nape_constraint_AngleJoint.__super__ = nape_constraint_Constraint;
nape_constraint_AngleJoint.prototype = $extend(nape_constraint_Constraint.prototype,{
	__class__: nape_constraint_AngleJoint
});
var nape_constraint_ConstraintIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$ConstraintList.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "Constraint" + "Iterator derp!");
	}
};
nape_constraint_ConstraintIterator.__name__ = true;
nape_constraint_ConstraintIterator.get = function(list) {
	var ret;
	if(nape_constraint_ConstraintIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ConstraintList.internal = true;
		var ret1 = new nape_constraint_ConstraintIterator();
		zpp_$nape_util_ZPP_$ConstraintList.internal = false;
		ret = ret1;
	} else {
		var r = nape_constraint_ConstraintIterator.zpp_pool;
		nape_constraint_ConstraintIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_constraint_ConstraintIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_constraint_ConstraintIterator.zpp_pool;
			nape_constraint_ConstraintIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_constraint_ConstraintIterator
};
var nape_constraint_ConstraintList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$ConstraintList();
	this.zpp_inner.outer = this;
};
nape_constraint_ConstraintList.__name__ = true;
nape_constraint_ConstraintList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		var tmp;
		if(index >= 0) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			tmp = index >= this.zpp_inner.user_length;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) {
			throw new js__$Boot_HaxeError("Error: " + "Constraint" + "List is immutable");
		}
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) {
				this.zpp_inner.subber(obj);
			}
			if(!this.zpp_inner.dontremove) {
				this.zpp_inner.inner.remove(obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_constraint_ConstraintIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_constraint_ConstraintIterator.zpp_pool;
				nape_constraint_ConstraintIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_constraint_ConstraintList
};
var nape_constraint_DistanceJoint = function(body1,body2,anchor1,anchor2,jointMin,jointMax) {
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_$nape_constraint_ZPP_$DistanceJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape_constraint_Constraint.zpp_internalAlloc = true;
	nape_constraint_Constraint.call(this);
	nape_constraint_Constraint.zpp_internalAlloc = false;
	this.zpp_inner.immutable_midstep("Constraint::" + "body1");
	var inbody1 = body1 == null ? null : body1.zpp_inner;
	if(inbody1 != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
				if(this.zpp_inner_zn.b1 != null) {
					this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b1.wake();
			}
		}
		this.zpp_inner_zn.b1 = inbody1;
		if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
			if(inbody1 != null) {
				inbody1.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody1 != null) {
				inbody1.wake();
			}
		}
	}
	var tmp = this.zpp_inner_zn.b1 == null;
	this.zpp_inner.immutable_midstep("Constraint::" + "body2");
	var inbody2 = body2 == null ? null : body2.zpp_inner;
	if(inbody2 != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
				if(this.zpp_inner_zn.b2 != null) {
					this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b2.wake();
			}
		}
		this.zpp_inner_zn.b2 = inbody2;
		if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
			if(inbody2 != null) {
				inbody2.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody2 != null) {
				inbody2.wake();
			}
		}
	}
	var tmp1 = this.zpp_inner_zn.b2 == null;
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor1 == null) {
		throw new js__$Boot_HaxeError("Error: Constraint::" + "anchor1" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	var _this = this.zpp_inner_zn.wrap_a1;
	if(_this != null && _this.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(anchor1 == null) {
		throw new js__$Boot_HaxeError("Error: Cannot assign null Vec2");
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = anchor1.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var x = anchor1.zpp_inner.x;
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = anchor1.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var y = anchor1.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = _this.zpp_inner;
	if(_this4._immutable) {
		throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
	}
	if(_this4._isimmutable != null) {
		_this4._isimmutable();
	}
	if(x != x || y != y) {
		throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp2;
	if(_this != null && _this.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = _this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = _this.zpp_inner;
		if(_this6._validate != null) {
			_this6._validate();
		}
		tmp2 = _this.zpp_inner.y == y;
	} else {
		tmp2 = false;
	}
	if(!tmp2) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this7 = _this.zpp_inner;
		if(_this7._invalidate != null) {
			_this7._invalidate(_this7);
		}
	}
	var ret = _this;
	if(anchor1.zpp_inner.weak) {
		if(anchor1 != null && anchor1.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = anchor1.zpp_inner;
		if(_this8._immutable) {
			throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(anchor1.zpp_inner._inuse) {
			throw new js__$Boot_HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = anchor1.zpp_inner;
		anchor1.zpp_inner.outer = null;
		anchor1.zpp_inner = null;
		var o = anchor1;
		o.zpp_pool = null;
		if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
		} else {
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
		}
		zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
		o.zpp_disp = true;
		var o1 = inner;
		if(o1.outer != null) {
			o1.outer.zpp_inner = null;
			o1.outer = null;
		}
		o1._isimmutable = null;
		o1._validate = null;
		o1._invalidate = null;
		o1.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o1;
	}
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor2 == null) {
		throw new js__$Boot_HaxeError("Error: Constraint::" + "anchor2" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	var _this9 = this.zpp_inner_zn.wrap_a2;
	if(_this9 != null && _this9.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this10 = _this9.zpp_inner;
	if(_this10._immutable) {
		throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
	}
	if(_this10._isimmutable != null) {
		_this10._isimmutable();
	}
	if(anchor2 == null) {
		throw new js__$Boot_HaxeError("Error: Cannot assign null Vec2");
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this11 = anchor2.zpp_inner;
	if(_this11._validate != null) {
		_this11._validate();
	}
	var x1 = anchor2.zpp_inner.x;
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this12 = anchor2.zpp_inner;
	if(_this12._validate != null) {
		_this12._validate();
	}
	var y1 = anchor2.zpp_inner.y;
	if(_this9 != null && _this9.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this13 = _this9.zpp_inner;
	if(_this13._immutable) {
		throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
	}
	if(_this13._isimmutable != null) {
		_this13._isimmutable();
	}
	if(x1 != x1 || y1 != y1) {
		throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp3;
	if(_this9 != null && _this9.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this14 = _this9.zpp_inner;
	if(_this14._validate != null) {
		_this14._validate();
	}
	if(_this9.zpp_inner.x == x1) {
		if(_this9 != null && _this9.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this15 = _this9.zpp_inner;
		if(_this15._validate != null) {
			_this15._validate();
		}
		tmp3 = _this9.zpp_inner.y == y1;
	} else {
		tmp3 = false;
	}
	if(!tmp3) {
		_this9.zpp_inner.x = x1;
		_this9.zpp_inner.y = y1;
		var _this16 = _this9.zpp_inner;
		if(_this16._invalidate != null) {
			_this16._invalidate(_this16);
		}
	}
	var ret1 = _this9;
	if(anchor2.zpp_inner.weak) {
		if(anchor2 != null && anchor2.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this17 = anchor2.zpp_inner;
		if(_this17._immutable) {
			throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
		}
		if(_this17._isimmutable != null) {
			_this17._isimmutable();
		}
		if(anchor2.zpp_inner._inuse) {
			throw new js__$Boot_HaxeError("Error: This Vec2 is not disposable");
		}
		var inner1 = anchor2.zpp_inner;
		anchor2.zpp_inner.outer = null;
		anchor2.zpp_inner = null;
		var o2 = anchor2;
		o2.zpp_pool = null;
		if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o2;
		} else {
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = o2;
		}
		zpp_$nape_util_ZPP_$PubPool.nextVec2 = o2;
		o2.zpp_disp = true;
		var o3 = inner1;
		if(o3.outer != null) {
			o3.outer.zpp_inner = null;
			o3.outer = null;
		}
		o3._isimmutable = null;
		o3._validate = null;
		o3._invalidate = null;
		o3.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o3;
	}
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	this.zpp_inner.immutable_midstep("DistanceJoint::jointMin");
	if(jointMin != jointMin) {
		throw new js__$Boot_HaxeError("Error: DistanceJoint::jointMin cannot be NaN");
	}
	if(jointMin < 0) {
		throw new js__$Boot_HaxeError("Error: DistanceJoint::jointMin must be >= 0");
	}
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	this.zpp_inner.immutable_midstep("DistanceJoint::jointMax");
	if(jointMax != jointMax) {
		throw new js__$Boot_HaxeError("Error: DistanceJoint::jointMax cannot be NaN");
	}
	if(jointMax < 0) {
		throw new js__$Boot_HaxeError("Error: DistanceJoint::jointMax must be >= 0");
	}
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
};
nape_constraint_DistanceJoint.__name__ = true;
nape_constraint_DistanceJoint.__super__ = nape_constraint_Constraint;
nape_constraint_DistanceJoint.prototype = $extend(nape_constraint_Constraint.prototype,{
	__class__: nape_constraint_DistanceJoint
});
var nape_constraint_LineJoint = function(body1,body2,anchor1,anchor2,direction,jointMin,jointMax) {
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_$nape_constraint_ZPP_$LineJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape_constraint_Constraint.zpp_internalAlloc = true;
	nape_constraint_Constraint.call(this);
	nape_constraint_Constraint.zpp_internalAlloc = false;
	this.zpp_inner.immutable_midstep("Constraint::" + "body1");
	var inbody1 = body1 == null ? null : body1.zpp_inner;
	if(inbody1 != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
				if(this.zpp_inner_zn.b1 != null) {
					this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b1.wake();
			}
		}
		this.zpp_inner_zn.b1 = inbody1;
		if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
			if(inbody1 != null) {
				inbody1.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody1 != null) {
				inbody1.wake();
			}
		}
	}
	var tmp = this.zpp_inner_zn.b1 == null;
	this.zpp_inner.immutable_midstep("Constraint::" + "body2");
	var inbody2 = body2 == null ? null : body2.zpp_inner;
	if(inbody2 != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
				if(this.zpp_inner_zn.b2 != null) {
					this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b2.wake();
			}
		}
		this.zpp_inner_zn.b2 = inbody2;
		if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
			if(inbody2 != null) {
				inbody2.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody2 != null) {
				inbody2.wake();
			}
		}
	}
	var tmp1 = this.zpp_inner_zn.b2 == null;
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor1 == null) {
		throw new js__$Boot_HaxeError("Error: Constraint::" + "anchor1" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	var _this = this.zpp_inner_zn.wrap_a1;
	if(_this != null && _this.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(anchor1 == null) {
		throw new js__$Boot_HaxeError("Error: Cannot assign null Vec2");
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = anchor1.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var x = anchor1.zpp_inner.x;
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = anchor1.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var y = anchor1.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = _this.zpp_inner;
	if(_this4._immutable) {
		throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
	}
	if(_this4._isimmutable != null) {
		_this4._isimmutable();
	}
	if(x != x || y != y) {
		throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp2;
	if(_this != null && _this.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = _this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = _this.zpp_inner;
		if(_this6._validate != null) {
			_this6._validate();
		}
		tmp2 = _this.zpp_inner.y == y;
	} else {
		tmp2 = false;
	}
	if(!tmp2) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this7 = _this.zpp_inner;
		if(_this7._invalidate != null) {
			_this7._invalidate(_this7);
		}
	}
	var ret = _this;
	if(anchor1.zpp_inner.weak) {
		if(anchor1 != null && anchor1.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = anchor1.zpp_inner;
		if(_this8._immutable) {
			throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(anchor1.zpp_inner._inuse) {
			throw new js__$Boot_HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = anchor1.zpp_inner;
		anchor1.zpp_inner.outer = null;
		anchor1.zpp_inner = null;
		var o = anchor1;
		o.zpp_pool = null;
		if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
		} else {
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
		}
		zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
		o.zpp_disp = true;
		var o1 = inner;
		if(o1.outer != null) {
			o1.outer.zpp_inner = null;
			o1.outer = null;
		}
		o1._isimmutable = null;
		o1._validate = null;
		o1._invalidate = null;
		o1.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o1;
	}
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor2 == null) {
		throw new js__$Boot_HaxeError("Error: Constraint::" + "anchor2" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	var _this9 = this.zpp_inner_zn.wrap_a2;
	if(_this9 != null && _this9.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this10 = _this9.zpp_inner;
	if(_this10._immutable) {
		throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
	}
	if(_this10._isimmutable != null) {
		_this10._isimmutable();
	}
	if(anchor2 == null) {
		throw new js__$Boot_HaxeError("Error: Cannot assign null Vec2");
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this11 = anchor2.zpp_inner;
	if(_this11._validate != null) {
		_this11._validate();
	}
	var x1 = anchor2.zpp_inner.x;
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this12 = anchor2.zpp_inner;
	if(_this12._validate != null) {
		_this12._validate();
	}
	var y1 = anchor2.zpp_inner.y;
	if(_this9 != null && _this9.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this13 = _this9.zpp_inner;
	if(_this13._immutable) {
		throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
	}
	if(_this13._isimmutable != null) {
		_this13._isimmutable();
	}
	if(x1 != x1 || y1 != y1) {
		throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp3;
	if(_this9 != null && _this9.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this14 = _this9.zpp_inner;
	if(_this14._validate != null) {
		_this14._validate();
	}
	if(_this9.zpp_inner.x == x1) {
		if(_this9 != null && _this9.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this15 = _this9.zpp_inner;
		if(_this15._validate != null) {
			_this15._validate();
		}
		tmp3 = _this9.zpp_inner.y == y1;
	} else {
		tmp3 = false;
	}
	if(!tmp3) {
		_this9.zpp_inner.x = x1;
		_this9.zpp_inner.y = y1;
		var _this16 = _this9.zpp_inner;
		if(_this16._invalidate != null) {
			_this16._invalidate(_this16);
		}
	}
	var ret1 = _this9;
	if(anchor2.zpp_inner.weak) {
		if(anchor2 != null && anchor2.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this17 = anchor2.zpp_inner;
		if(_this17._immutable) {
			throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
		}
		if(_this17._isimmutable != null) {
			_this17._isimmutable();
		}
		if(anchor2.zpp_inner._inuse) {
			throw new js__$Boot_HaxeError("Error: This Vec2 is not disposable");
		}
		var inner1 = anchor2.zpp_inner;
		anchor2.zpp_inner.outer = null;
		anchor2.zpp_inner = null;
		var o2 = anchor2;
		o2.zpp_pool = null;
		if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o2;
		} else {
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = o2;
		}
		zpp_$nape_util_ZPP_$PubPool.nextVec2 = o2;
		o2.zpp_disp = true;
		var o3 = inner1;
		if(o3.outer != null) {
			o3.outer.zpp_inner = null;
			o3.outer = null;
		}
		o3._isimmutable = null;
		o3._validate = null;
		o3._invalidate = null;
		o3.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o3;
	}
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	if(direction != null && direction.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(direction == null) {
		throw new js__$Boot_HaxeError("Error: Constraint::" + "direction" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_n == null) {
		this.zpp_inner_zn.setup_n();
	}
	var _this18 = this.zpp_inner_zn.wrap_n;
	if(_this18 != null && _this18.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(direction != null && direction.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this19 = _this18.zpp_inner;
	if(_this19._immutable) {
		throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
	}
	if(_this19._isimmutable != null) {
		_this19._isimmutable();
	}
	if(direction == null) {
		throw new js__$Boot_HaxeError("Error: Cannot assign null Vec2");
	}
	if(direction != null && direction.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this20 = direction.zpp_inner;
	if(_this20._validate != null) {
		_this20._validate();
	}
	var x2 = direction.zpp_inner.x;
	if(direction != null && direction.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this21 = direction.zpp_inner;
	if(_this21._validate != null) {
		_this21._validate();
	}
	var y2 = direction.zpp_inner.y;
	if(_this18 != null && _this18.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this22 = _this18.zpp_inner;
	if(_this22._immutable) {
		throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
	}
	if(_this22._isimmutable != null) {
		_this22._isimmutable();
	}
	if(x2 != x2 || y2 != y2) {
		throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp4;
	if(_this18 != null && _this18.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this23 = _this18.zpp_inner;
	if(_this23._validate != null) {
		_this23._validate();
	}
	if(_this18.zpp_inner.x == x2) {
		if(_this18 != null && _this18.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this24 = _this18.zpp_inner;
		if(_this24._validate != null) {
			_this24._validate();
		}
		tmp4 = _this18.zpp_inner.y == y2;
	} else {
		tmp4 = false;
	}
	if(!tmp4) {
		_this18.zpp_inner.x = x2;
		_this18.zpp_inner.y = y2;
		var _this25 = _this18.zpp_inner;
		if(_this25._invalidate != null) {
			_this25._invalidate(_this25);
		}
	}
	var ret2 = _this18;
	if(direction.zpp_inner.weak) {
		if(direction != null && direction.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this26 = direction.zpp_inner;
		if(_this26._immutable) {
			throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
		}
		if(_this26._isimmutable != null) {
			_this26._isimmutable();
		}
		if(direction.zpp_inner._inuse) {
			throw new js__$Boot_HaxeError("Error: This Vec2 is not disposable");
		}
		var inner2 = direction.zpp_inner;
		direction.zpp_inner.outer = null;
		direction.zpp_inner = null;
		var o4 = direction;
		o4.zpp_pool = null;
		if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o4;
		} else {
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = o4;
		}
		zpp_$nape_util_ZPP_$PubPool.nextVec2 = o4;
		o4.zpp_disp = true;
		var o5 = inner2;
		if(o5.outer != null) {
			o5.outer.zpp_inner = null;
			o5.outer = null;
		}
		o5._isimmutable = null;
		o5._validate = null;
		o5._invalidate = null;
		o5.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o5;
	}
	if(this.zpp_inner_zn.wrap_n == null) {
		this.zpp_inner_zn.setup_n();
	}
	this.zpp_inner.immutable_midstep("LineJoint::jointMin");
	if(jointMin != jointMin) {
		throw new js__$Boot_HaxeError("Error: AngleJoint::jointMin cannot be NaN");
	}
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	this.zpp_inner.immutable_midstep("LineJoint::jointMax");
	if(jointMax != jointMax) {
		throw new js__$Boot_HaxeError("Error: AngleJoint::jointMax cannot be NaN");
	}
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
};
nape_constraint_LineJoint.__name__ = true;
nape_constraint_LineJoint.__super__ = nape_constraint_Constraint;
nape_constraint_LineJoint.prototype = $extend(nape_constraint_Constraint.prototype,{
	__class__: nape_constraint_LineJoint
});
var nape_constraint_MotorJoint = function(body1,body2,rate,ratio) {
	if(ratio == null) {
		ratio = 1.0;
	}
	if(rate == null) {
		rate = 0.0;
	}
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_$nape_constraint_ZPP_$MotorJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape_constraint_Constraint.zpp_internalAlloc = true;
	nape_constraint_Constraint.call(this);
	nape_constraint_Constraint.zpp_internalAlloc = false;
	this.zpp_inner.immutable_midstep("Constraint::" + "body1");
	var inbody1 = body1 == null ? null : body1.zpp_inner;
	if(inbody1 != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
				if(this.zpp_inner_zn.b1 != null) {
					this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b1.wake();
			}
		}
		this.zpp_inner_zn.b1 = inbody1;
		if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
			if(inbody1 != null) {
				inbody1.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody1 != null) {
				inbody1.wake();
			}
		}
	}
	var tmp = this.zpp_inner_zn.b1 == null;
	this.zpp_inner.immutable_midstep("Constraint::" + "body2");
	var inbody2 = body2 == null ? null : body2.zpp_inner;
	if(inbody2 != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
				if(this.zpp_inner_zn.b2 != null) {
					this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b2.wake();
			}
		}
		this.zpp_inner_zn.b2 = inbody2;
		if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
			if(inbody2 != null) {
				inbody2.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody2 != null) {
				inbody2.wake();
			}
		}
	}
	var tmp1 = this.zpp_inner_zn.b2 == null;
	this.zpp_inner.immutable_midstep("MotorJoint::rate");
	if(rate != rate) {
		throw new js__$Boot_HaxeError("Error: MotorJoint::rate cannot be NaN");
	}
	if(this.zpp_inner_zn.rate != rate) {
		this.zpp_inner_zn.rate = rate;
		this.zpp_inner.wake();
	}
	this.zpp_inner.immutable_midstep("MotorJoint::ratio");
	if(ratio != ratio) {
		throw new js__$Boot_HaxeError("Error: MotorJoint::ratio cannot be NaN");
	}
	if(this.zpp_inner_zn.ratio != ratio) {
		this.zpp_inner_zn.ratio = ratio;
		this.zpp_inner.wake();
	}
};
nape_constraint_MotorJoint.__name__ = true;
nape_constraint_MotorJoint.__super__ = nape_constraint_Constraint;
nape_constraint_MotorJoint.prototype = $extend(nape_constraint_Constraint.prototype,{
	__class__: nape_constraint_MotorJoint
});
var nape_constraint_PivotJoint = function(body1,body2,anchor1,anchor2) {
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_$nape_constraint_ZPP_$PivotJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape_constraint_Constraint.zpp_internalAlloc = true;
	nape_constraint_Constraint.call(this);
	nape_constraint_Constraint.zpp_internalAlloc = false;
	this.zpp_inner.immutable_midstep("Constraint::" + "body1");
	var inbody1 = body1 == null ? null : body1.zpp_inner;
	if(inbody1 != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
				if(this.zpp_inner_zn.b1 != null) {
					this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b1.wake();
			}
		}
		this.zpp_inner_zn.b1 = inbody1;
		if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
			if(inbody1 != null) {
				inbody1.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody1 != null) {
				inbody1.wake();
			}
		}
	}
	var tmp = this.zpp_inner_zn.b1 == null;
	this.zpp_inner.immutable_midstep("Constraint::" + "body2");
	var inbody2 = body2 == null ? null : body2.zpp_inner;
	if(inbody2 != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
				if(this.zpp_inner_zn.b2 != null) {
					this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b2.wake();
			}
		}
		this.zpp_inner_zn.b2 = inbody2;
		if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
			if(inbody2 != null) {
				inbody2.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody2 != null) {
				inbody2.wake();
			}
		}
	}
	var tmp1 = this.zpp_inner_zn.b2 == null;
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor1 == null) {
		throw new js__$Boot_HaxeError("Error: Constraint::" + "anchor1" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	var _this = this.zpp_inner_zn.wrap_a1;
	if(_this != null && _this.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(anchor1 == null) {
		throw new js__$Boot_HaxeError("Error: Cannot assign null Vec2");
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = anchor1.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var x = anchor1.zpp_inner.x;
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = anchor1.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var y = anchor1.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = _this.zpp_inner;
	if(_this4._immutable) {
		throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
	}
	if(_this4._isimmutable != null) {
		_this4._isimmutable();
	}
	if(x != x || y != y) {
		throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp2;
	if(_this != null && _this.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = _this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = _this.zpp_inner;
		if(_this6._validate != null) {
			_this6._validate();
		}
		tmp2 = _this.zpp_inner.y == y;
	} else {
		tmp2 = false;
	}
	if(!tmp2) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this7 = _this.zpp_inner;
		if(_this7._invalidate != null) {
			_this7._invalidate(_this7);
		}
	}
	var ret = _this;
	if(anchor1.zpp_inner.weak) {
		if(anchor1 != null && anchor1.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = anchor1.zpp_inner;
		if(_this8._immutable) {
			throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(anchor1.zpp_inner._inuse) {
			throw new js__$Boot_HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = anchor1.zpp_inner;
		anchor1.zpp_inner.outer = null;
		anchor1.zpp_inner = null;
		var o = anchor1;
		o.zpp_pool = null;
		if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
		} else {
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
		}
		zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
		o.zpp_disp = true;
		var o1 = inner;
		if(o1.outer != null) {
			o1.outer.zpp_inner = null;
			o1.outer = null;
		}
		o1._isimmutable = null;
		o1._validate = null;
		o1._invalidate = null;
		o1.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o1;
	}
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor2 == null) {
		throw new js__$Boot_HaxeError("Error: Constraint::" + "anchor2" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	var _this9 = this.zpp_inner_zn.wrap_a2;
	if(_this9 != null && _this9.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this10 = _this9.zpp_inner;
	if(_this10._immutable) {
		throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
	}
	if(_this10._isimmutable != null) {
		_this10._isimmutable();
	}
	if(anchor2 == null) {
		throw new js__$Boot_HaxeError("Error: Cannot assign null Vec2");
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this11 = anchor2.zpp_inner;
	if(_this11._validate != null) {
		_this11._validate();
	}
	var x1 = anchor2.zpp_inner.x;
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this12 = anchor2.zpp_inner;
	if(_this12._validate != null) {
		_this12._validate();
	}
	var y1 = anchor2.zpp_inner.y;
	if(_this9 != null && _this9.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this13 = _this9.zpp_inner;
	if(_this13._immutable) {
		throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
	}
	if(_this13._isimmutable != null) {
		_this13._isimmutable();
	}
	if(x1 != x1 || y1 != y1) {
		throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp3;
	if(_this9 != null && _this9.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this14 = _this9.zpp_inner;
	if(_this14._validate != null) {
		_this14._validate();
	}
	if(_this9.zpp_inner.x == x1) {
		if(_this9 != null && _this9.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this15 = _this9.zpp_inner;
		if(_this15._validate != null) {
			_this15._validate();
		}
		tmp3 = _this9.zpp_inner.y == y1;
	} else {
		tmp3 = false;
	}
	if(!tmp3) {
		_this9.zpp_inner.x = x1;
		_this9.zpp_inner.y = y1;
		var _this16 = _this9.zpp_inner;
		if(_this16._invalidate != null) {
			_this16._invalidate(_this16);
		}
	}
	var ret1 = _this9;
	if(anchor2.zpp_inner.weak) {
		if(anchor2 != null && anchor2.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this17 = anchor2.zpp_inner;
		if(_this17._immutable) {
			throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
		}
		if(_this17._isimmutable != null) {
			_this17._isimmutable();
		}
		if(anchor2.zpp_inner._inuse) {
			throw new js__$Boot_HaxeError("Error: This Vec2 is not disposable");
		}
		var inner1 = anchor2.zpp_inner;
		anchor2.zpp_inner.outer = null;
		anchor2.zpp_inner = null;
		var o2 = anchor2;
		o2.zpp_pool = null;
		if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o2;
		} else {
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = o2;
		}
		zpp_$nape_util_ZPP_$PubPool.nextVec2 = o2;
		o2.zpp_disp = true;
		var o3 = inner1;
		if(o3.outer != null) {
			o3.outer.zpp_inner = null;
			o3.outer = null;
		}
		o3._isimmutable = null;
		o3._validate = null;
		o3._invalidate = null;
		o3.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o3;
	}
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
};
nape_constraint_PivotJoint.__name__ = true;
nape_constraint_PivotJoint.__super__ = nape_constraint_Constraint;
nape_constraint_PivotJoint.prototype = $extend(nape_constraint_Constraint.prototype,{
	__class__: nape_constraint_PivotJoint
});
var nape_constraint_PulleyJoint = function(body1,body2,body3,body4,anchor1,anchor2,anchor3,anchor4,jointMin,jointMax,ratio) {
	if(ratio == null) {
		ratio = 1.0;
	}
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_$nape_constraint_ZPP_$PulleyJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape_constraint_Constraint.zpp_internalAlloc = true;
	nape_constraint_Constraint.call(this);
	nape_constraint_Constraint.zpp_internalAlloc = false;
	this.zpp_inner.immutable_midstep("Constraint::" + "body1");
	var inbody1 = body1 == null ? null : body1.zpp_inner;
	if(inbody1 != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1 && this.zpp_inner_zn.b3 != this.zpp_inner_zn.b1 && this.zpp_inner_zn.b4 != this.zpp_inner_zn.b1) {
				if(this.zpp_inner_zn.b1 != null) {
					this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b1.wake();
			}
		}
		this.zpp_inner_zn.b1 = inbody1;
		if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1 && this.zpp_inner_zn.b3 != inbody1 && this.zpp_inner_zn.b4 != inbody1) {
			if(inbody1 != null) {
				inbody1.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody1 != null) {
				inbody1.wake();
			}
		}
	}
	var tmp = this.zpp_inner_zn.b1 == null;
	this.zpp_inner.immutable_midstep("Constraint::" + "body2");
	var inbody2 = body2 == null ? null : body2.zpp_inner;
	if(inbody2 != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2 && this.zpp_inner_zn.b3 != this.zpp_inner_zn.b2 && this.zpp_inner_zn.b4 != this.zpp_inner_zn.b2) {
				if(this.zpp_inner_zn.b2 != null) {
					this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b2.wake();
			}
		}
		this.zpp_inner_zn.b2 = inbody2;
		if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2 && this.zpp_inner_zn.b3 != inbody2 && this.zpp_inner_zn.b4 != inbody2) {
			if(inbody2 != null) {
				inbody2.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody2 != null) {
				inbody2.wake();
			}
		}
	}
	var tmp1 = this.zpp_inner_zn.b2 == null;
	this.zpp_inner.immutable_midstep("Constraint::" + "body3");
	var inbody3 = body3 == null ? null : body3.zpp_inner;
	if(inbody3 != this.zpp_inner_zn.b3) {
		if(this.zpp_inner_zn.b3 != null) {
			if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b3 && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b3 && this.zpp_inner_zn.b4 != this.zpp_inner_zn.b3) {
				if(this.zpp_inner_zn.b3 != null) {
					this.zpp_inner_zn.b3.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b3.wake();
			}
		}
		this.zpp_inner_zn.b3 = inbody3;
		if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && inbody3 != null && this.zpp_inner_zn.b1 != inbody3 && this.zpp_inner_zn.b2 != inbody3 && this.zpp_inner_zn.b4 != inbody3) {
			if(inbody3 != null) {
				inbody3.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody3 != null) {
				inbody3.wake();
			}
		}
	}
	var tmp2 = this.zpp_inner_zn.b3 == null;
	this.zpp_inner.immutable_midstep("Constraint::" + "body4");
	var inbody4 = body4 == null ? null : body4.zpp_inner;
	if(inbody4 != this.zpp_inner_zn.b4) {
		if(this.zpp_inner_zn.b4 != null) {
			if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b4 && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b4 && this.zpp_inner_zn.b3 != this.zpp_inner_zn.b4) {
				if(this.zpp_inner_zn.b4 != null) {
					this.zpp_inner_zn.b4.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b4.wake();
			}
		}
		this.zpp_inner_zn.b4 = inbody4;
		if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && inbody4 != null && this.zpp_inner_zn.b1 != inbody4 && this.zpp_inner_zn.b2 != inbody4 && this.zpp_inner_zn.b3 != inbody4) {
			if(inbody4 != null) {
				inbody4.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody4 != null) {
				inbody4.wake();
			}
		}
	}
	var tmp3 = this.zpp_inner_zn.b4 == null;
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor1 == null) {
		throw new js__$Boot_HaxeError("Error: Constraint::" + "anchor1" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	var _this = this.zpp_inner_zn.wrap_a1;
	if(_this != null && _this.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(anchor1 == null) {
		throw new js__$Boot_HaxeError("Error: Cannot assign null Vec2");
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = anchor1.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var x = anchor1.zpp_inner.x;
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = anchor1.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var y = anchor1.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = _this.zpp_inner;
	if(_this4._immutable) {
		throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
	}
	if(_this4._isimmutable != null) {
		_this4._isimmutable();
	}
	if(x != x || y != y) {
		throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp4;
	if(_this != null && _this.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = _this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = _this.zpp_inner;
		if(_this6._validate != null) {
			_this6._validate();
		}
		tmp4 = _this.zpp_inner.y == y;
	} else {
		tmp4 = false;
	}
	if(!tmp4) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this7 = _this.zpp_inner;
		if(_this7._invalidate != null) {
			_this7._invalidate(_this7);
		}
	}
	var ret = _this;
	if(anchor1.zpp_inner.weak) {
		if(anchor1 != null && anchor1.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = anchor1.zpp_inner;
		if(_this8._immutable) {
			throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(anchor1.zpp_inner._inuse) {
			throw new js__$Boot_HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = anchor1.zpp_inner;
		anchor1.zpp_inner.outer = null;
		anchor1.zpp_inner = null;
		var o = anchor1;
		o.zpp_pool = null;
		if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
		} else {
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
		}
		zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
		o.zpp_disp = true;
		var o1 = inner;
		if(o1.outer != null) {
			o1.outer.zpp_inner = null;
			o1.outer = null;
		}
		o1._isimmutable = null;
		o1._validate = null;
		o1._invalidate = null;
		o1.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o1;
	}
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor2 == null) {
		throw new js__$Boot_HaxeError("Error: Constraint::" + "anchor2" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	var _this9 = this.zpp_inner_zn.wrap_a2;
	if(_this9 != null && _this9.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this10 = _this9.zpp_inner;
	if(_this10._immutable) {
		throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
	}
	if(_this10._isimmutable != null) {
		_this10._isimmutable();
	}
	if(anchor2 == null) {
		throw new js__$Boot_HaxeError("Error: Cannot assign null Vec2");
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this11 = anchor2.zpp_inner;
	if(_this11._validate != null) {
		_this11._validate();
	}
	var x1 = anchor2.zpp_inner.x;
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this12 = anchor2.zpp_inner;
	if(_this12._validate != null) {
		_this12._validate();
	}
	var y1 = anchor2.zpp_inner.y;
	if(_this9 != null && _this9.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this13 = _this9.zpp_inner;
	if(_this13._immutable) {
		throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
	}
	if(_this13._isimmutable != null) {
		_this13._isimmutable();
	}
	if(x1 != x1 || y1 != y1) {
		throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp5;
	if(_this9 != null && _this9.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this14 = _this9.zpp_inner;
	if(_this14._validate != null) {
		_this14._validate();
	}
	if(_this9.zpp_inner.x == x1) {
		if(_this9 != null && _this9.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this15 = _this9.zpp_inner;
		if(_this15._validate != null) {
			_this15._validate();
		}
		tmp5 = _this9.zpp_inner.y == y1;
	} else {
		tmp5 = false;
	}
	if(!tmp5) {
		_this9.zpp_inner.x = x1;
		_this9.zpp_inner.y = y1;
		var _this16 = _this9.zpp_inner;
		if(_this16._invalidate != null) {
			_this16._invalidate(_this16);
		}
	}
	var ret1 = _this9;
	if(anchor2.zpp_inner.weak) {
		if(anchor2 != null && anchor2.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this17 = anchor2.zpp_inner;
		if(_this17._immutable) {
			throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
		}
		if(_this17._isimmutable != null) {
			_this17._isimmutable();
		}
		if(anchor2.zpp_inner._inuse) {
			throw new js__$Boot_HaxeError("Error: This Vec2 is not disposable");
		}
		var inner1 = anchor2.zpp_inner;
		anchor2.zpp_inner.outer = null;
		anchor2.zpp_inner = null;
		var o2 = anchor2;
		o2.zpp_pool = null;
		if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o2;
		} else {
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = o2;
		}
		zpp_$nape_util_ZPP_$PubPool.nextVec2 = o2;
		o2.zpp_disp = true;
		var o3 = inner1;
		if(o3.outer != null) {
			o3.outer.zpp_inner = null;
			o3.outer = null;
		}
		o3._isimmutable = null;
		o3._validate = null;
		o3._invalidate = null;
		o3.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o3;
	}
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	if(anchor3 != null && anchor3.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor3 == null) {
		throw new js__$Boot_HaxeError("Error: Constraint::" + "anchor3" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a3 == null) {
		this.zpp_inner_zn.setup_a3();
	}
	var _this18 = this.zpp_inner_zn.wrap_a3;
	if(_this18 != null && _this18.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor3 != null && anchor3.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this19 = _this18.zpp_inner;
	if(_this19._immutable) {
		throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
	}
	if(_this19._isimmutable != null) {
		_this19._isimmutable();
	}
	if(anchor3 == null) {
		throw new js__$Boot_HaxeError("Error: Cannot assign null Vec2");
	}
	if(anchor3 != null && anchor3.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this20 = anchor3.zpp_inner;
	if(_this20._validate != null) {
		_this20._validate();
	}
	var x2 = anchor3.zpp_inner.x;
	if(anchor3 != null && anchor3.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this21 = anchor3.zpp_inner;
	if(_this21._validate != null) {
		_this21._validate();
	}
	var y2 = anchor3.zpp_inner.y;
	if(_this18 != null && _this18.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this22 = _this18.zpp_inner;
	if(_this22._immutable) {
		throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
	}
	if(_this22._isimmutable != null) {
		_this22._isimmutable();
	}
	if(x2 != x2 || y2 != y2) {
		throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp6;
	if(_this18 != null && _this18.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this23 = _this18.zpp_inner;
	if(_this23._validate != null) {
		_this23._validate();
	}
	if(_this18.zpp_inner.x == x2) {
		if(_this18 != null && _this18.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this24 = _this18.zpp_inner;
		if(_this24._validate != null) {
			_this24._validate();
		}
		tmp6 = _this18.zpp_inner.y == y2;
	} else {
		tmp6 = false;
	}
	if(!tmp6) {
		_this18.zpp_inner.x = x2;
		_this18.zpp_inner.y = y2;
		var _this25 = _this18.zpp_inner;
		if(_this25._invalidate != null) {
			_this25._invalidate(_this25);
		}
	}
	var ret2 = _this18;
	if(anchor3.zpp_inner.weak) {
		if(anchor3 != null && anchor3.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this26 = anchor3.zpp_inner;
		if(_this26._immutable) {
			throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
		}
		if(_this26._isimmutable != null) {
			_this26._isimmutable();
		}
		if(anchor3.zpp_inner._inuse) {
			throw new js__$Boot_HaxeError("Error: This Vec2 is not disposable");
		}
		var inner2 = anchor3.zpp_inner;
		anchor3.zpp_inner.outer = null;
		anchor3.zpp_inner = null;
		var o4 = anchor3;
		o4.zpp_pool = null;
		if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o4;
		} else {
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = o4;
		}
		zpp_$nape_util_ZPP_$PubPool.nextVec2 = o4;
		o4.zpp_disp = true;
		var o5 = inner2;
		if(o5.outer != null) {
			o5.outer.zpp_inner = null;
			o5.outer = null;
		}
		o5._isimmutable = null;
		o5._validate = null;
		o5._invalidate = null;
		o5.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o5;
	}
	if(this.zpp_inner_zn.wrap_a3 == null) {
		this.zpp_inner_zn.setup_a3();
	}
	if(anchor4 != null && anchor4.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor4 == null) {
		throw new js__$Boot_HaxeError("Error: Constraint::" + "anchor4" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a4 == null) {
		this.zpp_inner_zn.setup_a4();
	}
	var _this27 = this.zpp_inner_zn.wrap_a4;
	if(_this27 != null && _this27.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor4 != null && anchor4.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this28 = _this27.zpp_inner;
	if(_this28._immutable) {
		throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
	}
	if(_this28._isimmutable != null) {
		_this28._isimmutable();
	}
	if(anchor4 == null) {
		throw new js__$Boot_HaxeError("Error: Cannot assign null Vec2");
	}
	if(anchor4 != null && anchor4.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this29 = anchor4.zpp_inner;
	if(_this29._validate != null) {
		_this29._validate();
	}
	var x3 = anchor4.zpp_inner.x;
	if(anchor4 != null && anchor4.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this30 = anchor4.zpp_inner;
	if(_this30._validate != null) {
		_this30._validate();
	}
	var y3 = anchor4.zpp_inner.y;
	if(_this27 != null && _this27.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this31 = _this27.zpp_inner;
	if(_this31._immutable) {
		throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
	}
	if(_this31._isimmutable != null) {
		_this31._isimmutable();
	}
	if(x3 != x3 || y3 != y3) {
		throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp7;
	if(_this27 != null && _this27.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this32 = _this27.zpp_inner;
	if(_this32._validate != null) {
		_this32._validate();
	}
	if(_this27.zpp_inner.x == x3) {
		if(_this27 != null && _this27.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this33 = _this27.zpp_inner;
		if(_this33._validate != null) {
			_this33._validate();
		}
		tmp7 = _this27.zpp_inner.y == y3;
	} else {
		tmp7 = false;
	}
	if(!tmp7) {
		_this27.zpp_inner.x = x3;
		_this27.zpp_inner.y = y3;
		var _this34 = _this27.zpp_inner;
		if(_this34._invalidate != null) {
			_this34._invalidate(_this34);
		}
	}
	var ret3 = _this27;
	if(anchor4.zpp_inner.weak) {
		if(anchor4 != null && anchor4.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this35 = anchor4.zpp_inner;
		if(_this35._immutable) {
			throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
		}
		if(_this35._isimmutable != null) {
			_this35._isimmutable();
		}
		if(anchor4.zpp_inner._inuse) {
			throw new js__$Boot_HaxeError("Error: This Vec2 is not disposable");
		}
		var inner3 = anchor4.zpp_inner;
		anchor4.zpp_inner.outer = null;
		anchor4.zpp_inner = null;
		var o6 = anchor4;
		o6.zpp_pool = null;
		if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o6;
		} else {
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = o6;
		}
		zpp_$nape_util_ZPP_$PubPool.nextVec2 = o6;
		o6.zpp_disp = true;
		var o7 = inner3;
		if(o7.outer != null) {
			o7.outer.zpp_inner = null;
			o7.outer = null;
		}
		o7._isimmutable = null;
		o7._validate = null;
		o7._invalidate = null;
		o7.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o7;
	}
	if(this.zpp_inner_zn.wrap_a4 == null) {
		this.zpp_inner_zn.setup_a4();
	}
	this.zpp_inner.immutable_midstep("PulleyJoint::ratio");
	if(ratio != ratio) {
		throw new js__$Boot_HaxeError("Error: PulleyJoint::ratio cannot be NaN");
	}
	if(this.zpp_inner_zn.ratio != ratio) {
		this.zpp_inner_zn.ratio = ratio;
		this.zpp_inner.wake();
	}
	this.zpp_inner.immutable_midstep("PulleyJoint::jointMin");
	if(jointMin != jointMin) {
		throw new js__$Boot_HaxeError("Error: PulleyJoint::jointMin cannot be NaN");
	}
	if(jointMin < 0) {
		throw new js__$Boot_HaxeError("Error: PulleyJoint::jointMin must be >= 0");
	}
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	this.zpp_inner.immutable_midstep("PulleyJoint::jointMax");
	if(jointMax != jointMax) {
		throw new js__$Boot_HaxeError("Error: PulleyJoint::jointMax cannot be NaN");
	}
	if(jointMax < 0) {
		throw new js__$Boot_HaxeError("Error: PulleyJoint::jointMax must be >= 0");
	}
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
};
nape_constraint_PulleyJoint.__name__ = true;
nape_constraint_PulleyJoint.__super__ = nape_constraint_Constraint;
nape_constraint_PulleyJoint.prototype = $extend(nape_constraint_Constraint.prototype,{
	__class__: nape_constraint_PulleyJoint
});
var nape_constraint_UserConstraint = function(dimensions,velocityOnly) {
	if(velocityOnly == null) {
		velocityOnly = false;
	}
	this.zpp_inner_zn = null;
	if(dimensions < 1) {
		throw new js__$Boot_HaxeError("Error: Constraint dimension must be at least 1");
	}
	this.zpp_inner_zn = new zpp_$nape_constraint_ZPP_$UserConstraint(dimensions,velocityOnly);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape_constraint_Constraint.zpp_internalAlloc = true;
	nape_constraint_Constraint.call(this);
	nape_constraint_Constraint.zpp_internalAlloc = false;
};
nape_constraint_UserConstraint.__name__ = true;
nape_constraint_UserConstraint.__super__ = nape_constraint_Constraint;
nape_constraint_UserConstraint.prototype = $extend(nape_constraint_Constraint.prototype,{
	__broken: function() {
	}
	,__validate: function() {
	}
	,__prepare: function() {
	}
	,__position: function(err) {
		throw new js__$Boot_HaxeError("Error: UserConstraint::__position must be overriden");
	}
	,__velocity: function(err) {
		throw new js__$Boot_HaxeError("Error: Userconstraint::__velocity must be overriden");
	}
	,__eff_mass: function(eff) {
		throw new js__$Boot_HaxeError("Error: UserConstraint::__eff_mass must be overriden");
	}
	,__clamp: function(jAcc) {
	}
	,__impulse: function(imp,body,out) {
		throw new js__$Boot_HaxeError("Error: UserConstraint::__impulse must be overriden");
	}
	,__class__: nape_constraint_UserConstraint
});
var nape_constraint_WeldJoint = function(body1,body2,anchor1,anchor2,phase) {
	if(phase == null) {
		phase = 0.0;
	}
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_$nape_constraint_ZPP_$WeldJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape_constraint_Constraint.zpp_internalAlloc = true;
	nape_constraint_Constraint.call(this);
	nape_constraint_Constraint.zpp_internalAlloc = false;
	this.zpp_inner.immutable_midstep("Constraint::" + "body1");
	var inbody1 = body1 == null ? null : body1.zpp_inner;
	if(inbody1 != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
				if(this.zpp_inner_zn.b1 != null) {
					this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b1.wake();
			}
		}
		this.zpp_inner_zn.b1 = inbody1;
		if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
			if(inbody1 != null) {
				inbody1.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody1 != null) {
				inbody1.wake();
			}
		}
	}
	var tmp = this.zpp_inner_zn.b1 == null;
	this.zpp_inner.immutable_midstep("Constraint::" + "body2");
	var inbody2 = body2 == null ? null : body2.zpp_inner;
	if(inbody2 != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
				if(this.zpp_inner_zn.b2 != null) {
					this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b2.wake();
			}
		}
		this.zpp_inner_zn.b2 = inbody2;
		if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
			if(inbody2 != null) {
				inbody2.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody2 != null) {
				inbody2.wake();
			}
		}
	}
	var tmp1 = this.zpp_inner_zn.b2 == null;
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor1 == null) {
		throw new js__$Boot_HaxeError("Error: Constraint::" + "anchor1" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	var _this = this.zpp_inner_zn.wrap_a1;
	if(_this != null && _this.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(anchor1 == null) {
		throw new js__$Boot_HaxeError("Error: Cannot assign null Vec2");
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = anchor1.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var x = anchor1.zpp_inner.x;
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = anchor1.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var y = anchor1.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = _this.zpp_inner;
	if(_this4._immutable) {
		throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
	}
	if(_this4._isimmutable != null) {
		_this4._isimmutable();
	}
	if(x != x || y != y) {
		throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp2;
	if(_this != null && _this.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = _this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = _this.zpp_inner;
		if(_this6._validate != null) {
			_this6._validate();
		}
		tmp2 = _this.zpp_inner.y == y;
	} else {
		tmp2 = false;
	}
	if(!tmp2) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this7 = _this.zpp_inner;
		if(_this7._invalidate != null) {
			_this7._invalidate(_this7);
		}
	}
	var ret = _this;
	if(anchor1.zpp_inner.weak) {
		if(anchor1 != null && anchor1.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = anchor1.zpp_inner;
		if(_this8._immutable) {
			throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(anchor1.zpp_inner._inuse) {
			throw new js__$Boot_HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = anchor1.zpp_inner;
		anchor1.zpp_inner.outer = null;
		anchor1.zpp_inner = null;
		var o = anchor1;
		o.zpp_pool = null;
		if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
		} else {
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
		}
		zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
		o.zpp_disp = true;
		var o1 = inner;
		if(o1.outer != null) {
			o1.outer.zpp_inner = null;
			o1.outer = null;
		}
		o1._isimmutable = null;
		o1._validate = null;
		o1._invalidate = null;
		o1.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o1;
	}
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor2 == null) {
		throw new js__$Boot_HaxeError("Error: Constraint::" + "anchor2" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	var _this9 = this.zpp_inner_zn.wrap_a2;
	if(_this9 != null && _this9.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this10 = _this9.zpp_inner;
	if(_this10._immutable) {
		throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
	}
	if(_this10._isimmutable != null) {
		_this10._isimmutable();
	}
	if(anchor2 == null) {
		throw new js__$Boot_HaxeError("Error: Cannot assign null Vec2");
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this11 = anchor2.zpp_inner;
	if(_this11._validate != null) {
		_this11._validate();
	}
	var x1 = anchor2.zpp_inner.x;
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this12 = anchor2.zpp_inner;
	if(_this12._validate != null) {
		_this12._validate();
	}
	var y1 = anchor2.zpp_inner.y;
	if(_this9 != null && _this9.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this13 = _this9.zpp_inner;
	if(_this13._immutable) {
		throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
	}
	if(_this13._isimmutable != null) {
		_this13._isimmutable();
	}
	if(x1 != x1 || y1 != y1) {
		throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp3;
	if(_this9 != null && _this9.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this14 = _this9.zpp_inner;
	if(_this14._validate != null) {
		_this14._validate();
	}
	if(_this9.zpp_inner.x == x1) {
		if(_this9 != null && _this9.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this15 = _this9.zpp_inner;
		if(_this15._validate != null) {
			_this15._validate();
		}
		tmp3 = _this9.zpp_inner.y == y1;
	} else {
		tmp3 = false;
	}
	if(!tmp3) {
		_this9.zpp_inner.x = x1;
		_this9.zpp_inner.y = y1;
		var _this16 = _this9.zpp_inner;
		if(_this16._invalidate != null) {
			_this16._invalidate(_this16);
		}
	}
	var ret1 = _this9;
	if(anchor2.zpp_inner.weak) {
		if(anchor2 != null && anchor2.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this17 = anchor2.zpp_inner;
		if(_this17._immutable) {
			throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
		}
		if(_this17._isimmutable != null) {
			_this17._isimmutable();
		}
		if(anchor2.zpp_inner._inuse) {
			throw new js__$Boot_HaxeError("Error: This Vec2 is not disposable");
		}
		var inner1 = anchor2.zpp_inner;
		anchor2.zpp_inner.outer = null;
		anchor2.zpp_inner = null;
		var o2 = anchor2;
		o2.zpp_pool = null;
		if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o2;
		} else {
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = o2;
		}
		zpp_$nape_util_ZPP_$PubPool.nextVec2 = o2;
		o2.zpp_disp = true;
		var o3 = inner1;
		if(o3.outer != null) {
			o3.outer.zpp_inner = null;
			o3.outer = null;
		}
		o3._isimmutable = null;
		o3._validate = null;
		o3._invalidate = null;
		o3.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o3;
	}
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	this.zpp_inner.immutable_midstep("WeldJoint::phase");
	if(phase != phase) {
		throw new js__$Boot_HaxeError("Error: WeldJoint::phase cannot be NaN");
	}
	if(this.zpp_inner_zn.phase != phase) {
		this.zpp_inner_zn.phase = phase;
		this.zpp_inner.wake();
	}
};
nape_constraint_WeldJoint.__name__ = true;
nape_constraint_WeldJoint.__super__ = nape_constraint_Constraint;
nape_constraint_WeldJoint.prototype = $extend(nape_constraint_Constraint.prototype,{
	__class__: nape_constraint_WeldJoint
});
var nape_dynamics_Arbiter = function() {
	this.zpp_inner = null;
	if(!zpp_$nape_dynamics_ZPP_$Arbiter.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate Arbiter derp!");
	}
};
nape_dynamics_Arbiter.__name__ = true;
nape_dynamics_Arbiter.prototype = {
	toString: function() {
		var ret = this.zpp_inner.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL ? "CollisionArbiter" : this.zpp_inner.type == zpp_$nape_dynamics_ZPP_$Arbiter.FLUID ? "FluidArbiter" : "SensorArbiter";
		if(this.zpp_inner.cleared) {
			return ret + "(object-pooled)";
		} else {
			if(!this.zpp_inner.active) {
				throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
			}
			var tmp = ret + "(" + (this.zpp_inner.ws1.id > this.zpp_inner.ws2.id ? this.zpp_inner.ws2.outer : this.zpp_inner.ws1.outer).toString() + "|";
			if(!this.zpp_inner.active) {
				throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
			}
			var tmp1 = tmp + (this.zpp_inner.ws1.id > this.zpp_inner.ws2.id ? this.zpp_inner.ws1.outer : this.zpp_inner.ws2.outer).toString() + ")";
			var tmp2 = this.zpp_inner.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL ? "[" + ["SD","DD"][this.zpp_inner.colarb.stat ? 0 : 1] + "]" : "";
			if(!this.zpp_inner.active) {
				throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
			}
			var tmp3;
			var _g = this.zpp_inner.immState;
			var x = _g;
			if(x == 5) {
				if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT = new nape_callbacks_PreFlag();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				tmp3 = zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT;
			} else if(_g == 1) {
				if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE = new nape_callbacks_PreFlag();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				tmp3 = zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE;
			} else {
				var x1 = _g;
				if(x1 == 6) {
					if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE == null) {
						zpp_$nape_util_ZPP_$Flags.internal = true;
						zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE = new nape_callbacks_PreFlag();
						zpp_$nape_util_ZPP_$Flags.internal = false;
					}
					tmp3 = zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE;
				} else {
					if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE == null) {
						zpp_$nape_util_ZPP_$Flags.internal = true;
						zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE = new nape_callbacks_PreFlag();
						zpp_$nape_util_ZPP_$Flags.internal = false;
					}
					tmp3 = zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE;
				}
			}
			return tmp1 + tmp2 + "<-" + tmp3.toString();
		}
	}
	,__class__: nape_dynamics_Arbiter
};
var nape_dynamics_ArbiterIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$ArbiterList.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "Arbiter" + "Iterator derp!");
	}
};
nape_dynamics_ArbiterIterator.__name__ = true;
nape_dynamics_ArbiterIterator.get = function(list) {
	var ret;
	if(nape_dynamics_ArbiterIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ArbiterList.internal = true;
		var ret1 = new nape_dynamics_ArbiterIterator();
		zpp_$nape_util_ZPP_$ArbiterList.internal = false;
		ret = ret1;
	} else {
		var r = nape_dynamics_ArbiterIterator.zpp_pool;
		nape_dynamics_ArbiterIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_dynamics_ArbiterIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.zpp_gl();
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_dynamics_ArbiterIterator.zpp_pool;
			nape_dynamics_ArbiterIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_dynamics_ArbiterIterator
};
var nape_dynamics_ArbiterList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$ArbiterList();
	this.zpp_inner.outer = this;
};
nape_dynamics_ArbiterList.__name__ = true;
nape_dynamics_ArbiterList.prototype = {
	zpp_gl: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = 0;
			var cx_ite = this.zpp_inner.inner.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.active) {
					this.zpp_inner.user_length++;
				}
				cx_ite = cx_ite.next;
			}
		}
		return this.zpp_inner.user_length;
	}
	,zpp_vm: function() {
		this.zpp_inner.valmod();
	}
	,at: function(index) {
		this.zpp_vm();
		if(index < 0 || index >= this.zpp_gl()) {
			throw new js__$Boot_HaxeError("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			index = this.zpp_gl() - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = 0;
			this.zpp_inner.at_ite = this.zpp_inner.inner.head;
			while(true) {
				var x = this.zpp_inner.at_ite.elt;
				if(x.active) {
					break;
				}
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			while(true) {
				var x1 = this.zpp_inner.at_ite.elt;
				if(x1.active) {
					break;
				}
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.wrapper();
	}
	,iterator: function() {
		this.zpp_vm();
		return nape_dynamics_ArbiterIterator.get(this);
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g = this.iterator();
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var length = _g.zpp_inner.zpp_gl();
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_dynamics_ArbiterIterator.zpp_pool;
				nape_dynamics_ArbiterIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_dynamics_ArbiterList
};
var nape_dynamics_ArbiterType = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "ArbiterType" + " derp!");
	}
};
nape_dynamics_ArbiterType.__name__ = true;
nape_dynamics_ArbiterType.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.ArbiterType_COLLISION == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.ArbiterType_COLLISION = new nape_dynamics_ArbiterType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.ArbiterType_COLLISION) {
			return "COLLISION";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.ArbiterType_SENSOR == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ArbiterType_SENSOR = new nape_dynamics_ArbiterType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.ArbiterType_SENSOR) {
				return "SENSOR";
			} else {
				if(zpp_$nape_util_ZPP_$Flags.ArbiterType_FLUID == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.ArbiterType_FLUID = new nape_dynamics_ArbiterType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(this == zpp_$nape_util_ZPP_$Flags.ArbiterType_FLUID) {
					return "FLUID";
				} else {
					return "";
				}
			}
		}
	}
	,__class__: nape_dynamics_ArbiterType
};
var nape_dynamics_CollisionArbiter = function() {
	if(!zpp_$nape_dynamics_ZPP_$Arbiter.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate CollisionArbiter derp!");
	}
	nape_dynamics_Arbiter.call(this);
};
nape_dynamics_CollisionArbiter.__name__ = true;
nape_dynamics_CollisionArbiter.__super__ = nape_dynamics_Arbiter;
nape_dynamics_CollisionArbiter.prototype = $extend(nape_dynamics_Arbiter.prototype,{
	__class__: nape_dynamics_CollisionArbiter
});
var nape_dynamics_Contact = function() {
	this.zpp_inner = null;
	if(!zpp_$nape_dynamics_ZPP_$Contact.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate Contact derp!");
	}
};
nape_dynamics_Contact.__name__ = true;
nape_dynamics_Contact.prototype = {
	toString: function() {
		if(this.zpp_inner.arbiter == null || this.zpp_inner.arbiter.cleared) {
			return "{object-pooled}";
		} else {
			return "{Contact}";
		}
	}
	,__class__: nape_dynamics_Contact
};
var nape_dynamics_ContactIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$ContactList.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "Contact" + "Iterator derp!");
	}
};
nape_dynamics_ContactIterator.__name__ = true;
nape_dynamics_ContactIterator.get = function(list) {
	var ret;
	if(nape_dynamics_ContactIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ContactList.internal = true;
		var ret1 = new nape_dynamics_ContactIterator();
		zpp_$nape_util_ZPP_$ContactList.internal = false;
		ret = ret1;
	} else {
		var r = nape_dynamics_ContactIterator.zpp_pool;
		nape_dynamics_ContactIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_dynamics_ContactIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = 0;
			var cx_ite = _this.zpp_inner.inner.next;
			while(cx_ite != null) {
				var i = cx_ite;
				if(i.active && i.arbiter.active) {
					_this.zpp_inner.user_length++;
				}
				cx_ite = cx_ite.next;
			}
		}
		var length = _this.zpp_inner.user_length;
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_dynamics_ContactIterator.zpp_pool;
			nape_dynamics_ContactIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_dynamics_ContactIterator
};
var nape_dynamics_ContactList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$ContactList();
	this.zpp_inner.outer = this;
};
nape_dynamics_ContactList.__name__ = true;
nape_dynamics_ContactList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		var tmp;
		if(index >= 0) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = 0;
				var cx_ite = this.zpp_inner.inner.next;
				while(cx_ite != null) {
					var i = cx_ite;
					if(i.active && i.arbiter.active) {
						this.zpp_inner.user_length++;
					}
					cx_ite = cx_ite.next;
				}
			}
			tmp = index >= this.zpp_inner.user_length;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = 0;
				var cx_ite1 = this.zpp_inner.inner.next;
				while(cx_ite1 != null) {
					var i1 = cx_ite1;
					if(i1.active && i1.arbiter.active) {
						this.zpp_inner.user_length++;
					}
					cx_ite1 = cx_ite1.next;
				}
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = 0;
			this.zpp_inner.at_ite = this.zpp_inner.inner.next;
			while(true) {
				var x = this.zpp_inner.at_ite;
				if(x.active && x.arbiter.active) {
					break;
				}
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			while(true) {
				var x1 = this.zpp_inner.at_ite;
				if(x1.active && x1.arbiter.active) {
					break;
				}
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.wrapper();
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_dynamics_ContactIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = 0;
				var cx_ite = _this.zpp_inner.inner.next;
				while(cx_ite != null) {
					var i = cx_ite;
					if(i.active && i.arbiter.active) {
						_this.zpp_inner.user_length++;
					}
					cx_ite = cx_ite.next;
				}
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_dynamics_ContactIterator.zpp_pool;
				nape_dynamics_ContactIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i1 = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i1 == null ? "NULL" : i1.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_dynamics_ContactList
};
var nape_dynamics_FluidArbiter = function() {
	if(!zpp_$nape_dynamics_ZPP_$Arbiter.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate FluidArbiter derp!");
	}
	nape_dynamics_Arbiter.call(this);
};
nape_dynamics_FluidArbiter.__name__ = true;
nape_dynamics_FluidArbiter.__super__ = nape_dynamics_Arbiter;
nape_dynamics_FluidArbiter.prototype = $extend(nape_dynamics_Arbiter.prototype,{
	__class__: nape_dynamics_FluidArbiter
});
var nape_dynamics_InteractionFilter = function(collisionGroup,collisionMask,sensorGroup,sensorMask,fluidGroup,fluidMask) {
	if(fluidMask == null) {
		fluidMask = -1;
	}
	if(fluidGroup == null) {
		fluidGroup = 1;
	}
	if(sensorMask == null) {
		sensorMask = -1;
	}
	if(sensorGroup == null) {
		sensorGroup = 1;
	}
	if(collisionMask == null) {
		collisionMask = -1;
	}
	if(collisionGroup == null) {
		collisionGroup = 1;
	}
	this.zpp_inner = null;
	if(zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool == null) {
		this.zpp_inner = new zpp_$nape_dynamics_ZPP_$InteractionFilter();
	} else {
		this.zpp_inner = zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool;
		zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool = this.zpp_inner.next;
		this.zpp_inner.next = null;
	}
	var _this = this.zpp_inner;
	this.zpp_inner.outer = this;
	if(this.zpp_inner.collisionGroup != collisionGroup) {
		this.zpp_inner.collisionGroup = collisionGroup;
		this.zpp_inner.invalidate();
	}
	if(this.zpp_inner.collisionMask != collisionMask) {
		this.zpp_inner.collisionMask = collisionMask;
		this.zpp_inner.invalidate();
	}
	if(this.zpp_inner.sensorGroup != sensorGroup) {
		this.zpp_inner.sensorGroup = sensorGroup;
		this.zpp_inner.invalidate();
	}
	if(this.zpp_inner.sensorMask != sensorMask) {
		this.zpp_inner.sensorMask = sensorMask;
		this.zpp_inner.invalidate();
	}
	if(this.zpp_inner.fluidGroup != fluidGroup) {
		this.zpp_inner.fluidGroup = fluidGroup;
		this.zpp_inner.invalidate();
	}
	if(this.zpp_inner.fluidMask != fluidMask) {
		this.zpp_inner.fluidMask = fluidMask;
		this.zpp_inner.invalidate();
	}
};
nape_dynamics_InteractionFilter.__name__ = true;
nape_dynamics_InteractionFilter.prototype = {
	__class__: nape_dynamics_InteractionFilter
};
var nape_dynamics_InteractionGroup = function(ignore) {
	if(ignore == null) {
		ignore = false;
	}
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_dynamics_ZPP_$InteractionGroup();
	this.zpp_inner.outer = this;
	if(this.zpp_inner.ignore != ignore) {
		this.zpp_inner.invalidate(true);
		this.zpp_inner.ignore = ignore;
	}
};
nape_dynamics_InteractionGroup.__name__ = true;
nape_dynamics_InteractionGroup.prototype = {
	toString: function() {
		var ret = "InteractionGroup";
		if(this.zpp_inner.ignore) {
			ret += ":ignore";
		}
		return ret;
	}
	,__class__: nape_dynamics_InteractionGroup
};
var nape_dynamics_InteractionGroupIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$InteractionGroupList.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "InteractionGroup" + "Iterator derp!");
	}
};
nape_dynamics_InteractionGroupIterator.__name__ = true;
nape_dynamics_InteractionGroupIterator.get = function(list) {
	var ret;
	if(nape_dynamics_InteractionGroupIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$InteractionGroupList.internal = true;
		var ret1 = new nape_dynamics_InteractionGroupIterator();
		zpp_$nape_util_ZPP_$InteractionGroupList.internal = false;
		ret = ret1;
	} else {
		var r = nape_dynamics_InteractionGroupIterator.zpp_pool;
		nape_dynamics_InteractionGroupIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_dynamics_InteractionGroupIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_dynamics_InteractionGroupIterator.zpp_pool;
			nape_dynamics_InteractionGroupIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_dynamics_InteractionGroupIterator
};
var nape_dynamics_InteractionGroupList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$InteractionGroupList();
	this.zpp_inner.outer = this;
};
nape_dynamics_InteractionGroupList.__name__ = true;
nape_dynamics_InteractionGroupList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		var tmp;
		if(index >= 0) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			tmp = index >= this.zpp_inner.user_length;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_dynamics_InteractionGroupIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_dynamics_InteractionGroupIterator.zpp_pool;
				nape_dynamics_InteractionGroupIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_dynamics_InteractionGroupList
};
var nape_geom_AABB = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.zpp_inner = null;
	if(x != x || y != y) {
		throw new js__$Boot_HaxeError("Error: AABB position cannot be NaN");
	}
	if(width != width || height != height) {
		throw new js__$Boot_HaxeError("Error: AABB dimensions cannot be NaN");
	}
	var ret;
	if(zpp_$nape_geom_ZPP_$AABB.zpp_pool == null) {
		ret = new zpp_$nape_geom_ZPP_$AABB();
	} else {
		ret = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
		zpp_$nape_geom_ZPP_$AABB.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.minx = x;
	ret.miny = y;
	ret.maxx = x + width;
	ret.maxy = y + height;
	this.zpp_inner = ret;
	this.zpp_inner.outer = this;
};
nape_geom_AABB.__name__ = true;
nape_geom_AABB.prototype = {
	toString: function() {
		var _this = this.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		return this.zpp_inner.toString();
	}
	,__class__: nape_geom_AABB
};
var nape_geom_ConvexResult = function() {
	this.zpp_inner = null;
	if(!zpp_$nape_geom_ZPP_$ConvexRayResult.internal) {
		throw new js__$Boot_HaxeError("Error: ConvexResult cannot be instantiated derp!");
	}
};
nape_geom_ConvexResult.__name__ = true;
nape_geom_ConvexResult.prototype = {
	toString: function() {
		if(this.zpp_inner.next != null) {
			throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
		}
		if(this.zpp_inner.next != null) {
			throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
		}
		if(this.zpp_inner.next != null) {
			throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
		}
		return "{ shape: " + Std.string(this.zpp_inner.shape) + " toi: " + this.zpp_inner.toiDistance + " }";
	}
	,__class__: nape_geom_ConvexResult
};
var nape_geom_ConvexResultIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$ConvexResultList.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "ConvexResult" + "Iterator derp!");
	}
};
nape_geom_ConvexResultIterator.__name__ = true;
nape_geom_ConvexResultIterator.get = function(list) {
	var ret;
	if(nape_geom_ConvexResultIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ConvexResultList.internal = true;
		var ret1 = new nape_geom_ConvexResultIterator();
		zpp_$nape_util_ZPP_$ConvexResultList.internal = false;
		ret = ret1;
	} else {
		var r = nape_geom_ConvexResultIterator.zpp_pool;
		nape_geom_ConvexResultIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_geom_ConvexResultIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_geom_ConvexResultIterator.zpp_pool;
			nape_geom_ConvexResultIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_geom_ConvexResultIterator
};
var nape_geom_ConvexResultList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$ConvexResultList();
	this.zpp_inner.outer = this;
};
nape_geom_ConvexResultList.__name__ = true;
nape_geom_ConvexResultList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		var tmp;
		if(index >= 0) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			tmp = index >= this.zpp_inner.user_length;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_geom_ConvexResultIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_geom_ConvexResultIterator.zpp_pool;
				nape_geom_ConvexResultIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_geom_ConvexResultList
};
var nape_geom_GeomPoly = function(vertices) {
	this.zpp_inner = null;
	this.zpp_pool = null;
	this.zpp_inner = new zpp_$nape_geom_ZPP_$GeomPoly(this);
	if(vertices != null) {
		if((vertices instanceof Array) && vertices.__enum__ == null) {
			var lv = vertices;
			var _g = 0;
			while(_g < lv.length) {
				var vite = lv[_g];
				++_g;
				if(vite == null) {
					throw new js__$Boot_HaxeError("Error: Array<Vec2> contains null objects");
				}
				if(!js_Boot.__instanceof(vite,nape_geom_Vec2)) {
					throw new js__$Boot_HaxeError("Error: Array<Vec2> contains non Vec2 objects");
				}
				var v = vite;
				if(v != null && v.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				if(v != null && v.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this = v.zpp_inner;
				if(_this._validate != null) {
					_this._validate();
				}
				var x = v.zpp_inner.x;
				if(v != null && v.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this1 = v.zpp_inner;
				if(_this1._validate != null) {
					_this1._validate();
				}
				var y = v.zpp_inner.y;
				var ret;
				if(zpp_$nape_geom_ZPP_$GeomVert.zpp_pool == null) {
					ret = new zpp_$nape_geom_ZPP_$GeomVert();
				} else {
					ret = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
					zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = ret.next;
					ret.next = null;
				}
				ret.forced = false;
				ret.x = x;
				ret.y = y;
				var obj = ret;
				if(this.zpp_inner.vertices == null) {
					this.zpp_inner.vertices = obj.prev = obj.next = obj;
				} else {
					obj.prev = this.zpp_inner.vertices;
					obj.next = this.zpp_inner.vertices.next;
					this.zpp_inner.vertices.next.prev = obj;
					this.zpp_inner.vertices.next = obj;
				}
				this.zpp_inner.vertices = obj;
			}
		} else if(js_Boot.__instanceof(vertices,nape_geom_Vec2List)) {
			var lv1 = vertices;
			var _g1 = lv1.iterator();
			while(true) {
				_g1.zpp_inner.zpp_inner.valmod();
				var length = _g1.zpp_inner.zpp_gl();
				_g1.zpp_critical = true;
				var tmp;
				if(_g1.zpp_i < length) {
					tmp = true;
				} else {
					_g1.zpp_next = nape_geom_Vec2Iterator.zpp_pool;
					nape_geom_Vec2Iterator.zpp_pool = _g1;
					_g1.zpp_inner = null;
					tmp = false;
				}
				if(!tmp) {
					break;
				}
				_g1.zpp_critical = false;
				var v1 = _g1.zpp_inner.at(_g1.zpp_i++);
				if(v1 == null) {
					throw new js__$Boot_HaxeError("Error: Vec2List contains null objects");
				}
				if(v1 != null && v1.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				if(v1 != null && v1.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = v1.zpp_inner;
				if(_this2._validate != null) {
					_this2._validate();
				}
				var x1 = v1.zpp_inner.x;
				if(v1 != null && v1.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this3 = v1.zpp_inner;
				if(_this3._validate != null) {
					_this3._validate();
				}
				var y1 = v1.zpp_inner.y;
				var ret1;
				if(zpp_$nape_geom_ZPP_$GeomVert.zpp_pool == null) {
					ret1 = new zpp_$nape_geom_ZPP_$GeomVert();
				} else {
					ret1 = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
					zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = ret1.next;
					ret1.next = null;
				}
				ret1.forced = false;
				ret1.x = x1;
				ret1.y = y1;
				var obj1 = ret1;
				if(this.zpp_inner.vertices == null) {
					this.zpp_inner.vertices = obj1.prev = obj1.next = obj1;
				} else {
					obj1.prev = this.zpp_inner.vertices;
					obj1.next = this.zpp_inner.vertices.next;
					this.zpp_inner.vertices.next.prev = obj1;
					this.zpp_inner.vertices.next = obj1;
				}
				this.zpp_inner.vertices = obj1;
			}
		} else if(js_Boot.__instanceof(vertices,nape_geom_GeomPoly)) {
			var lv2 = vertices;
			if(lv2 != null && lv2.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
			}
			var verts = lv2.zpp_inner.vertices;
			if(verts != null) {
				var vite1 = verts;
				while(true) {
					var x2 = vite1.x;
					var y2 = vite1.y;
					if(x2 != x2 || y2 != y2) {
						throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
					}
					var ret2;
					if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
						ret2 = new nape_geom_Vec2();
					} else {
						ret2 = zpp_$nape_util_ZPP_$PubPool.poolVec2;
						zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret2.zpp_pool;
						ret2.zpp_pool = null;
						ret2.zpp_disp = false;
						if(ret2 == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
							zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
						}
					}
					if(ret2.zpp_inner == null) {
						var ret3;
						if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
							ret3 = new zpp_$nape_geom_ZPP_$Vec2();
						} else {
							ret3 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
							zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret3.next;
							ret3.next = null;
						}
						ret3.weak = false;
						ret3._immutable = false;
						ret3.x = x2;
						ret3.y = y2;
						ret2.zpp_inner = ret3;
						ret2.zpp_inner.outer = ret2;
					} else {
						if(ret2 != null && ret2.zpp_disp) {
							throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
						}
						var _this4 = ret2.zpp_inner;
						if(_this4._immutable) {
							throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
						}
						if(_this4._isimmutable != null) {
							_this4._isimmutable();
						}
						if(x2 != x2 || y2 != y2) {
							throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
						}
						var tmp1;
						if(ret2 != null && ret2.zpp_disp) {
							throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
						}
						var _this5 = ret2.zpp_inner;
						if(_this5._validate != null) {
							_this5._validate();
						}
						if(ret2.zpp_inner.x == x2) {
							if(ret2 != null && ret2.zpp_disp) {
								throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
							}
							var _this6 = ret2.zpp_inner;
							if(_this6._validate != null) {
								_this6._validate();
							}
							tmp1 = ret2.zpp_inner.y == y2;
						} else {
							tmp1 = false;
						}
						if(!tmp1) {
							ret2.zpp_inner.x = x2;
							ret2.zpp_inner.y = y2;
							var _this7 = ret2.zpp_inner;
							if(_this7._invalidate != null) {
								_this7._invalidate(_this7);
							}
						}
					}
					ret2.zpp_inner.weak = false;
					var v2 = ret2;
					vite1 = vite1.next;
					if(v2 != null && v2.zpp_disp) {
						throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this8 = v2.zpp_inner;
					if(_this8._validate != null) {
						_this8._validate();
					}
					var x3 = v2.zpp_inner.x;
					if(v2 != null && v2.zpp_disp) {
						throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this9 = v2.zpp_inner;
					if(_this9._validate != null) {
						_this9._validate();
					}
					var y3 = v2.zpp_inner.y;
					var ret4;
					if(zpp_$nape_geom_ZPP_$GeomVert.zpp_pool == null) {
						ret4 = new zpp_$nape_geom_ZPP_$GeomVert();
					} else {
						ret4 = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
						zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = ret4.next;
						ret4.next = null;
					}
					ret4.forced = false;
					ret4.x = x3;
					ret4.y = y3;
					var obj2 = ret4;
					if(this.zpp_inner.vertices == null) {
						this.zpp_inner.vertices = obj2.prev = obj2.next = obj2;
					} else {
						obj2.prev = this.zpp_inner.vertices;
						obj2.next = this.zpp_inner.vertices.next;
						this.zpp_inner.vertices.next.prev = obj2;
						this.zpp_inner.vertices.next = obj2;
					}
					this.zpp_inner.vertices = obj2;
					if(v2 != null && v2.zpp_disp) {
						throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this10 = v2.zpp_inner;
					if(_this10._immutable) {
						throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
					}
					if(_this10._isimmutable != null) {
						_this10._isimmutable();
					}
					if(v2.zpp_inner._inuse) {
						throw new js__$Boot_HaxeError("Error: This Vec2 is not disposable");
					}
					var inner = v2.zpp_inner;
					v2.zpp_inner.outer = null;
					v2.zpp_inner = null;
					var o = v2;
					o.zpp_pool = null;
					if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
						zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
					} else {
						zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
					}
					zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
					o.zpp_disp = true;
					var o1 = inner;
					if(o1.outer != null) {
						o1.outer.zpp_inner = null;
						o1.outer = null;
					}
					o1._isimmutable = null;
					o1._validate = null;
					o1._invalidate = null;
					o1.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
					zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o1;
					if(vite1 == verts) {
						break;
					}
				}
			}
		} else {
			throw new js__$Boot_HaxeError("Error: Invalid type for polygon object, should be Array<Vec2>, Vec2List, GeomPoly or for flash10+ flash.Vector<Vec2>");
		}
		this.skipForward(1);
		if((vertices instanceof Array) && vertices.__enum__ == null) {
			var lv3 = vertices;
			var i = 0;
			while(i < lv3.length) {
				var cur = lv3[i];
				var tmp2;
				if(cur.zpp_inner.weak) {
					if(cur != null && cur.zpp_disp) {
						throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this11 = cur.zpp_inner;
					if(_this11._immutable) {
						throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
					}
					if(_this11._isimmutable != null) {
						_this11._isimmutable();
					}
					if(cur.zpp_inner._inuse) {
						throw new js__$Boot_HaxeError("Error: This Vec2 is not disposable");
					}
					var inner1 = cur.zpp_inner;
					cur.zpp_inner.outer = null;
					cur.zpp_inner = null;
					var o2 = cur;
					o2.zpp_pool = null;
					if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
						zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o2;
					} else {
						zpp_$nape_util_ZPP_$PubPool.poolVec2 = o2;
					}
					zpp_$nape_util_ZPP_$PubPool.nextVec2 = o2;
					o2.zpp_disp = true;
					var o3 = inner1;
					if(o3.outer != null) {
						o3.outer.zpp_inner = null;
						o3.outer = null;
					}
					o3._isimmutable = null;
					o3._validate = null;
					o3._invalidate = null;
					o3.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
					zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o3;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					lv3.splice(i,1);
					continue;
				}
				++i;
			}
		} else if(js_Boot.__instanceof(vertices,nape_geom_Vec2List)) {
			var lv4 = vertices;
			if(lv4.zpp_inner._validate != null) {
				lv4.zpp_inner._validate();
			}
			var ins = lv4.zpp_inner.inner;
			var pre = null;
			var cur1 = ins.head;
			while(cur1 != null) {
				var x4 = cur1.elt;
				if(x4.outer.zpp_inner.weak) {
					cur1 = ins.erase(pre);
					if(x4.outer.zpp_inner.weak) {
						var _this12 = x4.outer;
						if(_this12 != null && _this12.zpp_disp) {
							throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
						}
						var _this13 = _this12.zpp_inner;
						if(_this13._immutable) {
							throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
						}
						if(_this13._isimmutable != null) {
							_this13._isimmutable();
						}
						if(_this12.zpp_inner._inuse) {
							throw new js__$Boot_HaxeError("Error: This Vec2 is not disposable");
						}
						var inner2 = _this12.zpp_inner;
						_this12.zpp_inner.outer = null;
						_this12.zpp_inner = null;
						var o4 = _this12;
						o4.zpp_pool = null;
						if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
							zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o4;
						} else {
							zpp_$nape_util_ZPP_$PubPool.poolVec2 = o4;
						}
						zpp_$nape_util_ZPP_$PubPool.nextVec2 = o4;
						o4.zpp_disp = true;
						var o5 = inner2;
						if(o5.outer != null) {
							o5.outer.zpp_inner = null;
							o5.outer = null;
						}
						o5._isimmutable = null;
						o5._validate = null;
						o5._invalidate = null;
						o5.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
						zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o5;
					}
				} else {
					pre = cur1;
					cur1 = cur1.next;
				}
			}
		}
	}
};
nape_geom_GeomPoly.__name__ = true;
nape_geom_GeomPoly.get = function(vertices) {
	var ret;
	if(zpp_$nape_util_ZPP_$PubPool.poolGeomPoly == null) {
		ret = new nape_geom_GeomPoly();
	} else {
		ret = zpp_$nape_util_ZPP_$PubPool.poolGeomPoly;
		zpp_$nape_util_ZPP_$PubPool.poolGeomPoly = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == zpp_$nape_util_ZPP_$PubPool.nextGeomPoly) {
			zpp_$nape_util_ZPP_$PubPool.nextGeomPoly = null;
		}
	}
	if(vertices != null) {
		if((vertices instanceof Array) && vertices.__enum__ == null) {
			var lv = vertices;
			var _g = 0;
			while(_g < lv.length) {
				var vite = lv[_g];
				++_g;
				if(vite == null) {
					throw new js__$Boot_HaxeError("Error: Array<Vec2> contains null objects");
				}
				if(!js_Boot.__instanceof(vite,nape_geom_Vec2)) {
					throw new js__$Boot_HaxeError("Error: Array<Vec2> contains non Vec2 objects");
				}
				var v = vite;
				if(v != null && v.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				if(v != null && v.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this = v.zpp_inner;
				if(_this._validate != null) {
					_this._validate();
				}
				var x = v.zpp_inner.x;
				if(v != null && v.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this1 = v.zpp_inner;
				if(_this1._validate != null) {
					_this1._validate();
				}
				var y = v.zpp_inner.y;
				var ret1;
				if(zpp_$nape_geom_ZPP_$GeomVert.zpp_pool == null) {
					ret1 = new zpp_$nape_geom_ZPP_$GeomVert();
				} else {
					ret1 = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
					zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = ret1.next;
					ret1.next = null;
				}
				ret1.forced = false;
				ret1.x = x;
				ret1.y = y;
				var obj = ret1;
				if(ret.zpp_inner.vertices == null) {
					ret.zpp_inner.vertices = obj.prev = obj.next = obj;
				} else {
					obj.prev = ret.zpp_inner.vertices;
					obj.next = ret.zpp_inner.vertices.next;
					ret.zpp_inner.vertices.next.prev = obj;
					ret.zpp_inner.vertices.next = obj;
				}
				ret.zpp_inner.vertices = obj;
			}
		} else if(js_Boot.__instanceof(vertices,nape_geom_Vec2List)) {
			var lv1 = vertices;
			var _g1 = lv1.iterator();
			while(true) {
				_g1.zpp_inner.zpp_inner.valmod();
				var length = _g1.zpp_inner.zpp_gl();
				_g1.zpp_critical = true;
				var tmp;
				if(_g1.zpp_i < length) {
					tmp = true;
				} else {
					_g1.zpp_next = nape_geom_Vec2Iterator.zpp_pool;
					nape_geom_Vec2Iterator.zpp_pool = _g1;
					_g1.zpp_inner = null;
					tmp = false;
				}
				if(!tmp) {
					break;
				}
				_g1.zpp_critical = false;
				var v1 = _g1.zpp_inner.at(_g1.zpp_i++);
				if(v1 == null) {
					throw new js__$Boot_HaxeError("Error: Vec2List contains null objects");
				}
				if(v1 != null && v1.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				if(v1 != null && v1.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = v1.zpp_inner;
				if(_this2._validate != null) {
					_this2._validate();
				}
				var x1 = v1.zpp_inner.x;
				if(v1 != null && v1.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this3 = v1.zpp_inner;
				if(_this3._validate != null) {
					_this3._validate();
				}
				var y1 = v1.zpp_inner.y;
				var ret2;
				if(zpp_$nape_geom_ZPP_$GeomVert.zpp_pool == null) {
					ret2 = new zpp_$nape_geom_ZPP_$GeomVert();
				} else {
					ret2 = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
					zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = ret2.next;
					ret2.next = null;
				}
				ret2.forced = false;
				ret2.x = x1;
				ret2.y = y1;
				var obj1 = ret2;
				if(ret.zpp_inner.vertices == null) {
					ret.zpp_inner.vertices = obj1.prev = obj1.next = obj1;
				} else {
					obj1.prev = ret.zpp_inner.vertices;
					obj1.next = ret.zpp_inner.vertices.next;
					ret.zpp_inner.vertices.next.prev = obj1;
					ret.zpp_inner.vertices.next = obj1;
				}
				ret.zpp_inner.vertices = obj1;
			}
		} else if(js_Boot.__instanceof(vertices,nape_geom_GeomPoly)) {
			var lv2 = vertices;
			if(lv2 != null && lv2.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
			}
			var verts = lv2.zpp_inner.vertices;
			if(verts != null) {
				var vite1 = verts;
				while(true) {
					var x2 = vite1.x;
					var y2 = vite1.y;
					if(x2 != x2 || y2 != y2) {
						throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
					}
					var ret3;
					if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
						ret3 = new nape_geom_Vec2();
					} else {
						ret3 = zpp_$nape_util_ZPP_$PubPool.poolVec2;
						zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret3.zpp_pool;
						ret3.zpp_pool = null;
						ret3.zpp_disp = false;
						if(ret3 == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
							zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
						}
					}
					if(ret3.zpp_inner == null) {
						var ret4;
						if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
							ret4 = new zpp_$nape_geom_ZPP_$Vec2();
						} else {
							ret4 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
							zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret4.next;
							ret4.next = null;
						}
						ret4.weak = false;
						ret4._immutable = false;
						ret4.x = x2;
						ret4.y = y2;
						ret3.zpp_inner = ret4;
						ret3.zpp_inner.outer = ret3;
					} else {
						if(ret3 != null && ret3.zpp_disp) {
							throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
						}
						var _this4 = ret3.zpp_inner;
						if(_this4._immutable) {
							throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
						}
						if(_this4._isimmutable != null) {
							_this4._isimmutable();
						}
						if(x2 != x2 || y2 != y2) {
							throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
						}
						var tmp1;
						if(ret3 != null && ret3.zpp_disp) {
							throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
						}
						var _this5 = ret3.zpp_inner;
						if(_this5._validate != null) {
							_this5._validate();
						}
						if(ret3.zpp_inner.x == x2) {
							if(ret3 != null && ret3.zpp_disp) {
								throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
							}
							var _this6 = ret3.zpp_inner;
							if(_this6._validate != null) {
								_this6._validate();
							}
							tmp1 = ret3.zpp_inner.y == y2;
						} else {
							tmp1 = false;
						}
						if(!tmp1) {
							ret3.zpp_inner.x = x2;
							ret3.zpp_inner.y = y2;
							var _this7 = ret3.zpp_inner;
							if(_this7._invalidate != null) {
								_this7._invalidate(_this7);
							}
						}
					}
					ret3.zpp_inner.weak = false;
					var v2 = ret3;
					vite1 = vite1.next;
					if(v2 != null && v2.zpp_disp) {
						throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this8 = v2.zpp_inner;
					if(_this8._validate != null) {
						_this8._validate();
					}
					var x3 = v2.zpp_inner.x;
					if(v2 != null && v2.zpp_disp) {
						throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this9 = v2.zpp_inner;
					if(_this9._validate != null) {
						_this9._validate();
					}
					var y3 = v2.zpp_inner.y;
					var ret5;
					if(zpp_$nape_geom_ZPP_$GeomVert.zpp_pool == null) {
						ret5 = new zpp_$nape_geom_ZPP_$GeomVert();
					} else {
						ret5 = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
						zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = ret5.next;
						ret5.next = null;
					}
					ret5.forced = false;
					ret5.x = x3;
					ret5.y = y3;
					var obj2 = ret5;
					if(ret.zpp_inner.vertices == null) {
						ret.zpp_inner.vertices = obj2.prev = obj2.next = obj2;
					} else {
						obj2.prev = ret.zpp_inner.vertices;
						obj2.next = ret.zpp_inner.vertices.next;
						ret.zpp_inner.vertices.next.prev = obj2;
						ret.zpp_inner.vertices.next = obj2;
					}
					ret.zpp_inner.vertices = obj2;
					if(v2 != null && v2.zpp_disp) {
						throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this10 = v2.zpp_inner;
					if(_this10._immutable) {
						throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
					}
					if(_this10._isimmutable != null) {
						_this10._isimmutable();
					}
					if(v2.zpp_inner._inuse) {
						throw new js__$Boot_HaxeError("Error: This Vec2 is not disposable");
					}
					var inner = v2.zpp_inner;
					v2.zpp_inner.outer = null;
					v2.zpp_inner = null;
					var o = v2;
					o.zpp_pool = null;
					if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
						zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
					} else {
						zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
					}
					zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
					o.zpp_disp = true;
					var o1 = inner;
					if(o1.outer != null) {
						o1.outer.zpp_inner = null;
						o1.outer = null;
					}
					o1._isimmutable = null;
					o1._validate = null;
					o1._invalidate = null;
					o1.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
					zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o1;
					if(!(vite1 != verts)) {
						break;
					}
				}
			}
		} else {
			throw new js__$Boot_HaxeError("Error: Invalid type for polygon object, should be Array<Vec2>, Vec2List, GeomPoly or for flash10+ flash.Vector<Vec2>");
		}
		ret.skipForward(1);
		if((vertices instanceof Array) && vertices.__enum__ == null) {
			var lv3 = vertices;
			var i = 0;
			while(i < lv3.length) {
				var cur = lv3[i];
				var tmp2;
				if(cur.zpp_inner.weak) {
					if(cur != null && cur.zpp_disp) {
						throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this11 = cur.zpp_inner;
					if(_this11._immutable) {
						throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
					}
					if(_this11._isimmutable != null) {
						_this11._isimmutable();
					}
					if(cur.zpp_inner._inuse) {
						throw new js__$Boot_HaxeError("Error: This Vec2 is not disposable");
					}
					var inner1 = cur.zpp_inner;
					cur.zpp_inner.outer = null;
					cur.zpp_inner = null;
					var o2 = cur;
					o2.zpp_pool = null;
					if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
						zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o2;
					} else {
						zpp_$nape_util_ZPP_$PubPool.poolVec2 = o2;
					}
					zpp_$nape_util_ZPP_$PubPool.nextVec2 = o2;
					o2.zpp_disp = true;
					var o3 = inner1;
					if(o3.outer != null) {
						o3.outer.zpp_inner = null;
						o3.outer = null;
					}
					o3._isimmutable = null;
					o3._validate = null;
					o3._invalidate = null;
					o3.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
					zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o3;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					lv3.splice(i,1);
					continue;
				}
				++i;
			}
		} else if(js_Boot.__instanceof(vertices,nape_geom_Vec2List)) {
			var lv4 = vertices;
			if(lv4.zpp_inner._validate != null) {
				lv4.zpp_inner._validate();
			}
			var ins = lv4.zpp_inner.inner;
			var pre = null;
			var cur1 = ins.head;
			while(cur1 != null) {
				var x4 = cur1.elt;
				if(x4.outer.zpp_inner.weak) {
					cur1 = ins.erase(pre);
					if(x4.outer.zpp_inner.weak) {
						var _this12 = x4.outer;
						if(_this12 != null && _this12.zpp_disp) {
							throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
						}
						var _this13 = _this12.zpp_inner;
						if(_this13._immutable) {
							throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
						}
						if(_this13._isimmutable != null) {
							_this13._isimmutable();
						}
						if(_this12.zpp_inner._inuse) {
							throw new js__$Boot_HaxeError("Error: This Vec2 is not disposable");
						}
						var inner2 = _this12.zpp_inner;
						_this12.zpp_inner.outer = null;
						_this12.zpp_inner = null;
						var o4 = _this12;
						o4.zpp_pool = null;
						if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
							zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o4;
						} else {
							zpp_$nape_util_ZPP_$PubPool.poolVec2 = o4;
						}
						zpp_$nape_util_ZPP_$PubPool.nextVec2 = o4;
						o4.zpp_disp = true;
						var o5 = inner2;
						if(o5.outer != null) {
							o5.outer.zpp_inner = null;
							o5.outer = null;
						}
						o5._isimmutable = null;
						o5._validate = null;
						o5._invalidate = null;
						o5.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
						zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o5;
					}
				} else {
					pre = cur1;
					cur1 = cur1.next;
				}
			}
		}
	}
	return ret;
};
nape_geom_GeomPoly.prototype = {
	skipForward: function(times) {
		if(this.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		}
		if(this.zpp_inner.vertices != null) {
			if(times > 0) {
				while(times-- > 0) this.zpp_inner.vertices = this.zpp_inner.vertices.next;
			} else if(times < 0) {
				while(times++ < 0) this.zpp_inner.vertices = this.zpp_inner.vertices.prev;
			}
		}
		return this;
	}
	,toString: function() {
		var ret = "GeomPoly[";
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			while(true) {
				var v = nite;
				if(v != this.zpp_inner.vertices) {
					ret += ",";
				}
				ret += "{" + v.x + "," + v.y + "}";
				nite = nite.next;
				if(!(nite != L)) {
					break;
				}
			}
		}
		return ret + "]";
	}
	,__class__: nape_geom_GeomPoly
};
var nape_geom_GeomPolyIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$GeomPolyList.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "GeomPoly" + "Iterator derp!");
	}
};
nape_geom_GeomPolyIterator.__name__ = true;
nape_geom_GeomPolyIterator.get = function(list) {
	var ret;
	if(nape_geom_GeomPolyIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$GeomPolyList.internal = true;
		var ret1 = new nape_geom_GeomPolyIterator();
		zpp_$nape_util_ZPP_$GeomPolyList.internal = false;
		ret = ret1;
	} else {
		var r = nape_geom_GeomPolyIterator.zpp_pool;
		nape_geom_GeomPolyIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_geom_GeomPolyIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_geom_GeomPolyIterator.zpp_pool;
			nape_geom_GeomPolyIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_geom_GeomPolyIterator
};
var nape_geom_GeomPolyList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$GeomPolyList();
	this.zpp_inner.outer = this;
};
nape_geom_GeomPolyList.__name__ = true;
nape_geom_GeomPolyList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		var tmp;
		if(index >= 0) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			tmp = index >= this.zpp_inner.user_length;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_geom_GeomPolyIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_geom_GeomPolyIterator.zpp_pool;
				nape_geom_GeomPolyIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_geom_GeomPolyList
};
var nape_geom_Mat23 = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0.0;
	}
	if(tx == null) {
		tx = 0.0;
	}
	if(d == null) {
		d = 1.0;
	}
	if(c == null) {
		c = 0.0;
	}
	if(b == null) {
		b = 0.0;
	}
	if(a == null) {
		a = 1.0;
	}
	this.zpp_inner = null;
	this.zpp_inner = zpp_$nape_geom_ZPP_$Mat23.get();
	this.zpp_inner.outer = this;
	if(a != a) {
		throw new js__$Boot_HaxeError("Error: Mat23::" + "a" + " cannot be NaN");
	}
	this.zpp_inner.a = a;
	var _this = this.zpp_inner;
	if(_this._invalidate != null) {
		_this._invalidate();
	}
	if(b != b) {
		throw new js__$Boot_HaxeError("Error: Mat23::" + "b" + " cannot be NaN");
	}
	this.zpp_inner.b = b;
	var _this1 = this.zpp_inner;
	if(_this1._invalidate != null) {
		_this1._invalidate();
	}
	if(tx != tx) {
		throw new js__$Boot_HaxeError("Error: Mat23::" + "tx" + " cannot be NaN");
	}
	this.zpp_inner.tx = tx;
	var _this2 = this.zpp_inner;
	if(_this2._invalidate != null) {
		_this2._invalidate();
	}
	if(c != c) {
		throw new js__$Boot_HaxeError("Error: Mat23::" + "c" + " cannot be NaN");
	}
	this.zpp_inner.c = c;
	var _this3 = this.zpp_inner;
	if(_this3._invalidate != null) {
		_this3._invalidate();
	}
	if(d != d) {
		throw new js__$Boot_HaxeError("Error: Mat23::" + "d" + " cannot be NaN");
	}
	this.zpp_inner.d = d;
	var _this4 = this.zpp_inner;
	if(_this4._invalidate != null) {
		_this4._invalidate();
	}
	if(ty != ty) {
		throw new js__$Boot_HaxeError("Error: Mat23::" + "ty" + " cannot be NaN");
	}
	this.zpp_inner.ty = ty;
	var _this5 = this.zpp_inner;
	if(_this5._invalidate != null) {
		_this5._invalidate();
	}
};
nape_geom_Mat23.__name__ = true;
nape_geom_Mat23.prototype = {
	toString: function() {
		return "{ a: " + this.zpp_inner.a + " b: " + this.zpp_inner.b + " c: " + this.zpp_inner.c + " d: " + this.zpp_inner.d + " tx: " + this.zpp_inner.tx + " ty: " + this.zpp_inner.ty + " }";
	}
	,__class__: nape_geom_Mat23
};
var nape_geom_MatMN = function(rows,cols) {
	this.zpp_inner = null;
	if(rows <= 0 || cols <= 0) {
		throw new js__$Boot_HaxeError("Error: MatMN::dimensions cannot be < 1");
	}
	this.zpp_inner = new zpp_$nape_geom_ZPP_$MatMN(rows,cols);
	this.zpp_inner.outer = this;
};
nape_geom_MatMN.__name__ = true;
nape_geom_MatMN.prototype = {
	toString: function() {
		var ret = "{ ";
		var fst = true;
		var _g1 = 0;
		var _g = this.zpp_inner.m;
		while(_g1 < _g) {
			var i = _g1++;
			if(!fst) {
				ret += "; ";
			}
			fst = false;
			var _g3 = 0;
			var _g2 = this.zpp_inner.n;
			while(_g3 < _g2) {
				var j = _g3++;
				if(i < 0 || j < 0 || i >= this.zpp_inner.m || j >= this.zpp_inner.n) {
					throw new js__$Boot_HaxeError("Error: MatMN indices out of range");
				}
				ret += this.zpp_inner.x[i * this.zpp_inner.n + j] + " ";
			}
		}
		ret += "}";
		return ret;
	}
	,__class__: nape_geom_MatMN
};
var nape_geom_RayResult = function() {
	this.zpp_inner = null;
	if(!zpp_$nape_geom_ZPP_$ConvexRayResult.internal) {
		throw new js__$Boot_HaxeError("Error: RayResult cannot be instantiated derp!");
	}
};
nape_geom_RayResult.__name__ = true;
nape_geom_RayResult.prototype = {
	toString: function() {
		if(this.zpp_inner.next != null) {
			throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
		}
		if(this.zpp_inner.next != null) {
			throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
		}
		if(this.zpp_inner.next != null) {
			throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
		}
		if(this.zpp_inner.next != null) {
			throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
		}
		return "{ shape: " + Std.string(this.zpp_inner.shape) + " distance: " + this.zpp_inner.toiDistance + " ?inner: " + Std.string(this.zpp_inner.inner) + " }";
	}
	,__class__: nape_geom_RayResult
};
var nape_geom_RayResultIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$RayResultList.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "RayResult" + "Iterator derp!");
	}
};
nape_geom_RayResultIterator.__name__ = true;
nape_geom_RayResultIterator.get = function(list) {
	var ret;
	if(nape_geom_RayResultIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$RayResultList.internal = true;
		var ret1 = new nape_geom_RayResultIterator();
		zpp_$nape_util_ZPP_$RayResultList.internal = false;
		ret = ret1;
	} else {
		var r = nape_geom_RayResultIterator.zpp_pool;
		nape_geom_RayResultIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_geom_RayResultIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_geom_RayResultIterator.zpp_pool;
			nape_geom_RayResultIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_geom_RayResultIterator
};
var nape_geom_RayResultList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$RayResultList();
	this.zpp_inner.outer = this;
};
nape_geom_RayResultList.__name__ = true;
nape_geom_RayResultList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		var tmp;
		if(index >= 0) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			tmp = index >= this.zpp_inner.user_length;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_geom_RayResultIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_geom_RayResultIterator.zpp_pool;
				nape_geom_RayResultIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_geom_RayResultList
};
var nape_geom_Vec2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.zpp_pool = null;
	this.zpp_inner = null;
	if(x != x || y != y) {
		throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
		ret = new zpp_$nape_geom_ZPP_$Vec2();
	} else {
		ret = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.weak = false;
	ret._immutable = false;
	ret.x = x;
	ret.y = y;
	this.zpp_inner = ret;
	this.zpp_inner.outer = this;
};
nape_geom_Vec2.__name__ = true;
nape_geom_Vec2.weak = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	if(x != x || y != y) {
		throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
		ret = new nape_geom_Vec2();
	} else {
		ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
		zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
			ret1 = new zpp_$nape_geom_ZPP_$Vec2();
		} else {
			ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(x != x || y != y) {
			throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = true;
	return ret;
};
nape_geom_Vec2.get = function(x,y,weak) {
	if(weak == null) {
		weak = false;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	if(x != x || y != y) {
		throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
		ret = new nape_geom_Vec2();
	} else {
		ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
		zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
			ret1 = new zpp_$nape_geom_ZPP_$Vec2();
		} else {
			ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(x != x || y != y) {
			throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = weak;
	return ret;
};
nape_geom_Vec2.fromPolar = function(length,angle,weak) {
	if(weak == null) {
		weak = false;
	}
	if(length != length) {
		throw new js__$Boot_HaxeError("Error: Vec2::length cannot be NaN");
	}
	if(angle != angle) {
		throw new js__$Boot_HaxeError("Error: Vec2::angle cannot be NaN");
	}
	var x = length * Math.cos(angle);
	var y = length * Math.sin(angle);
	if(x != x || y != y) {
		throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
		ret = new nape_geom_Vec2();
	} else {
		ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
		zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
			ret1 = new zpp_$nape_geom_ZPP_$Vec2();
		} else {
			ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(x != x || y != y) {
			throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = weak;
	return ret;
};
nape_geom_Vec2.dsq = function(a,b) {
	if(a != null && a.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(b != null && b.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(a == null || b == null) {
		throw new js__$Boot_HaxeError("Error: Cannot compute squared distance between null Vec2");
	}
	if(a != null && a.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = a.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var ax = a.zpp_inner.x;
	if(a != null && a.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = a.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var ay = a.zpp_inner.y;
	if(b != null && b.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = b.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var bx = b.zpp_inner.x;
	if(b != null && b.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = b.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var dx = 0.0;
	var dy = 0.0;
	dx = ax - bx;
	dy = ay - b.zpp_inner.y;
	var ret = dx * dx + dy * dy;
	if(a.zpp_inner.weak) {
		if(a != null && a.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this4 = a.zpp_inner;
		if(_this4._immutable) {
			throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
		}
		if(_this4._isimmutable != null) {
			_this4._isimmutable();
		}
		if(a.zpp_inner._inuse) {
			throw new js__$Boot_HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = a.zpp_inner;
		a.zpp_inner.outer = null;
		a.zpp_inner = null;
		var o = a;
		o.zpp_pool = null;
		if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
		} else {
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
		}
		zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
		o.zpp_disp = true;
		var o1 = inner;
		if(o1.outer != null) {
			o1.outer.zpp_inner = null;
			o1.outer = null;
		}
		o1._isimmutable = null;
		o1._validate = null;
		o1._invalidate = null;
		o1.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o1;
	}
	if(b.zpp_inner.weak) {
		if(b != null && b.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this5 = b.zpp_inner;
		if(_this5._immutable) {
			throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
		}
		if(_this5._isimmutable != null) {
			_this5._isimmutable();
		}
		if(b.zpp_inner._inuse) {
			throw new js__$Boot_HaxeError("Error: This Vec2 is not disposable");
		}
		var inner1 = b.zpp_inner;
		b.zpp_inner.outer = null;
		b.zpp_inner = null;
		var o2 = b;
		o2.zpp_pool = null;
		if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o2;
		} else {
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = o2;
		}
		zpp_$nape_util_ZPP_$PubPool.nextVec2 = o2;
		o2.zpp_disp = true;
		var o3 = inner1;
		if(o3.outer != null) {
			o3.outer.zpp_inner = null;
			o3.outer = null;
		}
		o3._isimmutable = null;
		o3._validate = null;
		o3._invalidate = null;
		o3.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o3;
	}
	return ret;
};
nape_geom_Vec2.distance = function(a,b) {
	if(a != null && a.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(b != null && b.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(a == null || b == null) {
		throw new js__$Boot_HaxeError("Error: Cannot compute squared distance between null Vec2");
	}
	if(a != null && a.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = a.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var ax = a.zpp_inner.x;
	if(a != null && a.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = a.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var ay = a.zpp_inner.y;
	if(b != null && b.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = b.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var bx = b.zpp_inner.x;
	if(b != null && b.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = b.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var dx = 0.0;
	var dy = 0.0;
	dx = ax - bx;
	dy = ay - b.zpp_inner.y;
	var ret = Math.sqrt(dx * dx + dy * dy);
	if(a.zpp_inner.weak) {
		if(a != null && a.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this4 = a.zpp_inner;
		if(_this4._immutable) {
			throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
		}
		if(_this4._isimmutable != null) {
			_this4._isimmutable();
		}
		if(a.zpp_inner._inuse) {
			throw new js__$Boot_HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = a.zpp_inner;
		a.zpp_inner.outer = null;
		a.zpp_inner = null;
		var o = a;
		o.zpp_pool = null;
		if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
		} else {
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
		}
		zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
		o.zpp_disp = true;
		var o1 = inner;
		if(o1.outer != null) {
			o1.outer.zpp_inner = null;
			o1.outer = null;
		}
		o1._isimmutable = null;
		o1._validate = null;
		o1._invalidate = null;
		o1.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o1;
	}
	if(b.zpp_inner.weak) {
		if(b != null && b.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this5 = b.zpp_inner;
		if(_this5._immutable) {
			throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
		}
		if(_this5._isimmutable != null) {
			_this5._isimmutable();
		}
		if(b.zpp_inner._inuse) {
			throw new js__$Boot_HaxeError("Error: This Vec2 is not disposable");
		}
		var inner1 = b.zpp_inner;
		b.zpp_inner.outer = null;
		b.zpp_inner = null;
		var o2 = b;
		o2.zpp_pool = null;
		if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o2;
		} else {
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = o2;
		}
		zpp_$nape_util_ZPP_$PubPool.nextVec2 = o2;
		o2.zpp_disp = true;
		var o3 = inner1;
		if(o3.outer != null) {
			o3.outer.zpp_inner = null;
			o3.outer = null;
		}
		o3._isimmutable = null;
		o3._validate = null;
		o3._invalidate = null;
		o3.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o3;
	}
	return ret;
};
nape_geom_Vec2.prototype = {
	toString: function() {
		if(this.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = this.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		return this.zpp_inner.toString();
	}
	,__class__: nape_geom_Vec2
};
var nape_geom_Vec2Iterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$Vec2List.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "Vec2" + "Iterator derp!");
	}
};
nape_geom_Vec2Iterator.__name__ = true;
nape_geom_Vec2Iterator.get = function(list) {
	var ret;
	if(nape_geom_Vec2Iterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$Vec2List.internal = true;
		var ret1 = new nape_geom_Vec2Iterator();
		zpp_$nape_util_ZPP_$Vec2List.internal = false;
		ret = ret1;
	} else {
		var r = nape_geom_Vec2Iterator.zpp_pool;
		nape_geom_Vec2Iterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_geom_Vec2Iterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.zpp_gl();
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_geom_Vec2Iterator.zpp_pool;
			nape_geom_Vec2Iterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_geom_Vec2Iterator
};
var nape_geom_Vec2List = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$Vec2List();
	this.zpp_inner.outer = this;
};
nape_geom_Vec2List.__name__ = true;
nape_geom_Vec2List.fromArray = function(array) {
	if(array == null) {
		throw new js__$Boot_HaxeError("Error: Cannot convert null Array to Nape list");
	}
	var ret = new nape_geom_Vec2List();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape_geom_Vec2List.prototype = {
	zpp_gl: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,zpp_vm: function() {
		this.zpp_inner.valmod();
	}
	,at: function(index) {
		this.zpp_vm();
		if(index < 0 || index >= this.zpp_gl()) {
			throw new js__$Boot_HaxeError("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			index = this.zpp_gl() - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		var _this = this.zpp_inner.at_ite.elt;
		if(_this.outer == null) {
			_this.outer = new nape_geom_Vec2();
			var o = _this.outer.zpp_inner;
			if(o.outer != null) {
				o.outer.zpp_inner = null;
				o.outer = null;
			}
			o._isimmutable = null;
			o._validate = null;
			o._invalidate = null;
			o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
			_this.outer.zpp_inner = _this;
		}
		return _this.outer;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + "List is immutable");
		}
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				this.zpp_inner.inner.add(obj.zpp_inner);
			} else {
				if(this.zpp_inner.push_ite == null) {
					var tmp = this.empty() ? null : this.zpp_inner.inner.iterator_at(this.zpp_gl() - 1);
					this.zpp_inner.push_ite = tmp;
				}
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,empty: function() {
		return this.zpp_gl() == 0;
	}
	,iterator: function() {
		this.zpp_vm();
		return nape_geom_Vec2Iterator.get(this);
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g = this.iterator();
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var length = _g.zpp_inner.zpp_gl();
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_geom_Vec2Iterator.zpp_pool;
				nape_geom_Vec2Iterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_geom_Vec2List
};
var nape_geom_Vec3 = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.zpp_pool = null;
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_geom_ZPP_$Vec3();
	this.zpp_inner.outer = this;
	if(this.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner.immutable) {
		throw new js__$Boot_HaxeError("Error: Vec3 is immutable");
	}
	this.zpp_inner.x = x;
	if(this.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	if(this.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner.immutable) {
		throw new js__$Boot_HaxeError("Error: Vec3 is immutable");
	}
	this.zpp_inner.y = y;
	if(this.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this1 = this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	if(this.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner.immutable) {
		throw new js__$Boot_HaxeError("Error: Vec3 is immutable");
	}
	this.zpp_inner.z = z;
	if(this.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this2 = this.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
};
nape_geom_Vec3.__name__ = true;
nape_geom_Vec3.get = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var ret;
	if(zpp_$nape_util_ZPP_$PubPool.poolVec3 == null) {
		ret = new nape_geom_Vec3();
	} else {
		ret = zpp_$nape_util_ZPP_$PubPool.poolVec3;
		zpp_$nape_util_ZPP_$PubPool.poolVec3 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec3) {
			zpp_$nape_util_ZPP_$PubPool.nextVec3 = null;
		}
	}
	ret.setxyz(x,y,z);
	ret.zpp_inner.immutable = false;
	ret.zpp_inner._validate = null;
	return ret;
};
nape_geom_Vec3.prototype = {
	setxyz: function(x,y,z) {
		if(this.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		if(this.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		if(this.zpp_inner.immutable) {
			throw new js__$Boot_HaxeError("Error: Vec3 is immutable");
		}
		this.zpp_inner.x = x;
		if(this.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this = this.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		if(this.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		if(this.zpp_inner.immutable) {
			throw new js__$Boot_HaxeError("Error: Vec3 is immutable");
		}
		this.zpp_inner.y = y;
		if(this.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this1 = this.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(this.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		if(this.zpp_inner.immutable) {
			throw new js__$Boot_HaxeError("Error: Vec3 is immutable");
		}
		this.zpp_inner.z = z;
		if(this.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this2 = this.zpp_inner;
		if(_this2._validate != null) {
			_this2._validate();
		}
		return this;
	}
	,toString: function() {
		if(this.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		if(this.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this = this.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		var tmp = "{ x: " + this.zpp_inner.x + " y: ";
		if(this.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this1 = this.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		var tmp1 = tmp + this.zpp_inner.y + " z: ";
		if(this.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this2 = this.zpp_inner;
		if(_this2._validate != null) {
			_this2._validate();
		}
		return tmp1 + this.zpp_inner.z + " }";
	}
	,__class__: nape_geom_Vec3
};
var nape_geom_Winding = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "Winding" + " derp!");
	}
};
nape_geom_Winding.__name__ = true;
nape_geom_Winding.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.Winding_UNDEFINED == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.Winding_UNDEFINED = new nape_geom_Winding();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.Winding_UNDEFINED) {
			return "UNDEFINED";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE = new nape_geom_Winding();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE) {
				return "CLOCKWISE";
			} else {
				if(zpp_$nape_util_ZPP_$Flags.Winding_ANTICLOCKWISE == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.Winding_ANTICLOCKWISE = new nape_geom_Winding();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(this == zpp_$nape_util_ZPP_$Flags.Winding_ANTICLOCKWISE) {
					return "ANTICLOCKWISE";
				} else {
					return "";
				}
			}
		}
	}
	,__class__: nape_geom_Winding
};
var nape_phys_Interactor = function() {
	this.zpp_inner_i = null;
	if(!nape_phys_Interactor.zpp_internalAlloc) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate an Interactor, only Shape/Body/Compound");
	}
};
nape_phys_Interactor.__name__ = true;
nape_phys_Interactor.prototype = {
	toString: function() {
		return "";
	}
	,__class__: nape_phys_Interactor
};
var nape_phys_Body = function(type,position) {
	this.zpp_inner = null;
	nape_phys_Interactor.zpp_internalAlloc = true;
	nape_phys_Interactor.call(this);
	nape_phys_Interactor.zpp_internalAlloc = false;
	this.zpp_inner = new zpp_$nape_phys_ZPP_$Body();
	this.zpp_inner.outer = this;
	this.zpp_inner.outer_i = this;
	this.zpp_inner_i = this.zpp_inner;
	if(position != null) {
		if(position != null && position.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		if(position != null && position.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = position.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		this.zpp_inner.posx = position.zpp_inner.x;
		if(position != null && position.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = position.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		this.zpp_inner.posy = position.zpp_inner.y;
	} else {
		this.zpp_inner.posx = 0;
		this.zpp_inner.posy = 0;
	}
	var type1;
	if(type == null) {
		if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		type1 = zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC;
	} else {
		type1 = type;
	}
	this.zpp_inner.immutable_midstep("Body::type");
	if(this.zpp_inner.world) {
		throw new js__$Boot_HaxeError("Error: Space::world is immutable");
	}
	if(zpp_$nape_phys_ZPP_$Body.types[this.zpp_inner.type] != type1) {
		if(type1 == null) {
			throw new js__$Boot_HaxeError("Error: Cannot use null BodyType");
		}
		var ntype;
		if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(type1 == zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC) {
			ntype = 2;
		} else {
			if(zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC = new nape_phys_BodyType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(type1 == zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC) {
				ntype = 3;
			} else {
				ntype = 1;
			}
		}
		if(ntype == 1 && this.zpp_inner.space != null) {
			this.zpp_inner.velx = 0;
			this.zpp_inner.vely = 0;
			this.zpp_inner.angvel = 0;
		}
		this.zpp_inner.invalidate_type();
		if(this.zpp_inner.space != null) {
			this.zpp_inner.space.transmitType(this.zpp_inner,ntype);
		} else {
			this.zpp_inner.type = ntype;
		}
	}
	if(position != null) {
		if(position.zpp_inner.weak) {
			if(position != null && position.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = position.zpp_inner;
			if(_this2._immutable) {
				throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
			}
			if(_this2._isimmutable != null) {
				_this2._isimmutable();
			}
			if(position.zpp_inner._inuse) {
				throw new js__$Boot_HaxeError("Error: This Vec2 is not disposable");
			}
			var inner = position.zpp_inner;
			position.zpp_inner.outer = null;
			position.zpp_inner = null;
			var o = position;
			o.zpp_pool = null;
			if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
			} else {
				zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
			}
			zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
			o.zpp_disp = true;
			var o1 = inner;
			if(o1.outer != null) {
				o1.outer.zpp_inner = null;
				o1.outer = null;
			}
			o1._isimmutable = null;
			o1._validate = null;
			o1._invalidate = null;
			o1.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o1;
		}
	}
	this.zpp_inner_i.insert_cbtype(zpp_$nape_callbacks_ZPP_$CbType.ANY_BODY.zpp_inner);
};
nape_phys_Body.__name__ = true;
nape_phys_Body.__super__ = nape_phys_Interactor;
nape_phys_Body.prototype = $extend(nape_phys_Interactor.prototype,{
	setShapeMaterials: function(material) {
		this.zpp_inner.immutable_midstep("Body::setShapeMaterials()");
		if(this.zpp_inner.world) {
			throw new js__$Boot_HaxeError("Error: Space::world is immutable");
		}
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			var _this = s.outer;
			_this.zpp_inner.immutable_midstep("Shape::material");
			if(material == null) {
				throw new js__$Boot_HaxeError("Error: Cannot assign null as Shape material");
			}
			_this.zpp_inner.setMaterial(material.zpp_inner);
			_this.zpp_inner.material.wrapper();
			cx_ite = cx_ite.next;
		}
		return this;
	}
	,toString: function() {
		return (this.zpp_inner.world ? "(space::world" : "(" + (this.zpp_inner.type == 2 ? "dynamic" : this.zpp_inner.type == 1 ? "static" : "kinematic")) + ")#" + this.zpp_inner_i.id;
	}
	,__class__: nape_phys_Body
});
var nape_phys_BodyIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$BodyList.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "Body" + "Iterator derp!");
	}
};
nape_phys_BodyIterator.__name__ = true;
nape_phys_BodyIterator.get = function(list) {
	var ret;
	if(nape_phys_BodyIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$BodyList.internal = true;
		var ret1 = new nape_phys_BodyIterator();
		zpp_$nape_util_ZPP_$BodyList.internal = false;
		ret = ret1;
	} else {
		var r = nape_phys_BodyIterator.zpp_pool;
		nape_phys_BodyIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_phys_BodyIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_phys_BodyIterator.zpp_pool;
			nape_phys_BodyIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_phys_BodyIterator
};
var nape_phys_BodyList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$BodyList();
	this.zpp_inner.outer = this;
};
nape_phys_BodyList.__name__ = true;
nape_phys_BodyList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		var tmp;
		if(index >= 0) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			tmp = index >= this.zpp_inner.user_length;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) {
			throw new js__$Boot_HaxeError("Error: " + "Body" + "List is immutable");
		}
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				this.zpp_inner.inner.add(obj.zpp_inner);
			} else {
				if(this.zpp_inner.push_ite == null) {
					var tmp;
					if(this.zpp_inner.inner.head == null) {
						tmp = null;
					} else {
						var tmp1 = this.zpp_inner.inner;
						this.zpp_inner.valmod();
						if(this.zpp_inner.zip_length) {
							this.zpp_inner.zip_length = false;
							this.zpp_inner.user_length = this.zpp_inner.inner.length;
						}
						tmp = tmp1.iterator_at(this.zpp_inner.user_length - 1);
					}
					this.zpp_inner.push_ite = tmp;
				}
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) {
			throw new js__$Boot_HaxeError("Error: " + "Body" + "List is immutable");
		}
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) {
					var tmp;
					if(this.zpp_inner.inner.head == null) {
						tmp = null;
					} else {
						var tmp1 = this.zpp_inner.inner;
						this.zpp_inner.valmod();
						if(this.zpp_inner.zip_length) {
							this.zpp_inner.zip_length = false;
							this.zpp_inner.user_length = this.zpp_inner.inner.length;
						}
						tmp = tmp1.iterator_at(this.zpp_inner.user_length - 1);
					}
					this.zpp_inner.push_ite = tmp;
				}
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else {
				this.zpp_inner.inner.add(obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) {
			throw new js__$Boot_HaxeError("Error: " + "Body" + "List is immutable");
		}
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) {
				this.zpp_inner.subber(obj);
			}
			if(!this.zpp_inner.dontremove) {
				this.zpp_inner.inner.remove(obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_phys_BodyIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_phys_BodyIterator.zpp_pool;
				nape_phys_BodyIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_phys_BodyList
};
var nape_phys_BodyType = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "BodyType" + " derp!");
	}
};
nape_phys_BodyType.__name__ = true;
nape_phys_BodyType.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.BodyType_STATIC == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.BodyType_STATIC = new nape_phys_BodyType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.BodyType_STATIC) {
			return "STATIC";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC) {
				return "DYNAMIC";
			} else {
				if(zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC = new nape_phys_BodyType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(this == zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC) {
					return "KINEMATIC";
				} else {
					return "";
				}
			}
		}
	}
	,__class__: nape_phys_BodyType
};
var nape_phys_Compound = function() {
	this.zpp_inner = null;
	nape_phys_Interactor.zpp_internalAlloc = true;
	nape_phys_Interactor.call(this);
	nape_phys_Interactor.zpp_internalAlloc = false;
	this.zpp_inner = new zpp_$nape_phys_ZPP_$Compound();
	this.zpp_inner.outer = this;
	this.zpp_inner.outer_i = this;
	this.zpp_inner_i = this.zpp_inner;
	this.zpp_inner.insert_cbtype(zpp_$nape_callbacks_ZPP_$CbType.ANY_COMPOUND.zpp_inner);
};
nape_phys_Compound.__name__ = true;
nape_phys_Compound.__super__ = nape_phys_Interactor;
nape_phys_Compound.prototype = $extend(nape_phys_Interactor.prototype,{
	toString: function() {
		return "Compound" + this.zpp_inner_i.id;
	}
	,__class__: nape_phys_Compound
});
var nape_phys_CompoundIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$CompoundList.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "Compound" + "Iterator derp!");
	}
};
nape_phys_CompoundIterator.__name__ = true;
nape_phys_CompoundIterator.get = function(list) {
	var ret;
	if(nape_phys_CompoundIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$CompoundList.internal = true;
		var ret1 = new nape_phys_CompoundIterator();
		zpp_$nape_util_ZPP_$CompoundList.internal = false;
		ret = ret1;
	} else {
		var r = nape_phys_CompoundIterator.zpp_pool;
		nape_phys_CompoundIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_phys_CompoundIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_phys_CompoundIterator.zpp_pool;
			nape_phys_CompoundIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_phys_CompoundIterator
};
var nape_phys_CompoundList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$CompoundList();
	this.zpp_inner.outer = this;
};
nape_phys_CompoundList.__name__ = true;
nape_phys_CompoundList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		var tmp;
		if(index >= 0) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			tmp = index >= this.zpp_inner.user_length;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) {
			throw new js__$Boot_HaxeError("Error: " + "Compound" + "List is immutable");
		}
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) {
				this.zpp_inner.subber(obj);
			}
			if(!this.zpp_inner.dontremove) {
				this.zpp_inner.inner.remove(obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_phys_CompoundIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_phys_CompoundIterator.zpp_pool;
				nape_phys_CompoundIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_phys_CompoundList
};
var nape_phys_FluidProperties = function(density,viscosity) {
	if(viscosity == null) {
		viscosity = 1;
	}
	if(density == null) {
		density = 1;
	}
	this.zpp_inner = null;
	if(zpp_$nape_phys_ZPP_$FluidProperties.zpp_pool == null) {
		this.zpp_inner = new zpp_$nape_phys_ZPP_$FluidProperties();
	} else {
		this.zpp_inner = zpp_$nape_phys_ZPP_$FluidProperties.zpp_pool;
		zpp_$nape_phys_ZPP_$FluidProperties.zpp_pool = this.zpp_inner.next;
		this.zpp_inner.next = null;
	}
	var _this = this.zpp_inner;
	this.zpp_inner.outer = this;
	if(density != this.zpp_inner.density * 1000) {
		if(density != density) {
			throw new js__$Boot_HaxeError("Error: FluidProperties::" + "density" + " cannot be NaN");
		}
		this.zpp_inner.density = density / 1000;
		this.zpp_inner.invalidate();
	}
	if(viscosity != this.zpp_inner.viscosity) {
		if(viscosity != viscosity) {
			throw new js__$Boot_HaxeError("Error: FluidProperties::" + "viscosity" + " cannot be NaN");
		}
		if(viscosity < 0) {
			throw new js__$Boot_HaxeError("Error: FluidProperties::" + "viscosity" + " (" + viscosity + ") must be >= 0");
		}
		this.zpp_inner.viscosity = viscosity / 1;
		this.zpp_inner.invalidate();
	}
};
nape_phys_FluidProperties.__name__ = true;
nape_phys_FluidProperties.prototype = {
	toString: function() {
		return "{ density: " + this.zpp_inner.density * 1000 + " viscosity: " + this.zpp_inner.viscosity + " gravity: " + Std.string(this.zpp_inner.wrap_gravity) + " }";
	}
	,__class__: nape_phys_FluidProperties
};
var nape_phys_GravMassMode = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "GravMassMode" + " derp!");
	}
};
nape_phys_GravMassMode.__name__ = true;
nape_phys_GravMassMode.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT = new nape_phys_GravMassMode();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT) {
			return "DEFAULT";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.GravMassMode_FIXED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.GravMassMode_FIXED = new nape_phys_GravMassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.GravMassMode_FIXED) {
				return "FIXED";
			} else {
				if(zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED = new nape_phys_GravMassMode();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(this == zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED) {
					return "SCALED";
				} else {
					return "";
				}
			}
		}
	}
	,__class__: nape_phys_GravMassMode
};
var nape_phys_InertiaMode = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "InertiaMode" + " derp!");
	}
};
nape_phys_InertiaMode.__name__ = true;
nape_phys_InertiaMode.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.InertiaMode_DEFAULT == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InertiaMode_DEFAULT = new nape_phys_InertiaMode();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.InertiaMode_DEFAULT) {
			return "DEFAULT";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED = new nape_phys_InertiaMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED) {
				return "FIXED";
			} else {
				return "";
			}
		}
	}
	,__class__: nape_phys_InertiaMode
};
var nape_phys_InteractorIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$InteractorList.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "Interactor" + "Iterator derp!");
	}
};
nape_phys_InteractorIterator.__name__ = true;
nape_phys_InteractorIterator.get = function(list) {
	var ret;
	if(nape_phys_InteractorIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$InteractorList.internal = true;
		var ret1 = new nape_phys_InteractorIterator();
		zpp_$nape_util_ZPP_$InteractorList.internal = false;
		ret = ret1;
	} else {
		var r = nape_phys_InteractorIterator.zpp_pool;
		nape_phys_InteractorIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_phys_InteractorIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_phys_InteractorIterator.zpp_pool;
			nape_phys_InteractorIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_phys_InteractorIterator
};
var nape_phys_InteractorList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$InteractorList();
	this.zpp_inner.outer = this;
};
nape_phys_InteractorList.__name__ = true;
nape_phys_InteractorList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		var tmp;
		if(index >= 0) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			tmp = index >= this.zpp_inner.user_length;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.outer_i;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_phys_InteractorIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_phys_InteractorIterator.zpp_pool;
				nape_phys_InteractorIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_phys_InteractorList
};
var nape_phys_MassMode = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "MassMode" + " derp!");
	}
};
nape_phys_MassMode.__name__ = true;
nape_phys_MassMode.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT = new nape_phys_MassMode();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT) {
			return "DEFAULT";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.MassMode_FIXED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.MassMode_FIXED = new nape_phys_MassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.MassMode_FIXED) {
				return "FIXED";
			} else {
				return "";
			}
		}
	}
	,__class__: nape_phys_MassMode
};
var nape_phys_Material = function(elasticity,dynamicFriction,staticFriction,density,rollingFriction) {
	if(rollingFriction == null) {
		rollingFriction = 0.001;
	}
	if(density == null) {
		density = 1;
	}
	if(staticFriction == null) {
		staticFriction = 2.0;
	}
	if(dynamicFriction == null) {
		dynamicFriction = 1.0;
	}
	if(elasticity == null) {
		elasticity = 0.0;
	}
	this.zpp_inner = null;
	if(zpp_$nape_phys_ZPP_$Material.zpp_pool == null) {
		this.zpp_inner = new zpp_$nape_phys_ZPP_$Material();
	} else {
		this.zpp_inner = zpp_$nape_phys_ZPP_$Material.zpp_pool;
		zpp_$nape_phys_ZPP_$Material.zpp_pool = this.zpp_inner.next;
		this.zpp_inner.next = null;
	}
	var _this = this.zpp_inner;
	this.zpp_inner.outer = this;
	if(elasticity != this.zpp_inner.elasticity) {
		if(elasticity != elasticity) {
			throw new js__$Boot_HaxeError("Error: Material::" + "elasticity" + " cannot be NaN");
		}
		this.zpp_inner.elasticity = elasticity / 1;
		this.zpp_inner.invalidate(zpp_$nape_phys_ZPP_$Material.WAKE | zpp_$nape_phys_ZPP_$Material.ARBITERS);
	}
	if(dynamicFriction != this.zpp_inner.dynamicFriction) {
		if(dynamicFriction != dynamicFriction) {
			throw new js__$Boot_HaxeError("Error: Material::" + "dynamicFriction" + " cannot be NaN");
		}
		if(dynamicFriction < 0) {
			throw new js__$Boot_HaxeError("Error: Material::" + "dynamicFriction" + " cannot be negative");
		}
		this.zpp_inner.dynamicFriction = dynamicFriction / 1;
		this.zpp_inner.invalidate(zpp_$nape_phys_ZPP_$Material.WAKE | zpp_$nape_phys_ZPP_$Material.ANGDRAG | zpp_$nape_phys_ZPP_$Material.ARBITERS);
	}
	if(staticFriction != this.zpp_inner.staticFriction) {
		if(staticFriction != staticFriction) {
			throw new js__$Boot_HaxeError("Error: Material::" + "staticFriction" + " cannot be NaN");
		}
		if(staticFriction < 0) {
			throw new js__$Boot_HaxeError("Error: Material::" + "staticFriction" + " cannot be negative");
		}
		this.zpp_inner.staticFriction = staticFriction / 1;
		this.zpp_inner.invalidate(zpp_$nape_phys_ZPP_$Material.WAKE | zpp_$nape_phys_ZPP_$Material.ARBITERS);
	}
	if(density != this.zpp_inner.density * 1000) {
		if(density != density) {
			throw new js__$Boot_HaxeError("Error: Material::" + "density" + " cannot be NaN");
		}
		if(density < 0) {
			throw new js__$Boot_HaxeError("Error: Material::density must be positive");
		}
		if(density < 0) {
			throw new js__$Boot_HaxeError("Error: Material::" + "density" + " cannot be negative");
		}
		this.zpp_inner.density = density / 1000;
		this.zpp_inner.invalidate(zpp_$nape_phys_ZPP_$Material.WAKE | zpp_$nape_phys_ZPP_$Material.PROPS);
	}
	if(rollingFriction != this.zpp_inner.rollingFriction) {
		if(rollingFriction != rollingFriction) {
			throw new js__$Boot_HaxeError("Error: Material::" + "rollingFriction" + " cannot be NaN");
		}
		if(rollingFriction < 0) {
			throw new js__$Boot_HaxeError("Error: Material::" + "rollingFriction" + " cannot be negative");
		}
		this.zpp_inner.rollingFriction = rollingFriction / 1;
		this.zpp_inner.invalidate(zpp_$nape_phys_ZPP_$Material.WAKE | zpp_$nape_phys_ZPP_$Material.ARBITERS);
	}
};
nape_phys_Material.__name__ = true;
nape_phys_Material.wood = function() {
	return new nape_phys_Material(0.4,0.2,0.38,0.7,0.005);
};
nape_phys_Material.rubber = function() {
	return new nape_phys_Material(0.8,1.0,1.4,1.5,0.01);
};
nape_phys_Material.prototype = {
	toString: function() {
		return "{ elasticity: " + this.zpp_inner.elasticity + " dynamicFriction: " + this.zpp_inner.dynamicFriction + " staticFriction: " + this.zpp_inner.staticFriction + " density: " + this.zpp_inner.density * 1000 + " rollingFriction: " + this.zpp_inner.rollingFriction + " }";
	}
	,__class__: nape_phys_Material
};
var nape_shape_Shape = function() {
	this.zpp_inner = null;
	nape_phys_Interactor.zpp_internalAlloc = true;
	nape_phys_Interactor.call(this);
	nape_phys_Interactor.zpp_internalAlloc = false;
	if(!nape_shape_Shape.zpp_internalAlloc) {
		throw new js__$Boot_HaxeError("Error: Shape cannot be instantiated derp!");
	}
};
nape_shape_Shape.__name__ = true;
nape_shape_Shape.__super__ = nape_phys_Interactor;
nape_shape_Shape.prototype = $extend(nape_phys_Interactor.prototype,{
	toString: function() {
		var ret = this.zpp_inner.type == 0 ? "Circle" : "Polygon";
		return ret + "#" + this.zpp_inner_i.id;
	}
	,__class__: nape_shape_Shape
});
var nape_shape_Circle = function(radius,localCOM,material,filter) {
	this.zpp_inner_zn = null;
	nape_shape_Shape.zpp_internalAlloc = true;
	nape_shape_Shape.call(this);
	nape_shape_Shape.zpp_internalAlloc = false;
	this.zpp_inner_zn = new zpp_$nape_shape_ZPP_$Circle();
	this.zpp_inner_zn.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner_i = this.zpp_inner;
	this.zpp_inner_i.outer_i = this;
	this.zpp_inner.immutable_midstep("Circle::radius");
	if(this.zpp_inner.body != null && this.zpp_inner.body.type == 1 && this.zpp_inner.body.space != null) {
		throw new js__$Boot_HaxeError("Error: Cannot modifiy radius of Circle contained in static object once added to space");
	}
	if(radius != this.zpp_inner_zn.radius) {
		if(radius != radius) {
			throw new js__$Boot_HaxeError("Error: Circle::radius cannot be NaN");
		}
		if(radius < nape_Config.epsilon) {
			throw new js__$Boot_HaxeError("Error: Circle::radius (" + radius + ") must be > Config.epsilon");
		}
		if(radius > 1e100) {
			throw new js__$Boot_HaxeError("Error: Circle::radius (" + radius + ") must be < PR(Const).FMAX");
		}
		this.zpp_inner_zn.radius = radius;
		this.zpp_inner_zn.invalidate_radius();
	}
	if(localCOM == null) {
		this.zpp_inner.localCOMx = 0;
		this.zpp_inner.localCOMy = 0;
	} else {
		if(localCOM != null && localCOM.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		if(localCOM != null && localCOM.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = localCOM.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		this.zpp_inner.localCOMx = localCOM.zpp_inner.x;
		if(localCOM != null && localCOM.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = localCOM.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		this.zpp_inner.localCOMy = localCOM.zpp_inner.y;
		if(localCOM.zpp_inner.weak) {
			if(localCOM != null && localCOM.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = localCOM.zpp_inner;
			if(_this2._immutable) {
				throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
			}
			if(_this2._isimmutable != null) {
				_this2._isimmutable();
			}
			if(localCOM.zpp_inner._inuse) {
				throw new js__$Boot_HaxeError("Error: This Vec2 is not disposable");
			}
			var inner = localCOM.zpp_inner;
			localCOM.zpp_inner.outer = null;
			localCOM.zpp_inner = null;
			var o = localCOM;
			o.zpp_pool = null;
			if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
			} else {
				zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
			}
			zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
			o.zpp_disp = true;
			var o1 = inner;
			if(o1.outer != null) {
				o1.outer.zpp_inner = null;
				o1.outer = null;
			}
			o1._isimmutable = null;
			o1._validate = null;
			o1._invalidate = null;
			o1.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o1;
		}
	}
	if(material == null) {
		if(zpp_$nape_phys_ZPP_$Material.zpp_pool == null) {
			this.zpp_inner.material = new zpp_$nape_phys_ZPP_$Material();
		} else {
			this.zpp_inner.material = zpp_$nape_phys_ZPP_$Material.zpp_pool;
			zpp_$nape_phys_ZPP_$Material.zpp_pool = this.zpp_inner.material.next;
			this.zpp_inner.material.next = null;
		}
		var _this3 = this.zpp_inner.material;
	} else {
		this.zpp_inner.immutable_midstep("Shape::material");
		if(material == null) {
			throw new js__$Boot_HaxeError("Error: Cannot assign null as Shape material");
		}
		this.zpp_inner.setMaterial(material.zpp_inner);
		this.zpp_inner.material.wrapper();
	}
	if(filter == null) {
		if(zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool == null) {
			this.zpp_inner.filter = new zpp_$nape_dynamics_ZPP_$InteractionFilter();
		} else {
			this.zpp_inner.filter = zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool;
			zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool = this.zpp_inner.filter.next;
			this.zpp_inner.filter.next = null;
		}
		var _this4 = this.zpp_inner.filter;
	} else {
		this.zpp_inner.immutable_midstep("Shape::filter");
		if(filter == null) {
			throw new js__$Boot_HaxeError("Error: Cannot assign null as Shape filter");
		}
		this.zpp_inner.setFilter(filter.zpp_inner);
		this.zpp_inner.filter.wrapper();
	}
	this.zpp_inner_i.insert_cbtype(zpp_$nape_callbacks_ZPP_$CbType.ANY_SHAPE.zpp_inner);
};
nape_shape_Circle.__name__ = true;
nape_shape_Circle.__super__ = nape_shape_Shape;
nape_shape_Circle.prototype = $extend(nape_shape_Shape.prototype,{
	__class__: nape_shape_Circle
});
var nape_shape_Edge = function() {
	this.zpp_inner = null;
	if(!zpp_$nape_shape_ZPP_$Edge.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate an Edge derp!");
	}
};
nape_shape_Edge.__name__ = true;
nape_shape_Edge.prototype = {
	toString: function() {
		if(this.zpp_inner.polygon == null) {
			return "Edge(object-pooled)";
		} else if(this.zpp_inner.polygon.body == null) {
			this.zpp_inner.polygon.validate_laxi();
			return "{ localNormal : " + ("{ x: " + this.zpp_inner.lnormx + " y: " + this.zpp_inner.lnormy + " }") + " }";
		} else {
			var _this = this.zpp_inner.polygon;
			if(_this.zip_gaxi) {
				if(_this.body != null) {
					_this.zip_gaxi = false;
					_this.validate_laxi();
					var _this1 = _this.body;
					if(_this1.zip_axis) {
						_this1.zip_axis = false;
						_this1.axisx = Math.sin(_this1.rot);
						_this1.axisy = Math.cos(_this1.rot);
					}
					if(_this.zip_gverts) {
						if(_this.body != null) {
							_this.zip_gverts = false;
							_this.validate_lverts();
							var _this2 = _this.body;
							if(_this2.zip_axis) {
								_this2.zip_axis = false;
								_this2.axisx = Math.sin(_this2.rot);
								_this2.axisy = Math.cos(_this2.rot);
							}
							var li = _this.lverts.next;
							var cx_ite = _this.gverts.next;
							while(cx_ite != null) {
								var g = cx_ite;
								var l = li;
								li = li.next;
								g.x = _this.body.posx + (_this.body.axisy * l.x - _this.body.axisx * l.y);
								g.y = _this.body.posy + (l.x * _this.body.axisx + l.y * _this.body.axisy);
								cx_ite = cx_ite.next;
							}
						}
					}
					var ite = _this.edges.head;
					var cx_ite1 = _this.gverts.next;
					var u = cx_ite1;
					cx_ite1 = cx_ite1.next;
					while(cx_ite1 != null) {
						var v = cx_ite1;
						var e = ite.elt;
						ite = ite.next;
						e.gp0 = u;
						e.gp1 = v;
						e.gnormx = _this.body.axisy * e.lnormx - _this.body.axisx * e.lnormy;
						e.gnormy = e.lnormx * _this.body.axisx + e.lnormy * _this.body.axisy;
						e.gprojection = _this.body.posx * e.gnormx + _this.body.posy * e.gnormy + e.lprojection;
						if(e.wrap_gnorm != null) {
							e.wrap_gnorm.zpp_inner.x = e.gnormx;
							e.wrap_gnorm.zpp_inner.y = e.gnormy;
						}
						e.tp0 = e.gp0.y * e.gnormx - e.gp0.x * e.gnormy;
						e.tp1 = e.gp1.y * e.gnormx - e.gp1.x * e.gnormy;
						u = v;
						cx_ite1 = cx_ite1.next;
					}
					var v1 = _this.gverts.next;
					var e1 = ite.elt;
					ite = ite.next;
					e1.gp0 = u;
					e1.gp1 = v1;
					e1.gnormx = _this.body.axisy * e1.lnormx - _this.body.axisx * e1.lnormy;
					e1.gnormy = e1.lnormx * _this.body.axisx + e1.lnormy * _this.body.axisy;
					e1.gprojection = _this.body.posx * e1.gnormx + _this.body.posy * e1.gnormy + e1.lprojection;
					if(e1.wrap_gnorm != null) {
						e1.wrap_gnorm.zpp_inner.x = e1.gnormx;
						e1.wrap_gnorm.zpp_inner.y = e1.gnormy;
					}
					e1.tp0 = e1.gp0.y * e1.gnormx - e1.gp0.x * e1.gnormy;
					e1.tp1 = e1.gp1.y * e1.gnormx - e1.gp1.x * e1.gnormy;
				}
			}
			return "{ localNormal : " + ("{ x: " + this.zpp_inner.lnormx + " y: " + this.zpp_inner.lnormy + " }") + " worldNormal : " + ("{ x: " + this.zpp_inner.gnormx + " y: " + this.zpp_inner.gnormy + " }") + " }";
		}
	}
	,__class__: nape_shape_Edge
};
var nape_shape_EdgeIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$EdgeList.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "Edge" + "Iterator derp!");
	}
};
nape_shape_EdgeIterator.__name__ = true;
nape_shape_EdgeIterator.get = function(list) {
	var ret;
	if(nape_shape_EdgeIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$EdgeList.internal = true;
		var ret1 = new nape_shape_EdgeIterator();
		zpp_$nape_util_ZPP_$EdgeList.internal = false;
		ret = ret1;
	} else {
		var r = nape_shape_EdgeIterator.zpp_pool;
		nape_shape_EdgeIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_shape_EdgeIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_shape_EdgeIterator.zpp_pool;
			nape_shape_EdgeIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_shape_EdgeIterator
};
var nape_shape_EdgeList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$EdgeList();
	this.zpp_inner.outer = this;
};
nape_shape_EdgeList.__name__ = true;
nape_shape_EdgeList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		var tmp;
		if(index >= 0) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			tmp = index >= this.zpp_inner.user_length;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			if(index == this.zpp_inner.user_length - 1) {
				index = index;
			} else {
				this.zpp_inner.valmod();
				if(this.zpp_inner.zip_length) {
					this.zpp_inner.zip_length = false;
					this.zpp_inner.user_length = this.zpp_inner.inner.length;
				}
				index = this.zpp_inner.user_length - 2 - index;
			}
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.wrapper();
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_shape_EdgeIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_shape_EdgeIterator.zpp_pool;
				nape_shape_EdgeIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_shape_EdgeList
};
var nape_shape_Polygon = function(localVerts,material,filter) {
	this.zpp_inner_zn = null;
	nape_shape_Shape.zpp_internalAlloc = true;
	nape_shape_Shape.call(this);
	nape_shape_Shape.zpp_internalAlloc = false;
	if(localVerts == null) {
		throw new js__$Boot_HaxeError("Error: localVerts cannot be null");
	}
	this.zpp_inner_zn = new zpp_$nape_shape_ZPP_$Polygon();
	this.zpp_inner_zn.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner_i = this.zpp_inner;
	this.zpp_inner_i.outer_i = this;
	if((localVerts instanceof Array) && localVerts.__enum__ == null) {
		var lv = localVerts;
		var _g = 0;
		while(_g < lv.length) {
			var vite = lv[_g];
			++_g;
			if(vite == null) {
				throw new js__$Boot_HaxeError("Error: Array<Vec2> contains null objects");
			}
			if(!js_Boot.__instanceof(vite,nape_geom_Vec2)) {
				throw new js__$Boot_HaxeError("Error: Array<Vec2> contains non Vec2 objects");
			}
			var x = vite;
			if(x != null && x.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			if(this.zpp_inner_zn.wrap_lverts == null) {
				this.zpp_inner_zn.getlverts();
			}
			var tmp = this.zpp_inner_zn.wrap_lverts;
			if(x != null && x.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			if(x.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = x.zpp_inner;
			if(_this._validate != null) {
				_this._validate();
			}
			var x1 = x.zpp_inner.x;
			if(x.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = x.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			var y = x.zpp_inner.y;
			if(x1 != x1 || y != y) {
				throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
			}
			var ret;
			if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
				ret = new nape_geom_Vec2();
			} else {
				ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
				zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
				ret.zpp_pool = null;
				ret.zpp_disp = false;
				if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
					zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
				}
			}
			if(ret.zpp_inner == null) {
				var ret1;
				if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
					ret1 = new zpp_$nape_geom_ZPP_$Vec2();
				} else {
					ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
					zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
					ret1.next = null;
				}
				ret1.weak = false;
				ret1._immutable = false;
				ret1.x = x1;
				ret1.y = y;
				ret.zpp_inner = ret1;
				ret.zpp_inner.outer = ret;
			} else {
				if(ret != null && ret.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = ret.zpp_inner;
				if(_this2._immutable) {
					throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
				}
				if(_this2._isimmutable != null) {
					_this2._isimmutable();
				}
				if(x1 != x1 || y != y) {
					throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
				}
				var tmp1;
				if(ret != null && ret.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this3 = ret.zpp_inner;
				if(_this3._validate != null) {
					_this3._validate();
				}
				if(ret.zpp_inner.x == x1) {
					if(ret != null && ret.zpp_disp) {
						throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this4 = ret.zpp_inner;
					if(_this4._validate != null) {
						_this4._validate();
					}
					tmp1 = ret.zpp_inner.y == y;
				} else {
					tmp1 = false;
				}
				if(!tmp1) {
					ret.zpp_inner.x = x1;
					ret.zpp_inner.y = y;
					var _this5 = ret.zpp_inner;
					if(_this5._invalidate != null) {
						_this5._invalidate(_this5);
					}
				}
			}
			ret.zpp_inner.weak = false;
			tmp.push(ret);
		}
	} else if(js_Boot.__instanceof(localVerts,nape_geom_Vec2List)) {
		var lv1 = localVerts;
		var _g1 = lv1.iterator();
		while(true) {
			_g1.zpp_inner.zpp_inner.valmod();
			var length = _g1.zpp_inner.zpp_gl();
			_g1.zpp_critical = true;
			var tmp2;
			if(_g1.zpp_i < length) {
				tmp2 = true;
			} else {
				_g1.zpp_next = nape_geom_Vec2Iterator.zpp_pool;
				nape_geom_Vec2Iterator.zpp_pool = _g1;
				_g1.zpp_inner = null;
				tmp2 = false;
			}
			if(!tmp2) {
				break;
			}
			_g1.zpp_critical = false;
			var x2 = _g1.zpp_inner.at(_g1.zpp_i++);
			if(x2 == null) {
				throw new js__$Boot_HaxeError("Error: Vec2List contains null objects");
			}
			if(x2 != null && x2.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			if(this.zpp_inner_zn.wrap_lverts == null) {
				this.zpp_inner_zn.getlverts();
			}
			var tmp3 = this.zpp_inner_zn.wrap_lverts;
			if(x2 != null && x2.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			if(x2.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this6 = x2.zpp_inner;
			if(_this6._validate != null) {
				_this6._validate();
			}
			var x3 = x2.zpp_inner.x;
			if(x2.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this7 = x2.zpp_inner;
			if(_this7._validate != null) {
				_this7._validate();
			}
			var y1 = x2.zpp_inner.y;
			if(x3 != x3 || y1 != y1) {
				throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
			}
			var ret2;
			if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
				ret2 = new nape_geom_Vec2();
			} else {
				ret2 = zpp_$nape_util_ZPP_$PubPool.poolVec2;
				zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret2.zpp_pool;
				ret2.zpp_pool = null;
				ret2.zpp_disp = false;
				if(ret2 == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
					zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
				}
			}
			if(ret2.zpp_inner == null) {
				var ret3;
				if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
					ret3 = new zpp_$nape_geom_ZPP_$Vec2();
				} else {
					ret3 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
					zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret3.next;
					ret3.next = null;
				}
				ret3.weak = false;
				ret3._immutable = false;
				ret3.x = x3;
				ret3.y = y1;
				ret2.zpp_inner = ret3;
				ret2.zpp_inner.outer = ret2;
			} else {
				if(ret2 != null && ret2.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this8 = ret2.zpp_inner;
				if(_this8._immutable) {
					throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
				}
				if(_this8._isimmutable != null) {
					_this8._isimmutable();
				}
				if(x3 != x3 || y1 != y1) {
					throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
				}
				var tmp4;
				if(ret2 != null && ret2.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this9 = ret2.zpp_inner;
				if(_this9._validate != null) {
					_this9._validate();
				}
				if(ret2.zpp_inner.x == x3) {
					if(ret2 != null && ret2.zpp_disp) {
						throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this10 = ret2.zpp_inner;
					if(_this10._validate != null) {
						_this10._validate();
					}
					tmp4 = ret2.zpp_inner.y == y1;
				} else {
					tmp4 = false;
				}
				if(!tmp4) {
					ret2.zpp_inner.x = x3;
					ret2.zpp_inner.y = y1;
					var _this11 = ret2.zpp_inner;
					if(_this11._invalidate != null) {
						_this11._invalidate(_this11);
					}
				}
			}
			ret2.zpp_inner.weak = false;
			tmp3.push(ret2);
		}
	} else if(js_Boot.__instanceof(localVerts,nape_geom_GeomPoly)) {
		var lv2 = localVerts;
		if(lv2 != null && lv2.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		}
		var verts = lv2.zpp_inner.vertices;
		if(verts != null) {
			var vite1 = verts;
			while(true) {
				var x4 = vite1.x;
				var y2 = vite1.y;
				if(x4 != x4 || y2 != y2) {
					throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
				}
				var ret4;
				if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
					ret4 = new nape_geom_Vec2();
				} else {
					ret4 = zpp_$nape_util_ZPP_$PubPool.poolVec2;
					zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret4.zpp_pool;
					ret4.zpp_pool = null;
					ret4.zpp_disp = false;
					if(ret4 == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
						zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
					}
				}
				if(ret4.zpp_inner == null) {
					var ret5;
					if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
						ret5 = new zpp_$nape_geom_ZPP_$Vec2();
					} else {
						ret5 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
						zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret5.next;
						ret5.next = null;
					}
					ret5.weak = false;
					ret5._immutable = false;
					ret5.x = x4;
					ret5.y = y2;
					ret4.zpp_inner = ret5;
					ret4.zpp_inner.outer = ret4;
				} else {
					if(ret4 != null && ret4.zpp_disp) {
						throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this12 = ret4.zpp_inner;
					if(_this12._immutable) {
						throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
					}
					if(_this12._isimmutable != null) {
						_this12._isimmutable();
					}
					if(x4 != x4 || y2 != y2) {
						throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
					}
					var tmp5;
					if(ret4 != null && ret4.zpp_disp) {
						throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this13 = ret4.zpp_inner;
					if(_this13._validate != null) {
						_this13._validate();
					}
					if(ret4.zpp_inner.x == x4) {
						if(ret4 != null && ret4.zpp_disp) {
							throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
						}
						var _this14 = ret4.zpp_inner;
						if(_this14._validate != null) {
							_this14._validate();
						}
						tmp5 = ret4.zpp_inner.y == y2;
					} else {
						tmp5 = false;
					}
					if(!tmp5) {
						ret4.zpp_inner.x = x4;
						ret4.zpp_inner.y = y2;
						var _this15 = ret4.zpp_inner;
						if(_this15._invalidate != null) {
							_this15._invalidate(_this15);
						}
					}
				}
				ret4.zpp_inner.weak = false;
				var x5 = ret4;
				vite1 = vite1.next;
				if(this.zpp_inner_zn.wrap_lverts == null) {
					this.zpp_inner_zn.getlverts();
				}
				var tmp6 = this.zpp_inner_zn.wrap_lverts;
				if(x5 != null && x5.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				if(x5.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this16 = x5.zpp_inner;
				if(_this16._validate != null) {
					_this16._validate();
				}
				var x6 = x5.zpp_inner.x;
				if(x5.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this17 = x5.zpp_inner;
				if(_this17._validate != null) {
					_this17._validate();
				}
				var y3 = x5.zpp_inner.y;
				if(x6 != x6 || y3 != y3) {
					throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
				}
				var ret6;
				if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
					ret6 = new nape_geom_Vec2();
				} else {
					ret6 = zpp_$nape_util_ZPP_$PubPool.poolVec2;
					zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret6.zpp_pool;
					ret6.zpp_pool = null;
					ret6.zpp_disp = false;
					if(ret6 == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
						zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
					}
				}
				if(ret6.zpp_inner == null) {
					var ret7;
					if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
						ret7 = new zpp_$nape_geom_ZPP_$Vec2();
					} else {
						ret7 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
						zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret7.next;
						ret7.next = null;
					}
					ret7.weak = false;
					ret7._immutable = false;
					ret7.x = x6;
					ret7.y = y3;
					ret6.zpp_inner = ret7;
					ret6.zpp_inner.outer = ret6;
				} else {
					if(ret6 != null && ret6.zpp_disp) {
						throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this18 = ret6.zpp_inner;
					if(_this18._immutable) {
						throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
					}
					if(_this18._isimmutable != null) {
						_this18._isimmutable();
					}
					if(x6 != x6 || y3 != y3) {
						throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
					}
					var tmp7;
					if(ret6 != null && ret6.zpp_disp) {
						throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this19 = ret6.zpp_inner;
					if(_this19._validate != null) {
						_this19._validate();
					}
					if(ret6.zpp_inner.x == x6) {
						if(ret6 != null && ret6.zpp_disp) {
							throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
						}
						var _this20 = ret6.zpp_inner;
						if(_this20._validate != null) {
							_this20._validate();
						}
						tmp7 = ret6.zpp_inner.y == y3;
					} else {
						tmp7 = false;
					}
					if(!tmp7) {
						ret6.zpp_inner.x = x6;
						ret6.zpp_inner.y = y3;
						var _this21 = ret6.zpp_inner;
						if(_this21._invalidate != null) {
							_this21._invalidate(_this21);
						}
					}
				}
				ret6.zpp_inner.weak = false;
				tmp6.push(ret6);
				if(x5 != null && x5.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this22 = x5.zpp_inner;
				if(_this22._immutable) {
					throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
				}
				if(_this22._isimmutable != null) {
					_this22._isimmutable();
				}
				if(x5.zpp_inner._inuse) {
					throw new js__$Boot_HaxeError("Error: This Vec2 is not disposable");
				}
				var inner = x5.zpp_inner;
				x5.zpp_inner.outer = null;
				x5.zpp_inner = null;
				var o = x5;
				o.zpp_pool = null;
				if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
					zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
				} else {
					zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
				}
				zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
				o.zpp_disp = true;
				var o1 = inner;
				if(o1.outer != null) {
					o1.outer.zpp_inner = null;
					o1.outer = null;
				}
				o1._isimmutable = null;
				o1._validate = null;
				o1._invalidate = null;
				o1.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o1;
				if(vite1 == verts) {
					break;
				}
			}
		}
	} else {
		throw new js__$Boot_HaxeError("Error: Invalid type for polygon object, should be Array<Vec2>, Vec2List, GeomPoly or for flash10+ flash.Vector<Vec2>");
	}
	if((localVerts instanceof Array) && localVerts.__enum__ == null) {
		var lv3 = localVerts;
		var i = 0;
		while(i < lv3.length) {
			var cur = lv3[i];
			var tmp8;
			if(cur.zpp_inner.weak) {
				if(cur != null && cur.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this23 = cur.zpp_inner;
				if(_this23._immutable) {
					throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
				}
				if(_this23._isimmutable != null) {
					_this23._isimmutable();
				}
				if(cur.zpp_inner._inuse) {
					throw new js__$Boot_HaxeError("Error: This Vec2 is not disposable");
				}
				var inner1 = cur.zpp_inner;
				cur.zpp_inner.outer = null;
				cur.zpp_inner = null;
				var o2 = cur;
				o2.zpp_pool = null;
				if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
					zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o2;
				} else {
					zpp_$nape_util_ZPP_$PubPool.poolVec2 = o2;
				}
				zpp_$nape_util_ZPP_$PubPool.nextVec2 = o2;
				o2.zpp_disp = true;
				var o3 = inner1;
				if(o3.outer != null) {
					o3.outer.zpp_inner = null;
					o3.outer = null;
				}
				o3._isimmutable = null;
				o3._validate = null;
				o3._invalidate = null;
				o3.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o3;
				tmp8 = true;
			} else {
				tmp8 = false;
			}
			if(tmp8) {
				lv3.splice(i,1);
				continue;
			}
			++i;
		}
	} else if(js_Boot.__instanceof(localVerts,nape_geom_Vec2List)) {
		var lv4 = localVerts;
		if(lv4.zpp_inner._validate != null) {
			lv4.zpp_inner._validate();
		}
		var ins = lv4.zpp_inner.inner;
		var pre = null;
		var cur1 = ins.head;
		while(cur1 != null) {
			var x7 = cur1.elt;
			if(x7.outer.zpp_inner.weak) {
				cur1 = ins.erase(pre);
				if(x7.outer.zpp_inner.weak) {
					var _this24 = x7.outer;
					if(_this24 != null && _this24.zpp_disp) {
						throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this25 = _this24.zpp_inner;
					if(_this25._immutable) {
						throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
					}
					if(_this25._isimmutable != null) {
						_this25._isimmutable();
					}
					if(_this24.zpp_inner._inuse) {
						throw new js__$Boot_HaxeError("Error: This Vec2 is not disposable");
					}
					var inner2 = _this24.zpp_inner;
					_this24.zpp_inner.outer = null;
					_this24.zpp_inner = null;
					var o4 = _this24;
					o4.zpp_pool = null;
					if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
						zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o4;
					} else {
						zpp_$nape_util_ZPP_$PubPool.poolVec2 = o4;
					}
					zpp_$nape_util_ZPP_$PubPool.nextVec2 = o4;
					o4.zpp_disp = true;
					var o5 = inner2;
					if(o5.outer != null) {
						o5.outer.zpp_inner = null;
						o5.outer = null;
					}
					o5._isimmutable = null;
					o5._validate = null;
					o5._invalidate = null;
					o5.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
					zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o5;
				}
			} else {
				pre = cur1;
				cur1 = cur1.next;
			}
		}
	}
	if(material == null) {
		if(zpp_$nape_phys_ZPP_$Material.zpp_pool == null) {
			this.zpp_inner.material = new zpp_$nape_phys_ZPP_$Material();
		} else {
			this.zpp_inner.material = zpp_$nape_phys_ZPP_$Material.zpp_pool;
			zpp_$nape_phys_ZPP_$Material.zpp_pool = this.zpp_inner.material.next;
			this.zpp_inner.material.next = null;
		}
		var _this26 = this.zpp_inner.material;
	} else {
		this.zpp_inner.immutable_midstep("Shape::material");
		if(material == null) {
			throw new js__$Boot_HaxeError("Error: Cannot assign null as Shape material");
		}
		this.zpp_inner.setMaterial(material.zpp_inner);
		this.zpp_inner.material.wrapper();
	}
	if(filter == null) {
		if(zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool == null) {
			this.zpp_inner.filter = new zpp_$nape_dynamics_ZPP_$InteractionFilter();
		} else {
			this.zpp_inner.filter = zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool;
			zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool = this.zpp_inner.filter.next;
			this.zpp_inner.filter.next = null;
		}
		var _this27 = this.zpp_inner.filter;
	} else {
		this.zpp_inner.immutable_midstep("Shape::filter");
		if(filter == null) {
			throw new js__$Boot_HaxeError("Error: Cannot assign null as Shape filter");
		}
		this.zpp_inner.setFilter(filter.zpp_inner);
		this.zpp_inner.filter.wrapper();
	}
	this.zpp_inner_i.insert_cbtype(zpp_$nape_callbacks_ZPP_$CbType.ANY_SHAPE.zpp_inner);
};
nape_shape_Polygon.__name__ = true;
nape_shape_Polygon.rect = function(x,y,width,height,weak) {
	if(weak == null) {
		weak = false;
	}
	if(x != x || y != y || width != width || height != height) {
		throw new js__$Boot_HaxeError("Error: Polygon.rect cannot accept NaN arguments");
	}
	if(x != x || y != y) {
		throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
		ret = new nape_geom_Vec2();
	} else {
		ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
		zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
			ret1 = new zpp_$nape_geom_ZPP_$Vec2();
		} else {
			ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(x != x || y != y) {
			throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = weak;
	var x1 = x + width;
	if(x1 != x1 || y != y) {
		throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret2;
	if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
		ret2 = new nape_geom_Vec2();
	} else {
		ret2 = zpp_$nape_util_ZPP_$PubPool.poolVec2;
		zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret2.zpp_pool;
		ret2.zpp_pool = null;
		ret2.zpp_disp = false;
		if(ret2 == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
		}
	}
	if(ret2.zpp_inner == null) {
		var ret3;
		if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
			ret3 = new zpp_$nape_geom_ZPP_$Vec2();
		} else {
			ret3 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret3.next;
			ret3.next = null;
		}
		ret3.weak = false;
		ret3._immutable = false;
		ret3.x = x1;
		ret3.y = y;
		ret2.zpp_inner = ret3;
		ret2.zpp_inner.outer = ret2;
	} else {
		if(ret2 != null && ret2.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this4 = ret2.zpp_inner;
		if(_this4._immutable) {
			throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
		}
		if(_this4._isimmutable != null) {
			_this4._isimmutable();
		}
		if(x1 != x1 || y != y) {
			throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp1;
		if(ret2 != null && ret2.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this5 = ret2.zpp_inner;
		if(_this5._validate != null) {
			_this5._validate();
		}
		if(ret2.zpp_inner.x == x1) {
			if(ret2 != null && ret2.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this6 = ret2.zpp_inner;
			if(_this6._validate != null) {
				_this6._validate();
			}
			tmp1 = ret2.zpp_inner.y == y;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			ret2.zpp_inner.x = x1;
			ret2.zpp_inner.y = y;
			var _this7 = ret2.zpp_inner;
			if(_this7._invalidate != null) {
				_this7._invalidate(_this7);
			}
		}
	}
	ret2.zpp_inner.weak = weak;
	var x2 = x + width;
	var y1 = y + height;
	if(x2 != x2 || y1 != y1) {
		throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret4;
	if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
		ret4 = new nape_geom_Vec2();
	} else {
		ret4 = zpp_$nape_util_ZPP_$PubPool.poolVec2;
		zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret4.zpp_pool;
		ret4.zpp_pool = null;
		ret4.zpp_disp = false;
		if(ret4 == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
		}
	}
	if(ret4.zpp_inner == null) {
		var ret5;
		if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
			ret5 = new zpp_$nape_geom_ZPP_$Vec2();
		} else {
			ret5 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret5.next;
			ret5.next = null;
		}
		ret5.weak = false;
		ret5._immutable = false;
		ret5.x = x2;
		ret5.y = y1;
		ret4.zpp_inner = ret5;
		ret4.zpp_inner.outer = ret4;
	} else {
		if(ret4 != null && ret4.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = ret4.zpp_inner;
		if(_this8._immutable) {
			throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(x2 != x2 || y1 != y1) {
			throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp2;
		if(ret4 != null && ret4.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this9 = ret4.zpp_inner;
		if(_this9._validate != null) {
			_this9._validate();
		}
		if(ret4.zpp_inner.x == x2) {
			if(ret4 != null && ret4.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this10 = ret4.zpp_inner;
			if(_this10._validate != null) {
				_this10._validate();
			}
			tmp2 = ret4.zpp_inner.y == y1;
		} else {
			tmp2 = false;
		}
		if(!tmp2) {
			ret4.zpp_inner.x = x2;
			ret4.zpp_inner.y = y1;
			var _this11 = ret4.zpp_inner;
			if(_this11._invalidate != null) {
				_this11._invalidate(_this11);
			}
		}
	}
	ret4.zpp_inner.weak = weak;
	var y2 = y + height;
	if(x != x || y2 != y2) {
		throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret6;
	if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
		ret6 = new nape_geom_Vec2();
	} else {
		ret6 = zpp_$nape_util_ZPP_$PubPool.poolVec2;
		zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret6.zpp_pool;
		ret6.zpp_pool = null;
		ret6.zpp_disp = false;
		if(ret6 == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
		}
	}
	if(ret6.zpp_inner == null) {
		var ret7;
		if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
			ret7 = new zpp_$nape_geom_ZPP_$Vec2();
		} else {
			ret7 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret7.next;
			ret7.next = null;
		}
		ret7.weak = false;
		ret7._immutable = false;
		ret7.x = x;
		ret7.y = y2;
		ret6.zpp_inner = ret7;
		ret6.zpp_inner.outer = ret6;
	} else {
		if(ret6 != null && ret6.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this12 = ret6.zpp_inner;
		if(_this12._immutable) {
			throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
		}
		if(_this12._isimmutable != null) {
			_this12._isimmutable();
		}
		if(x != x || y2 != y2) {
			throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp3;
		if(ret6 != null && ret6.zpp_disp) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this13 = ret6.zpp_inner;
		if(_this13._validate != null) {
			_this13._validate();
		}
		if(ret6.zpp_inner.x == x) {
			if(ret6 != null && ret6.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this14 = ret6.zpp_inner;
			if(_this14._validate != null) {
				_this14._validate();
			}
			tmp3 = ret6.zpp_inner.y == y2;
		} else {
			tmp3 = false;
		}
		if(!tmp3) {
			ret6.zpp_inner.x = x;
			ret6.zpp_inner.y = y2;
			var _this15 = ret6.zpp_inner;
			if(_this15._invalidate != null) {
				_this15._invalidate(_this15);
			}
		}
	}
	ret6.zpp_inner.weak = weak;
	return [ret,ret2,ret4,ret6];
};
nape_shape_Polygon.__super__ = nape_shape_Shape;
nape_shape_Polygon.prototype = $extend(nape_shape_Shape.prototype,{
	__class__: nape_shape_Polygon
});
var nape_shape_ShapeIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$ShapeList.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "Shape" + "Iterator derp!");
	}
};
nape_shape_ShapeIterator.__name__ = true;
nape_shape_ShapeIterator.get = function(list) {
	var ret;
	if(nape_shape_ShapeIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ShapeList.internal = true;
		var ret1 = new nape_shape_ShapeIterator();
		zpp_$nape_util_ZPP_$ShapeList.internal = false;
		ret = ret1;
	} else {
		var r = nape_shape_ShapeIterator.zpp_pool;
		nape_shape_ShapeIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_shape_ShapeIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_shape_ShapeIterator.zpp_pool;
			nape_shape_ShapeIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_shape_ShapeIterator
};
var nape_shape_ShapeList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$ShapeList();
	this.zpp_inner.outer = this;
};
nape_shape_ShapeList.__name__ = true;
nape_shape_ShapeList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		var tmp;
		if(index >= 0) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			tmp = index >= this.zpp_inner.user_length;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) {
			throw new js__$Boot_HaxeError("Error: " + "Shape" + "List is immutable");
		}
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				this.zpp_inner.inner.add(obj.zpp_inner);
			} else {
				if(this.zpp_inner.push_ite == null) {
					var tmp;
					if(this.zpp_inner.inner.head == null) {
						tmp = null;
					} else {
						var tmp1 = this.zpp_inner.inner;
						this.zpp_inner.valmod();
						if(this.zpp_inner.zip_length) {
							this.zpp_inner.zip_length = false;
							this.zpp_inner.user_length = this.zpp_inner.inner.length;
						}
						tmp = tmp1.iterator_at(this.zpp_inner.user_length - 1);
					}
					this.zpp_inner.push_ite = tmp;
				}
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) {
			throw new js__$Boot_HaxeError("Error: " + "Shape" + "List is immutable");
		}
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) {
					var tmp;
					if(this.zpp_inner.inner.head == null) {
						tmp = null;
					} else {
						var tmp1 = this.zpp_inner.inner;
						this.zpp_inner.valmod();
						if(this.zpp_inner.zip_length) {
							this.zpp_inner.zip_length = false;
							this.zpp_inner.user_length = this.zpp_inner.inner.length;
						}
						tmp = tmp1.iterator_at(this.zpp_inner.user_length - 1);
					}
					this.zpp_inner.push_ite = tmp;
				}
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else {
				this.zpp_inner.inner.add(obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) {
			throw new js__$Boot_HaxeError("Error: " + "Shape" + "List is immutable");
		}
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) {
				this.zpp_inner.subber(obj);
			}
			if(!this.zpp_inner.dontremove) {
				this.zpp_inner.inner.remove(obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_shape_ShapeIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_shape_ShapeIterator.zpp_pool;
				nape_shape_ShapeIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_shape_ShapeList
};
var nape_shape_ShapeType = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "ShapeType" + " derp!");
	}
};
nape_shape_ShapeType.__name__ = true;
nape_shape_ShapeType.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.ShapeType_CIRCLE == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.ShapeType_CIRCLE = new nape_shape_ShapeType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.ShapeType_CIRCLE) {
			return "CIRCLE";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.ShapeType_POLYGON == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ShapeType_POLYGON = new nape_shape_ShapeType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.ShapeType_POLYGON) {
				return "POLYGON";
			} else {
				return "";
			}
		}
	}
	,__class__: nape_shape_ShapeType
};
var nape_shape_ValidationResult = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "ValidationResult" + " derp!");
	}
};
nape_shape_ValidationResult.__name__ = true;
nape_shape_ValidationResult.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID = new nape_shape_ValidationResult();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID) {
			return "VALID";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE = new nape_shape_ValidationResult();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE) {
				return "DEGENERATE";
			} else {
				if(zpp_$nape_util_ZPP_$Flags.ValidationResult_CONCAVE == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.ValidationResult_CONCAVE = new nape_shape_ValidationResult();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(this == zpp_$nape_util_ZPP_$Flags.ValidationResult_CONCAVE) {
					return "CONCAVE";
				} else {
					if(zpp_$nape_util_ZPP_$Flags.ValidationResult_SELF_INTERSECTING == null) {
						zpp_$nape_util_ZPP_$Flags.internal = true;
						zpp_$nape_util_ZPP_$Flags.ValidationResult_SELF_INTERSECTING = new nape_shape_ValidationResult();
						zpp_$nape_util_ZPP_$Flags.internal = false;
					}
					if(this == zpp_$nape_util_ZPP_$Flags.ValidationResult_SELF_INTERSECTING) {
						return "SELF_INTERSECTING";
					} else {
						return "";
					}
				}
			}
		}
	}
	,__class__: nape_shape_ValidationResult
};
var nape_space_Broadphase = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) {
		throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "Broadphase" + " derp!");
	}
};
nape_space_Broadphase.__name__ = true;
nape_space_Broadphase.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE = new nape_space_Broadphase();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE) {
			return "DYNAMIC_AABB_TREE";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE = new nape_space_Broadphase();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE) {
				return "SWEEP_AND_PRUNE";
			} else {
				return "";
			}
		}
	}
	,__class__: nape_space_Broadphase
};
var nape_space_Space = function(gravity,broadphase) {
	this.zpp_inner = null;
	if(gravity != null && gravity.zpp_disp) {
		throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	this.zpp_inner = new zpp_$nape_space_ZPP_$Space(gravity == null ? null : gravity.zpp_inner,broadphase);
	this.zpp_inner.outer = this;
	if(gravity != null) {
		if(gravity.zpp_inner.weak) {
			if(gravity != null && gravity.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = gravity.zpp_inner;
			if(_this._immutable) {
				throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(gravity.zpp_inner._inuse) {
				throw new js__$Boot_HaxeError("Error: This Vec2 is not disposable");
			}
			var inner = gravity.zpp_inner;
			gravity.zpp_inner.outer = null;
			gravity.zpp_inner = null;
			var o = gravity;
			o.zpp_pool = null;
			if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
			} else {
				zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
			}
			zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
			o.zpp_disp = true;
			var o1 = inner;
			if(o1.outer != null) {
				o1.outer.zpp_inner = null;
				o1.outer = null;
			}
			o1._isimmutable = null;
			o1._validate = null;
			o1._invalidate = null;
			o1.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o1;
		}
	}
};
nape_space_Space.__name__ = true;
nape_space_Space.prototype = {
	step: function(deltaTime,velocityIterations,positionIterations) {
		if(positionIterations == null) {
			positionIterations = 10;
		}
		if(velocityIterations == null) {
			velocityIterations = 10;
		}
		if(deltaTime != deltaTime) {
			throw new js__$Boot_HaxeError("Error: deltaTime cannot be NaN");
		}
		if(deltaTime <= 0) {
			throw new js__$Boot_HaxeError("Error: deltaTime must be strictly positive");
		}
		if(velocityIterations <= 0) {
			throw new js__$Boot_HaxeError("Error: must use atleast one velocity iteration");
		}
		if(positionIterations <= 0) {
			throw new js__$Boot_HaxeError("Error: must use atleast one position iteration");
		}
		this.zpp_inner.step(deltaTime,velocityIterations,positionIterations);
	}
	,__class__: nape_space_Space
};
var zpp_$nape_ZPP_$ID = function() { };
zpp_$nape_ZPP_$ID.__name__ = true;
zpp_$nape_ZPP_$ID.Interactor = function() {
	return zpp_$nape_ZPP_$ID._Interactor++;
};
zpp_$nape_ZPP_$ID.Constraint = function() {
	return zpp_$nape_ZPP_$ID._Constraint++;
};
zpp_$nape_ZPP_$ID.CbType = function() {
	return zpp_$nape_ZPP_$ID._CbType++;
};
zpp_$nape_ZPP_$ID.CbSet = function() {
	return zpp_$nape_ZPP_$ID._CbSet++;
};
zpp_$nape_ZPP_$ID.Listener = function() {
	return zpp_$nape_ZPP_$ID._Listener++;
};
var zpp_$nape_callbacks_ZPP_$Callback = function() {
	this.constraint = null;
	this.body = null;
	this.pre_swapped = false;
	this.pre_arbiter = null;
	this.wrap_arbiters = null;
	this.set = null;
	this.int2 = null;
	this.int1 = null;
	this.length = 0;
	this.prev = null;
	this.next = null;
	this.listener = null;
	this.event = 0;
	this.outer_int = null;
	this.outer_con = null;
	this.outer_body = null;
	this.length = 0;
};
zpp_$nape_callbacks_ZPP_$Callback.__name__ = true;
zpp_$nape_callbacks_ZPP_$Callback.prototype = {
	wrapper_body: function() {
		if(this.outer_body == null) {
			zpp_$nape_callbacks_ZPP_$Callback.internal = true;
			this.outer_body = new nape_callbacks_BodyCallback();
			zpp_$nape_callbacks_ZPP_$Callback.internal = false;
			this.outer_body.zpp_inner = this;
		}
		return this.outer_body;
	}
	,wrapper_con: function() {
		if(this.outer_con == null) {
			zpp_$nape_callbacks_ZPP_$Callback.internal = true;
			this.outer_con = new nape_callbacks_ConstraintCallback();
			zpp_$nape_callbacks_ZPP_$Callback.internal = false;
			this.outer_con.zpp_inner = this;
		}
		return this.outer_con;
	}
	,wrapper_int: function() {
		if(this.outer_int == null) {
			zpp_$nape_callbacks_ZPP_$Callback.internal = true;
			this.outer_int = new nape_callbacks_InteractionCallback();
			zpp_$nape_callbacks_ZPP_$Callback.internal = false;
			this.outer_int.zpp_inner = this;
		}
		if(this.wrap_arbiters == null) {
			this.wrap_arbiters = zpp_$nape_util_ZPP_$ArbiterList.get(this.set.arbiters,true);
		} else {
			this.wrap_arbiters.zpp_inner.inner = this.set.arbiters;
		}
		this.wrap_arbiters.zpp_inner.zip_length = true;
		this.wrap_arbiters.zpp_inner.at_ite = null;
		return this.outer_int;
	}
	,push: function(obj) {
		if(this.prev != null) {
			this.prev.next = obj;
		} else {
			this.next = obj;
		}
		obj.prev = this.prev;
		obj.next = null;
		this.prev = obj;
		this.length++;
	}
	,pop: function() {
		var ret = this.next;
		this.next = ret.next;
		if(this.next == null) {
			this.prev = null;
		} else {
			this.next.prev = null;
		}
		this.length--;
		return ret;
	}
	,empty: function() {
		return this.next == null;
	}
	,__class__: zpp_$nape_callbacks_ZPP_$Callback
};
var zpp_$nape_callbacks_ZPP_$CbSet = function() {
	this.constraints = null;
	this.interactors = null;
	this.zip_conlisteners = false;
	this.conlisteners = null;
	this.zip_bodylisteners = false;
	this.bodylisteners = null;
	this.zip_listeners = false;
	this.listeners = null;
	this.cbpairs = null;
	this.manager = null;
	this.id = 0;
	this.next = null;
	this.count = 0;
	this.cbTypes = null;
	this.cbTypes = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
	this.listeners = new zpp_$nape_util_ZNPList_$ZPP_$InteractionListener();
	this.zip_listeners = true;
	this.bodylisteners = new zpp_$nape_util_ZNPList_$ZPP_$BodyListener();
	this.zip_bodylisteners = true;
	this.conlisteners = new zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener();
	this.zip_conlisteners = true;
	this.constraints = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this.interactors = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
	this.id = zpp_$nape_ZPP_$ID.CbSet();
	this.cbpairs = new zpp_$nape_util_ZNPList_$ZPP_$CbSetPair();
};
zpp_$nape_callbacks_ZPP_$CbSet.__name__ = true;
zpp_$nape_callbacks_ZPP_$CbSet.setlt = function(a,b) {
	var i = a.cbTypes.head;
	var j = b.cbTypes.head;
	while(i != null && j != null) {
		var ca = i.elt;
		var cb = j.elt;
		if(ca.id < cb.id) {
			return true;
		}
		if(cb.id < ca.id) {
			return false;
		} else {
			i = i.next;
			j = j.next;
		}
	}
	if(j != null) {
		return i == null;
	} else {
		return false;
	}
};
zpp_$nape_callbacks_ZPP_$CbSet.get = function(cbTypes) {
	var ret;
	if(zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool == null) {
		ret = new zpp_$nape_callbacks_ZPP_$CbSet();
	} else {
		ret = zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool;
		zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool = ret.next;
		ret.next = null;
	}
	var ite = null;
	var cx_ite = cbTypes.head;
	while(cx_ite != null) {
		var cb = cx_ite.elt;
		ite = ret.cbTypes.insert(ite,cb);
		cb.cbsets.add(ret);
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_$nape_callbacks_ZPP_$CbSet.single_intersection = function(a,b,i) {
	var _this = a.manager;
	var ret = null;
	var pairs = a.cbpairs.length < b.cbpairs.length ? a.cbpairs : b.cbpairs;
	var cx_ite = pairs.head;
	while(cx_ite != null) {
		var p = cx_ite.elt;
		if(p.a == a && p.b == b || p.a == b && p.b == a) {
			ret = p;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(ret == null) {
		var ret1;
		if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
			ret1 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
		} else {
			ret1 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
			zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.zip_listeners = true;
		if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(a,b)) {
			ret1.a = a;
			ret1.b = b;
		} else {
			ret1.a = b;
			ret1.b = a;
		}
		ret = ret1;
		a.cbpairs.add(ret);
		if(b != a) {
			b.cbpairs.add(ret);
		}
	}
	if(ret.zip_listeners) {
		ret.zip_listeners = false;
		ret.__validate();
	}
	var ite = ret.listeners.head;
	if(ite != null && ite.elt == i) {
		return ite.next == null;
	} else {
		return false;
	}
};
zpp_$nape_callbacks_ZPP_$CbSet.prototype = {
	invalidate_pairs: function() {
		var cx_ite = this.cbpairs.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.zip_listeners = true;
			cx_ite = cx_ite.next;
		}
	}
	,realvalidate_listeners: function() {
		this.listeners.clear();
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			var npre = null;
			var nite = this.listeners.head;
			var cite = cb.listeners.head;
			while(cite != null) {
				var cx = cite.elt;
				if(nite != null && nite.elt == cx) {
					cite = cite.next;
					npre = nite;
					nite = nite.next;
				} else {
					var tmp;
					if(nite != null) {
						var b = nite.elt;
						if(cx.precedence <= b.precedence) {
							if(cx.precedence == b.precedence) {
								tmp = cx.id > b.id;
							} else {
								tmp = false;
							}
						} else {
							tmp = true;
						}
					} else {
						tmp = true;
					}
					if(tmp) {
						if(cx.space == this.manager.space) {
							var _this = this.listeners;
							var ret;
							if(zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool == null) {
								ret = new zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener();
							} else {
								ret = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = ret.next;
								ret.next = null;
							}
							ret.elt = cx;
							var temp = ret;
							if(npre == null) {
								temp.next = _this.head;
								_this.head = temp;
							} else {
								temp.next = npre.next;
								npre.next = temp;
							}
							_this.pushmod = _this.modified = true;
							_this.length++;
							npre = temp;
						}
						cite = cite.next;
					} else {
						npre = nite;
						nite = nite.next;
					}
				}
			}
			cx_ite = cx_ite.next;
		}
	}
	,realvalidate_bodylisteners: function() {
		this.bodylisteners.clear();
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			var npre = null;
			var nite = this.bodylisteners.head;
			var cite = cb.bodylisteners.head;
			while(cite != null) {
				var cx = cite.elt;
				if(nite != null && nite.elt == cx) {
					cite = cite.next;
					npre = nite;
					nite = nite.next;
				} else {
					var tmp;
					if(nite != null) {
						var b = nite.elt;
						if(cx.precedence <= b.precedence) {
							if(cx.precedence == b.precedence) {
								tmp = cx.id > b.id;
							} else {
								tmp = false;
							}
						} else {
							tmp = true;
						}
					} else {
						tmp = true;
					}
					if(tmp) {
						var tmp1;
						var _this = cx.options;
						if(!_this.nonemptyintersection(this.cbTypes,_this.excludes)) {
							tmp1 = cx.space == this.manager.space;
						} else {
							tmp1 = false;
						}
						if(tmp1) {
							var _this1 = this.bodylisteners;
							var ret;
							if(zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool == null) {
								ret = new zpp_$nape_util_ZNPNode_$ZPP_$BodyListener();
							} else {
								ret = zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool = ret.next;
								ret.next = null;
							}
							ret.elt = cx;
							var temp = ret;
							if(npre == null) {
								temp.next = _this1.head;
								_this1.head = temp;
							} else {
								temp.next = npre.next;
								npre.next = temp;
							}
							_this1.pushmod = _this1.modified = true;
							_this1.length++;
							npre = temp;
						}
						cite = cite.next;
					} else {
						npre = nite;
						nite = nite.next;
					}
				}
			}
			cx_ite = cx_ite.next;
		}
	}
	,realvalidate_conlisteners: function() {
		this.conlisteners.clear();
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			var npre = null;
			var nite = this.conlisteners.head;
			var cite = cb.conlisteners.head;
			while(cite != null) {
				var cx = cite.elt;
				if(nite != null && nite.elt == cx) {
					cite = cite.next;
					npre = nite;
					nite = nite.next;
				} else {
					var tmp;
					if(nite != null) {
						var b = nite.elt;
						if(cx.precedence <= b.precedence) {
							if(cx.precedence == b.precedence) {
								tmp = cx.id > b.id;
							} else {
								tmp = false;
							}
						} else {
							tmp = true;
						}
					} else {
						tmp = true;
					}
					if(tmp) {
						var tmp1;
						var _this = cx.options;
						if(!_this.nonemptyintersection(this.cbTypes,_this.excludes)) {
							tmp1 = cx.space == this.manager.space;
						} else {
							tmp1 = false;
						}
						if(tmp1) {
							var _this1 = this.conlisteners;
							var ret;
							if(zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool == null) {
								ret = new zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener();
							} else {
								ret = zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool = ret.next;
								ret.next = null;
							}
							ret.elt = cx;
							var temp = ret;
							if(npre == null) {
								temp.next = _this1.head;
								_this1.head = temp;
							} else {
								temp.next = npre.next;
								npre.next = temp;
							}
							_this1.pushmod = _this1.modified = true;
							_this1.length++;
							npre = temp;
						}
						cite = cite.next;
					} else {
						npre = nite;
						nite = nite.next;
					}
				}
			}
			cx_ite = cx_ite.next;
		}
	}
	,validate: function() {
		if(this.zip_listeners) {
			this.zip_listeners = false;
			this.realvalidate_listeners();
		}
		if(this.zip_bodylisteners) {
			this.zip_bodylisteners = false;
			this.realvalidate_bodylisteners();
		}
		if(this.zip_conlisteners) {
			this.zip_conlisteners = false;
			this.realvalidate_conlisteners();
		}
	}
	,__class__: zpp_$nape_callbacks_ZPP_$CbSet
};
var zpp_$nape_callbacks_ZPP_$CbSetPair = function() {
	this.listeners = null;
	this.zip_listeners = false;
	this.next = null;
	this.b = null;
	this.a = null;
	this.listeners = new zpp_$nape_util_ZNPList_$ZPP_$InteractionListener();
};
zpp_$nape_callbacks_ZPP_$CbSetPair.__name__ = true;
zpp_$nape_callbacks_ZPP_$CbSetPair.setlt = function(x,y) {
	if(!zpp_$nape_callbacks_ZPP_$CbSet.setlt(x.a,y.a)) {
		if(x.a == y.a) {
			return zpp_$nape_callbacks_ZPP_$CbSet.setlt(x.b,y.b);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
zpp_$nape_callbacks_ZPP_$CbSetPair.prototype = {
	__validate: function() {
		this.listeners.clear();
		var aite = this.a.listeners.head;
		var bite = this.b.listeners.head;
		while(aite != null && bite != null) {
			var ax = aite.elt;
			var bx = bite.elt;
			if(ax == bx) {
				var tmp;
				var tmp1;
				var _this = ax.options1;
				var xs = this.a.cbTypes;
				if(_this.nonemptyintersection(xs,_this.includes) && !_this.nonemptyintersection(xs,_this.excludes)) {
					var _this1 = ax.options2;
					var xs1 = this.b.cbTypes;
					if(_this1.nonemptyintersection(xs1,_this1.includes)) {
						tmp1 = !_this1.nonemptyintersection(xs1,_this1.excludes);
					} else {
						tmp1 = false;
					}
				} else {
					tmp1 = false;
				}
				if(!tmp1) {
					var _this2 = ax.options2;
					var xs2 = this.a.cbTypes;
					if(_this2.nonemptyintersection(xs2,_this2.includes) && !_this2.nonemptyintersection(xs2,_this2.excludes)) {
						var _this3 = ax.options1;
						var xs3 = this.b.cbTypes;
						if(_this3.nonemptyintersection(xs3,_this3.includes)) {
							tmp = !_this3.nonemptyintersection(xs3,_this3.excludes);
						} else {
							tmp = false;
						}
					} else {
						tmp = false;
					}
				} else {
					tmp = true;
				}
				if(tmp) {
					this.listeners.add(ax);
				}
				aite = aite.next;
				bite = bite.next;
			} else if(ax.precedence > bx.precedence || ax.precedence == bx.precedence && ax.id > bx.id) {
				aite = aite.next;
			} else {
				bite = bite.next;
			}
		}
	}
	,__class__: zpp_$nape_callbacks_ZPP_$CbSetPair
};
var zpp_$nape_util_ZNPList_$ZPP_$InteractionListener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$InteractionListener.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$InteractionListener.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret1;
				if(pre == null) {
					old = this.head;
					ret1 = old.next;
					this.head = ret1;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret1 = old.next;
					pre.next = ret1;
					if(ret1 == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,clear: function() {
		while(this.head != null) {
			var ret = this.head;
			this.head = ret.next;
			var o = ret;
			o.elt = null;
			o.next = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = o;
			if(this.head == null) {
				this.pushmod = true;
			}
			this.modified = true;
			this.length--;
		}
		this.pushmod = true;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$InteractionListener
};
var zpp_$nape_util_ZNPList_$ZPP_$BodyListener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$BodyListener.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$BodyListener.prototype = {
	remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret1;
				if(pre == null) {
					old = this.head;
					ret1 = old.next;
					this.head = ret1;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret1 = old.next;
					pre.next = ret1;
					if(ret1 == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,clear: function() {
		while(this.head != null) {
			var ret = this.head;
			this.head = ret.next;
			var o = ret;
			o.elt = null;
			o.next = zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool = o;
			if(this.head == null) {
				this.pushmod = true;
			}
			this.modified = true;
			this.length--;
		}
		this.pushmod = true;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$BodyListener
};
var zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener.prototype = {
	remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret1;
				if(pre == null) {
					old = this.head;
					ret1 = old.next;
					this.head = ret1;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret1 = old.next;
					pre.next = ret1;
					if(ret1 == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,clear: function() {
		while(this.head != null) {
			var ret = this.head;
			this.head = ret.next;
			var o = ret;
			o.elt = null;
			o.next = zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool = o;
			if(this.head == null) {
				this.pushmod = true;
			}
			this.modified = true;
			this.length--;
		}
		this.pushmod = true;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener
};
var zpp_$nape_util_ZNPList_$ZPP_$Constraint = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$Constraint.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$Constraint.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Constraint();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool = o;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret1;
				if(pre == null) {
					old = this.head;
					ret1 = old.next;
					this.head = ret1;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret1 = old.next;
					pre.next = ret1;
					if(ret1 == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Constraint
};
var zpp_$nape_util_ZNPList_$ZPP_$Interactor = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$Interactor.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$Interactor.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = o;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret1;
				if(pre == null) {
					old = this.head;
					ret1 = old.next;
					this.head = ret1;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret1 = old.next;
					pre.next = ret1;
					if(ret1 == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Interactor
};
var zpp_$nape_util_ZNPList_$ZPP_$CbSet = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$CbSet.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$CbSet.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = o;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret1;
				if(pre == null) {
					old = this.head;
					ret1 = old.next;
					this.head = ret1;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret1 = old.next;
					pre.next = ret1;
					if(ret1 == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$CbSet
};
var zpp_$nape_callbacks_ZPP_$CbType = function() {
	this.conlisteners = null;
	this.bodylisteners = null;
	this.listeners = null;
	this.cbsets = null;
	this.id = 0;
	this.outer = null;
	this.id = zpp_$nape_ZPP_$ID.CbType();
	this.listeners = new zpp_$nape_util_ZNPList_$ZPP_$InteractionListener();
	this.bodylisteners = new zpp_$nape_util_ZNPList_$ZPP_$BodyListener();
	this.conlisteners = new zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener();
	this.constraints = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this.interactors = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
	this.cbsets = new zpp_$nape_util_ZNPList_$ZPP_$CbSet();
};
zpp_$nape_callbacks_ZPP_$CbType.__name__ = true;
zpp_$nape_callbacks_ZPP_$CbType.prototype = {
	__class__: zpp_$nape_callbacks_ZPP_$CbType
};
var zpp_$nape_util_ZPP_$Flags = function() { };
zpp_$nape_util_ZPP_$Flags.__name__ = true;
var zpp_$nape_callbacks_ZPP_$Listener = function() {
	this.space = null;
	this.interaction = null;
	this.constraint = null;
	this.body = null;
	this.precedence = 0;
	this.event = 0;
	this.type = 0;
	this.id = 0;
	this.outer = null;
	this.id = zpp_$nape_ZPP_$ID.Listener();
};
zpp_$nape_callbacks_ZPP_$Listener.__name__ = true;
zpp_$nape_callbacks_ZPP_$Listener.prototype = {
	addedToSpace: function() {
	}
	,removedFromSpace: function() {
	}
	,__class__: zpp_$nape_callbacks_ZPP_$Listener
};
var zpp_$nape_callbacks_ZPP_$BodyListener = function(options,event,handler) {
	this.handler = null;
	this.options = null;
	this.outer_zn = null;
	zpp_$nape_callbacks_ZPP_$Listener.call(this);
	this.event = event;
	this.handler = handler;
	this.body = this;
	this.type = 0;
	this.options = options.zpp_inner;
};
zpp_$nape_callbacks_ZPP_$BodyListener.__name__ = true;
zpp_$nape_callbacks_ZPP_$BodyListener.__super__ = zpp_$nape_callbacks_ZPP_$Listener;
zpp_$nape_callbacks_ZPP_$BodyListener.prototype = $extend(zpp_$nape_callbacks_ZPP_$Listener.prototype,{
	addedToSpace: function() {
		this.options.handler = $bind(this,this.cbtype_change);
		var cx_ite = this.options.includes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			var pre = null;
			var cx_ite1 = cb.bodylisteners.head;
			while(cx_ite1 != null) {
				var j = cx_ite1.elt;
				if(this.precedence > j.precedence || this.precedence == j.precedence && this.id > j.id) {
					break;
				}
				pre = cx_ite1;
				cx_ite1 = cx_ite1.next;
			}
			var _this = cb.bodylisteners;
			var ret;
			if(zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool == null) {
				ret = new zpp_$nape_util_ZNPNode_$ZPP_$BodyListener();
			} else {
				ret = zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool = ret.next;
				ret.next = null;
			}
			ret.elt = this;
			var temp = ret;
			if(pre == null) {
				temp.next = _this.head;
				_this.head = temp;
			} else {
				temp.next = pre.next;
				pre.next = temp;
			}
			_this.pushmod = _this.modified = true;
			_this.length++;
			var cx_ite2 = cb.cbsets.head;
			while(cx_ite2 != null) {
				var cb1 = cx_ite2.elt;
				cb1.zip_bodylisteners = true;
				cx_ite2 = cx_ite2.next;
			}
			cx_ite = cx_ite.next;
		}
	}
	,removedFromSpace: function() {
		var cx_ite = this.options.includes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.bodylisteners.remove(this);
			var cx_ite1 = cb.cbsets.head;
			while(cx_ite1 != null) {
				var cb1 = cx_ite1.elt;
				cb1.zip_bodylisteners = true;
				cx_ite1 = cx_ite1.next;
			}
			cx_ite = cx_ite.next;
		}
		this.options.handler = null;
	}
	,cbtype_change: function(cb,included,added) {
		this.removedFromSpace();
		var _this = this.options;
		if(included) {
			if(added) {
				var pre = null;
				var cx_ite = _this.includes.head;
				while(cx_ite != null) {
					var j = cx_ite.elt;
					if(cb.id < j.id) {
						break;
					}
					pre = cx_ite;
					cx_ite = cx_ite.next;
				}
				var _this1 = _this.includes;
				var ret;
				if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
					ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
				} else {
					ret = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret.next;
					ret.next = null;
				}
				ret.elt = cb;
				var temp = ret;
				if(pre == null) {
					temp.next = _this1.head;
					_this1.head = temp;
				} else {
					temp.next = pre.next;
					pre.next = temp;
				}
				_this1.pushmod = _this1.modified = true;
				_this1.length++;
			} else {
				_this.includes.remove(cb);
			}
		} else if(added) {
			var pre1 = null;
			var cx_ite1 = _this.excludes.head;
			while(cx_ite1 != null) {
				var j1 = cx_ite1.elt;
				if(cb.id < j1.id) {
					break;
				}
				pre1 = cx_ite1;
				cx_ite1 = cx_ite1.next;
			}
			var _this2 = _this.excludes;
			var ret1;
			if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
				ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
			} else {
				ret1 = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.elt = cb;
			var temp1 = ret1;
			if(pre1 == null) {
				temp1.next = _this2.head;
				_this2.head = temp1;
			} else {
				temp1.next = pre1.next;
				pre1.next = temp1;
			}
			_this2.pushmod = _this2.modified = true;
			_this2.length++;
		} else {
			_this.excludes.remove(cb);
		}
		this.addedToSpace();
	}
	,__class__: zpp_$nape_callbacks_ZPP_$BodyListener
});
var zpp_$nape_callbacks_ZPP_$ConstraintListener = function(options,event,handler) {
	this.handler = null;
	this.options = null;
	this.outer_zn = null;
	zpp_$nape_callbacks_ZPP_$Listener.call(this);
	this.event = event;
	this.handler = handler;
	this.constraint = this;
	this.type = 1;
	this.options = options.zpp_inner;
};
zpp_$nape_callbacks_ZPP_$ConstraintListener.__name__ = true;
zpp_$nape_callbacks_ZPP_$ConstraintListener.__super__ = zpp_$nape_callbacks_ZPP_$Listener;
zpp_$nape_callbacks_ZPP_$ConstraintListener.prototype = $extend(zpp_$nape_callbacks_ZPP_$Listener.prototype,{
	addedToSpace: function() {
		this.options.handler = $bind(this,this.cbtype_change);
		var cx_ite = this.options.includes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			var pre = null;
			var cx_ite1 = cb.conlisteners.head;
			while(cx_ite1 != null) {
				var j = cx_ite1.elt;
				if(this.precedence > j.precedence || this.precedence == j.precedence && this.id > j.id) {
					break;
				}
				pre = cx_ite1;
				cx_ite1 = cx_ite1.next;
			}
			var _this = cb.conlisteners;
			var ret;
			if(zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool == null) {
				ret = new zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener();
			} else {
				ret = zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool = ret.next;
				ret.next = null;
			}
			ret.elt = this;
			var temp = ret;
			if(pre == null) {
				temp.next = _this.head;
				_this.head = temp;
			} else {
				temp.next = pre.next;
				pre.next = temp;
			}
			_this.pushmod = _this.modified = true;
			_this.length++;
			var cx_ite2 = cb.cbsets.head;
			while(cx_ite2 != null) {
				var cb1 = cx_ite2.elt;
				cb1.zip_conlisteners = true;
				cx_ite2 = cx_ite2.next;
			}
			cx_ite = cx_ite.next;
		}
	}
	,removedFromSpace: function() {
		var cx_ite = this.options.includes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.conlisteners.remove(this);
			var cx_ite1 = cb.cbsets.head;
			while(cx_ite1 != null) {
				var cb1 = cx_ite1.elt;
				cb1.zip_conlisteners = true;
				cx_ite1 = cx_ite1.next;
			}
			cx_ite = cx_ite.next;
		}
		this.options.handler = null;
	}
	,cbtype_change: function(cb,included,added) {
		this.removedFromSpace();
		var _this = this.options;
		if(included) {
			if(added) {
				var pre = null;
				var cx_ite = _this.includes.head;
				while(cx_ite != null) {
					var j = cx_ite.elt;
					if(cb.id < j.id) {
						break;
					}
					pre = cx_ite;
					cx_ite = cx_ite.next;
				}
				var _this1 = _this.includes;
				var ret;
				if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
					ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
				} else {
					ret = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret.next;
					ret.next = null;
				}
				ret.elt = cb;
				var temp = ret;
				if(pre == null) {
					temp.next = _this1.head;
					_this1.head = temp;
				} else {
					temp.next = pre.next;
					pre.next = temp;
				}
				_this1.pushmod = _this1.modified = true;
				_this1.length++;
			} else {
				_this.includes.remove(cb);
			}
		} else if(added) {
			var pre1 = null;
			var cx_ite1 = _this.excludes.head;
			while(cx_ite1 != null) {
				var j1 = cx_ite1.elt;
				if(cb.id < j1.id) {
					break;
				}
				pre1 = cx_ite1;
				cx_ite1 = cx_ite1.next;
			}
			var _this2 = _this.excludes;
			var ret1;
			if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
				ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
			} else {
				ret1 = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.elt = cb;
			var temp1 = ret1;
			if(pre1 == null) {
				temp1.next = _this2.head;
				_this2.head = temp1;
			} else {
				temp1.next = pre1.next;
				pre1.next = temp1;
			}
			_this2.pushmod = _this2.modified = true;
			_this2.length++;
		} else {
			_this.excludes.remove(cb);
		}
		this.addedToSpace();
	}
	,__class__: zpp_$nape_callbacks_ZPP_$ConstraintListener
});
var zpp_$nape_util_ZNPList_$ZPP_$CbType = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$CbType.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$CbType.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,insert: function(cur,o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = o;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret1;
				if(pre == null) {
					old = this.head;
					ret1 = old.next;
					this.head = ret1;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret1 = old.next;
					pre.next = ret1;
					if(ret1 == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,clear: function() {
		while(this.head != null) {
			var ret = this.head;
			this.head = ret.next;
			var o = ret;
			o.elt = null;
			o.next = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = o;
			if(this.head == null) {
				this.pushmod = true;
			}
			this.modified = true;
			this.length--;
		}
		this.pushmod = true;
	}
	,has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$CbType
};
var zpp_$nape_callbacks_ZPP_$InteractionListener = function(options1,options2,event,type) {
	this.handlerp = null;
	this.pure = false;
	this.allowSleepingCallbacks = false;
	this.handleri = null;
	this.options2 = null;
	this.options1 = null;
	this.itype = 0;
	this.outer_znp = null;
	this.outer_zni = null;
	zpp_$nape_callbacks_ZPP_$Listener.call(this);
	this.type = type;
	this.interaction = this;
	this.event = event;
	this.options1 = options1.zpp_inner;
	this.options2 = options2.zpp_inner;
	this.allowSleepingCallbacks = false;
};
zpp_$nape_callbacks_ZPP_$InteractionListener.__name__ = true;
zpp_$nape_callbacks_ZPP_$InteractionListener.__super__ = zpp_$nape_callbacks_ZPP_$Listener;
zpp_$nape_callbacks_ZPP_$InteractionListener.prototype = $extend(zpp_$nape_callbacks_ZPP_$Listener.prototype,{
	with_uniquesets: function(fresh) {
		var _gthis = this;
		var set;
		if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool == null) {
			set = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair();
		} else {
			set = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
			zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = set.next;
			set.next = null;
		}
		set.lt = zpp_$nape_callbacks_ZPP_$CbSetPair.setlt;
		var B = this.options2.includes;
		var U = zpp_$nape_callbacks_ZPP_$InteractionListener.UCbType;
		var V = zpp_$nape_callbacks_ZPP_$InteractionListener.VCbType;
		var W = zpp_$nape_callbacks_ZPP_$InteractionListener.WCbType;
		var aite = this.options1.includes.head;
		var bite = B.head;
		while(aite != null && bite != null) {
			var a = aite.elt;
			var b = bite.elt;
			if(a == b) {
				var ret;
				if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
					ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
				} else {
					ret = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret.next;
					ret.next = null;
				}
				ret.elt = a;
				var temp = ret;
				temp.next = W.head;
				W.head = temp;
				W.modified = true;
				W.length++;
				aite = aite.next;
				bite = bite.next;
			} else if(a.id < b.id) {
				var ret1;
				if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
					ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
				} else {
					ret1 = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret1.next;
					ret1.next = null;
				}
				ret1.elt = a;
				var temp1 = ret1;
				temp1.next = U.head;
				U.head = temp1;
				U.modified = true;
				U.length++;
				aite = aite.next;
			} else {
				var ret2;
				if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
					ret2 = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
				} else {
					ret2 = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret2.next;
					ret2.next = null;
				}
				ret2.elt = b;
				var temp2 = ret2;
				temp2.next = V.head;
				V.head = temp2;
				V.modified = true;
				V.length++;
				bite = bite.next;
			}
		}
		while(aite != null) {
			var o = aite.elt;
			var ret3;
			if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
				ret3 = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
			} else {
				ret3 = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret3.next;
				ret3.next = null;
			}
			ret3.elt = o;
			var temp3 = ret3;
			temp3.next = U.head;
			U.head = temp3;
			U.modified = true;
			U.length++;
			aite = aite.next;
		}
		while(bite != null) {
			var o1 = bite.elt;
			var ret4;
			if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
				ret4 = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
			} else {
				ret4 = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret4.next;
				ret4.next = null;
			}
			ret4.elt = o1;
			var temp4 = ret4;
			temp4.next = V.head;
			V.head = temp4;
			V.modified = true;
			V.length++;
			bite = bite.next;
		}
		while(U.head != null) {
			var x = U.pop_unsafe();
			var cx_ite = B.head;
			while(cx_ite != null) {
				var y = cx_ite.elt;
				var B1 = y.cbsets;
				var U1 = zpp_$nape_callbacks_ZPP_$InteractionListener.UCbSet;
				var V1 = zpp_$nape_callbacks_ZPP_$InteractionListener.VCbSet;
				var W1 = zpp_$nape_callbacks_ZPP_$InteractionListener.WCbSet;
				var aite1 = x.cbsets.head;
				var bite1 = B1.head;
				while(aite1 != null && bite1 != null) {
					var a1 = aite1.elt;
					var b1 = bite1.elt;
					if(a1 == b1) {
						var ret5;
						if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
							ret5 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
						} else {
							ret5 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret5.next;
							ret5.next = null;
						}
						ret5.elt = a1;
						var temp5 = ret5;
						temp5.next = W1.head;
						W1.head = temp5;
						W1.modified = true;
						W1.length++;
						aite1 = aite1.next;
						bite1 = bite1.next;
					} else if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(a1,b1)) {
						var ret6;
						if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
							ret6 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
						} else {
							ret6 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret6.next;
							ret6.next = null;
						}
						ret6.elt = a1;
						var temp6 = ret6;
						temp6.next = U1.head;
						U1.head = temp6;
						U1.modified = true;
						U1.length++;
						aite1 = aite1.next;
					} else {
						var ret7;
						if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
							ret7 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
						} else {
							ret7 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret7.next;
							ret7.next = null;
						}
						ret7.elt = b1;
						var temp7 = ret7;
						temp7.next = V1.head;
						V1.head = temp7;
						V1.modified = true;
						V1.length++;
						bite1 = bite1.next;
					}
				}
				while(aite1 != null) {
					var o2 = aite1.elt;
					var ret8;
					if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
						ret8 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
					} else {
						ret8 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret8.next;
						ret8.next = null;
					}
					ret8.elt = o2;
					var temp8 = ret8;
					temp8.next = U1.head;
					U1.head = temp8;
					U1.modified = true;
					U1.length++;
					aite1 = aite1.next;
				}
				while(bite1 != null) {
					var o3 = bite1.elt;
					var ret9;
					if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
						ret9 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
					} else {
						ret9 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret9.next;
						ret9.next = null;
					}
					ret9.elt = o3;
					var temp9 = ret9;
					temp9.next = V1.head;
					V1.head = temp9;
					V1.modified = true;
					V1.length++;
					bite1 = bite1.next;
				}
				while(U1.head != null) {
					var x1 = U1.pop_unsafe();
					var cx_ite1 = B1.head;
					while(cx_ite1 != null) {
						var y1 = cx_ite1.elt;
						x1.validate();
						y1.validate();
						if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x1,y1,_gthis)) {
							var ret10;
							if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
								ret10 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
							} else {
								ret10 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
								zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret10.next;
								ret10.next = null;
							}
							ret10.zip_listeners = true;
							if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x1,y1)) {
								ret10.a = x1;
								ret10.b = y1;
							} else {
								ret10.a = y1;
								ret10.b = x1;
							}
							set.try_insert(ret10);
						}
						cx_ite1 = cx_ite1.next;
					}
				}
				while(V1.head != null) {
					var x2 = V1.pop_unsafe();
					var cx_ite2 = W1.head;
					while(cx_ite2 != null) {
						var y2 = cx_ite2.elt;
						x2.validate();
						y2.validate();
						if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x2,y2,_gthis)) {
							var ret11;
							if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
								ret11 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
							} else {
								ret11 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
								zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret11.next;
								ret11.next = null;
							}
							ret11.zip_listeners = true;
							if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x2,y2)) {
								ret11.a = x2;
								ret11.b = y2;
							} else {
								ret11.a = y2;
								ret11.b = x2;
							}
							set.try_insert(ret11);
						}
						cx_ite2 = cx_ite2.next;
					}
				}
				while(W1.head != null) {
					var x3 = W1.pop_unsafe();
					x3.validate();
					x3.validate();
					if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x3,x3,_gthis)) {
						var ret12;
						if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
							ret12 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
						} else {
							ret12 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
							zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret12.next;
							ret12.next = null;
						}
						ret12.zip_listeners = true;
						if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x3,x3)) {
							ret12.a = x3;
							ret12.b = x3;
						} else {
							ret12.a = x3;
							ret12.b = x3;
						}
						set.try_insert(ret12);
					}
					var cx_ite3 = W1.head;
					while(cx_ite3 != null) {
						var y3 = cx_ite3.elt;
						x3.validate();
						y3.validate();
						if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x3,y3,_gthis)) {
							var ret13;
							if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
								ret13 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
							} else {
								ret13 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
								zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret13.next;
								ret13.next = null;
							}
							ret13.zip_listeners = true;
							if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x3,y3)) {
								ret13.a = x3;
								ret13.b = y3;
							} else {
								ret13.a = y3;
								ret13.b = x3;
							}
							set.try_insert(ret13);
						}
						cx_ite3 = cx_ite3.next;
					}
				}
				cx_ite = cx_ite.next;
			}
		}
		while(V.head != null) {
			var x4 = V.pop_unsafe();
			var cx_ite4 = W.head;
			while(cx_ite4 != null) {
				var y4 = cx_ite4.elt;
				var B2 = y4.cbsets;
				var U2 = zpp_$nape_callbacks_ZPP_$InteractionListener.UCbSet;
				var V2 = zpp_$nape_callbacks_ZPP_$InteractionListener.VCbSet;
				var W2 = zpp_$nape_callbacks_ZPP_$InteractionListener.WCbSet;
				var aite2 = x4.cbsets.head;
				var bite2 = B2.head;
				while(aite2 != null && bite2 != null) {
					var a2 = aite2.elt;
					var b2 = bite2.elt;
					if(a2 == b2) {
						var ret14;
						if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
							ret14 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
						} else {
							ret14 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret14.next;
							ret14.next = null;
						}
						ret14.elt = a2;
						var temp10 = ret14;
						temp10.next = W2.head;
						W2.head = temp10;
						W2.modified = true;
						W2.length++;
						aite2 = aite2.next;
						bite2 = bite2.next;
					} else if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(a2,b2)) {
						var ret15;
						if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
							ret15 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
						} else {
							ret15 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret15.next;
							ret15.next = null;
						}
						ret15.elt = a2;
						var temp11 = ret15;
						temp11.next = U2.head;
						U2.head = temp11;
						U2.modified = true;
						U2.length++;
						aite2 = aite2.next;
					} else {
						var ret16;
						if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
							ret16 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
						} else {
							ret16 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret16.next;
							ret16.next = null;
						}
						ret16.elt = b2;
						var temp12 = ret16;
						temp12.next = V2.head;
						V2.head = temp12;
						V2.modified = true;
						V2.length++;
						bite2 = bite2.next;
					}
				}
				while(aite2 != null) {
					var o4 = aite2.elt;
					var ret17;
					if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
						ret17 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
					} else {
						ret17 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret17.next;
						ret17.next = null;
					}
					ret17.elt = o4;
					var temp13 = ret17;
					temp13.next = U2.head;
					U2.head = temp13;
					U2.modified = true;
					U2.length++;
					aite2 = aite2.next;
				}
				while(bite2 != null) {
					var o5 = bite2.elt;
					var ret18;
					if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
						ret18 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
					} else {
						ret18 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret18.next;
						ret18.next = null;
					}
					ret18.elt = o5;
					var temp14 = ret18;
					temp14.next = V2.head;
					V2.head = temp14;
					V2.modified = true;
					V2.length++;
					bite2 = bite2.next;
				}
				while(U2.head != null) {
					var x5 = U2.pop_unsafe();
					var cx_ite5 = B2.head;
					while(cx_ite5 != null) {
						var y5 = cx_ite5.elt;
						x5.validate();
						y5.validate();
						if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x5,y5,_gthis)) {
							var ret19;
							if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
								ret19 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
							} else {
								ret19 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
								zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret19.next;
								ret19.next = null;
							}
							ret19.zip_listeners = true;
							if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x5,y5)) {
								ret19.a = x5;
								ret19.b = y5;
							} else {
								ret19.a = y5;
								ret19.b = x5;
							}
							set.try_insert(ret19);
						}
						cx_ite5 = cx_ite5.next;
					}
				}
				while(V2.head != null) {
					var x6 = V2.pop_unsafe();
					var cx_ite6 = W2.head;
					while(cx_ite6 != null) {
						var y6 = cx_ite6.elt;
						x6.validate();
						y6.validate();
						if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x6,y6,_gthis)) {
							var ret20;
							if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
								ret20 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
							} else {
								ret20 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
								zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret20.next;
								ret20.next = null;
							}
							ret20.zip_listeners = true;
							if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x6,y6)) {
								ret20.a = x6;
								ret20.b = y6;
							} else {
								ret20.a = y6;
								ret20.b = x6;
							}
							set.try_insert(ret20);
						}
						cx_ite6 = cx_ite6.next;
					}
				}
				while(W2.head != null) {
					var x7 = W2.pop_unsafe();
					x7.validate();
					x7.validate();
					if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x7,x7,_gthis)) {
						var ret21;
						if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
							ret21 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
						} else {
							ret21 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
							zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret21.next;
							ret21.next = null;
						}
						ret21.zip_listeners = true;
						if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x7,x7)) {
							ret21.a = x7;
							ret21.b = x7;
						} else {
							ret21.a = x7;
							ret21.b = x7;
						}
						set.try_insert(ret21);
					}
					var cx_ite7 = W2.head;
					while(cx_ite7 != null) {
						var y7 = cx_ite7.elt;
						x7.validate();
						y7.validate();
						if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x7,y7,_gthis)) {
							var ret22;
							if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
								ret22 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
							} else {
								ret22 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
								zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret22.next;
								ret22.next = null;
							}
							ret22.zip_listeners = true;
							if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x7,y7)) {
								ret22.a = x7;
								ret22.b = y7;
							} else {
								ret22.a = y7;
								ret22.b = x7;
							}
							set.try_insert(ret22);
						}
						cx_ite7 = cx_ite7.next;
					}
				}
				cx_ite4 = cx_ite4.next;
			}
		}
		while(W.head != null) {
			var x8 = W.pop_unsafe();
			var B3 = x8.cbsets;
			var U3 = zpp_$nape_callbacks_ZPP_$InteractionListener.UCbSet;
			var V3 = zpp_$nape_callbacks_ZPP_$InteractionListener.VCbSet;
			var W3 = zpp_$nape_callbacks_ZPP_$InteractionListener.WCbSet;
			var aite3 = x8.cbsets.head;
			var bite3 = B3.head;
			while(aite3 != null && bite3 != null) {
				var a3 = aite3.elt;
				var b3 = bite3.elt;
				if(a3 == b3) {
					var ret23;
					if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
						ret23 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
					} else {
						ret23 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret23.next;
						ret23.next = null;
					}
					ret23.elt = a3;
					var temp15 = ret23;
					temp15.next = W3.head;
					W3.head = temp15;
					W3.modified = true;
					W3.length++;
					aite3 = aite3.next;
					bite3 = bite3.next;
				} else if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(a3,b3)) {
					var ret24;
					if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
						ret24 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
					} else {
						ret24 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret24.next;
						ret24.next = null;
					}
					ret24.elt = a3;
					var temp16 = ret24;
					temp16.next = U3.head;
					U3.head = temp16;
					U3.modified = true;
					U3.length++;
					aite3 = aite3.next;
				} else {
					var ret25;
					if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
						ret25 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
					} else {
						ret25 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret25.next;
						ret25.next = null;
					}
					ret25.elt = b3;
					var temp17 = ret25;
					temp17.next = V3.head;
					V3.head = temp17;
					V3.modified = true;
					V3.length++;
					bite3 = bite3.next;
				}
			}
			while(aite3 != null) {
				var o6 = aite3.elt;
				var ret26;
				if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
					ret26 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
				} else {
					ret26 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret26.next;
					ret26.next = null;
				}
				ret26.elt = o6;
				var temp18 = ret26;
				temp18.next = U3.head;
				U3.head = temp18;
				U3.modified = true;
				U3.length++;
				aite3 = aite3.next;
			}
			while(bite3 != null) {
				var o7 = bite3.elt;
				var ret27;
				if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
					ret27 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
				} else {
					ret27 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret27.next;
					ret27.next = null;
				}
				ret27.elt = o7;
				var temp19 = ret27;
				temp19.next = V3.head;
				V3.head = temp19;
				V3.modified = true;
				V3.length++;
				bite3 = bite3.next;
			}
			while(U3.head != null) {
				var x9 = U3.pop_unsafe();
				var cx_ite8 = B3.head;
				while(cx_ite8 != null) {
					var y8 = cx_ite8.elt;
					x9.validate();
					y8.validate();
					if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x9,y8,_gthis)) {
						var ret28;
						if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
							ret28 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
						} else {
							ret28 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
							zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret28.next;
							ret28.next = null;
						}
						ret28.zip_listeners = true;
						if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x9,y8)) {
							ret28.a = x9;
							ret28.b = y8;
						} else {
							ret28.a = y8;
							ret28.b = x9;
						}
						set.try_insert(ret28);
					}
					cx_ite8 = cx_ite8.next;
				}
			}
			while(V3.head != null) {
				var x10 = V3.pop_unsafe();
				var cx_ite9 = W3.head;
				while(cx_ite9 != null) {
					var y9 = cx_ite9.elt;
					x10.validate();
					y9.validate();
					if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x10,y9,_gthis)) {
						var ret29;
						if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
							ret29 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
						} else {
							ret29 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
							zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret29.next;
							ret29.next = null;
						}
						ret29.zip_listeners = true;
						if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x10,y9)) {
							ret29.a = x10;
							ret29.b = y9;
						} else {
							ret29.a = y9;
							ret29.b = x10;
						}
						set.try_insert(ret29);
					}
					cx_ite9 = cx_ite9.next;
				}
			}
			while(W3.head != null) {
				var x11 = W3.pop_unsafe();
				x11.validate();
				x11.validate();
				if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x11,x11,_gthis)) {
					var ret30;
					if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
						ret30 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
					} else {
						ret30 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
						zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret30.next;
						ret30.next = null;
					}
					ret30.zip_listeners = true;
					if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x11,x11)) {
						ret30.a = x11;
						ret30.b = x11;
					} else {
						ret30.a = x11;
						ret30.b = x11;
					}
					set.try_insert(ret30);
				}
				var cx_ite10 = W3.head;
				while(cx_ite10 != null) {
					var y10 = cx_ite10.elt;
					x11.validate();
					y10.validate();
					if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x11,y10,_gthis)) {
						var ret31;
						if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
							ret31 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
						} else {
							ret31 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
							zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret31.next;
							ret31.next = null;
						}
						ret31.zip_listeners = true;
						if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x11,y10)) {
							ret31.a = x11;
							ret31.b = y10;
						} else {
							ret31.a = y10;
							ret31.b = x11;
						}
						set.try_insert(ret31);
					}
					cx_ite10 = cx_ite10.next;
				}
			}
			var cx_ite11 = W.head;
			while(cx_ite11 != null) {
				var y11 = cx_ite11.elt;
				var B4 = y11.cbsets;
				var U4 = zpp_$nape_callbacks_ZPP_$InteractionListener.UCbSet;
				var V4 = zpp_$nape_callbacks_ZPP_$InteractionListener.VCbSet;
				var W4 = zpp_$nape_callbacks_ZPP_$InteractionListener.WCbSet;
				var aite4 = x8.cbsets.head;
				var bite4 = B4.head;
				while(aite4 != null && bite4 != null) {
					var a4 = aite4.elt;
					var b4 = bite4.elt;
					if(a4 == b4) {
						var ret32;
						if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
							ret32 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
						} else {
							ret32 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret32.next;
							ret32.next = null;
						}
						ret32.elt = a4;
						var temp20 = ret32;
						temp20.next = W4.head;
						W4.head = temp20;
						W4.modified = true;
						W4.length++;
						aite4 = aite4.next;
						bite4 = bite4.next;
					} else if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(a4,b4)) {
						var ret33;
						if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
							ret33 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
						} else {
							ret33 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret33.next;
							ret33.next = null;
						}
						ret33.elt = a4;
						var temp21 = ret33;
						temp21.next = U4.head;
						U4.head = temp21;
						U4.modified = true;
						U4.length++;
						aite4 = aite4.next;
					} else {
						var ret34;
						if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
							ret34 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
						} else {
							ret34 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret34.next;
							ret34.next = null;
						}
						ret34.elt = b4;
						var temp22 = ret34;
						temp22.next = V4.head;
						V4.head = temp22;
						V4.modified = true;
						V4.length++;
						bite4 = bite4.next;
					}
				}
				while(aite4 != null) {
					var o8 = aite4.elt;
					var ret35;
					if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
						ret35 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
					} else {
						ret35 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret35.next;
						ret35.next = null;
					}
					ret35.elt = o8;
					var temp23 = ret35;
					temp23.next = U4.head;
					U4.head = temp23;
					U4.modified = true;
					U4.length++;
					aite4 = aite4.next;
				}
				while(bite4 != null) {
					var o9 = bite4.elt;
					var ret36;
					if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
						ret36 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
					} else {
						ret36 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret36.next;
						ret36.next = null;
					}
					ret36.elt = o9;
					var temp24 = ret36;
					temp24.next = V4.head;
					V4.head = temp24;
					V4.modified = true;
					V4.length++;
					bite4 = bite4.next;
				}
				while(U4.head != null) {
					var x12 = U4.pop_unsafe();
					var cx_ite12 = B4.head;
					while(cx_ite12 != null) {
						var y12 = cx_ite12.elt;
						x12.validate();
						y12.validate();
						if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x12,y12,_gthis)) {
							var ret37;
							if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
								ret37 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
							} else {
								ret37 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
								zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret37.next;
								ret37.next = null;
							}
							ret37.zip_listeners = true;
							if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x12,y12)) {
								ret37.a = x12;
								ret37.b = y12;
							} else {
								ret37.a = y12;
								ret37.b = x12;
							}
							set.try_insert(ret37);
						}
						cx_ite12 = cx_ite12.next;
					}
				}
				while(V4.head != null) {
					var x13 = V4.pop_unsafe();
					var cx_ite13 = W4.head;
					while(cx_ite13 != null) {
						var y13 = cx_ite13.elt;
						x13.validate();
						y13.validate();
						if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x13,y13,_gthis)) {
							var ret38;
							if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
								ret38 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
							} else {
								ret38 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
								zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret38.next;
								ret38.next = null;
							}
							ret38.zip_listeners = true;
							if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x13,y13)) {
								ret38.a = x13;
								ret38.b = y13;
							} else {
								ret38.a = y13;
								ret38.b = x13;
							}
							set.try_insert(ret38);
						}
						cx_ite13 = cx_ite13.next;
					}
				}
				while(W4.head != null) {
					var x14 = W4.pop_unsafe();
					x14.validate();
					x14.validate();
					if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x14,x14,_gthis)) {
						var ret39;
						if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
							ret39 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
						} else {
							ret39 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
							zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret39.next;
							ret39.next = null;
						}
						ret39.zip_listeners = true;
						if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x14,x14)) {
							ret39.a = x14;
							ret39.b = x14;
						} else {
							ret39.a = x14;
							ret39.b = x14;
						}
						set.try_insert(ret39);
					}
					var cx_ite14 = W4.head;
					while(cx_ite14 != null) {
						var y14 = cx_ite14.elt;
						x14.validate();
						y14.validate();
						if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x14,y14,_gthis)) {
							var ret40;
							if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
								ret40 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
							} else {
								ret40 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
								zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret40.next;
								ret40.next = null;
							}
							ret40.zip_listeners = true;
							if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x14,y14)) {
								ret40.a = x14;
								ret40.b = y14;
							} else {
								ret40.a = y14;
								ret40.b = x14;
							}
							set.try_insert(ret40);
						}
						cx_ite14 = cx_ite14.next;
					}
				}
				cx_ite11 = cx_ite11.next;
			}
		}
		if(set.parent != null) {
			var cur = set.parent;
			while(cur != null) if(cur.prev != null) {
				cur = cur.prev;
			} else if(cur.next != null) {
				cur = cur.next;
			} else {
				var pair = cur.data;
				if(fresh) {
					_gthis.space.freshListenerType(pair.a,pair.b);
				} else {
					_gthis.space.nullListenerType(pair.a,pair.b);
				}
				var o10 = pair;
				o10.a = o10.b = null;
				o10.listeners.clear();
				o10.next = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
				zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = o10;
				var ret41 = cur.parent;
				if(ret41 != null) {
					if(cur == ret41.prev) {
						ret41.prev = null;
					} else {
						ret41.next = null;
					}
					cur.parent = null;
				}
				var o11 = cur;
				o11.data = null;
				o11.lt = null;
				o11.swapped = null;
				o11.next = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
				zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = o11;
				cur = ret41;
			}
			set.parent = null;
		}
		var o12 = set;
		o12.data = null;
		o12.lt = null;
		o12.swapped = null;
		o12.next = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = o12;
	}
	,addedToSpace: function() {
		var _gthis = this;
		var pre = this.type == 3;
		var ite1 = this.options1.includes.head;
		var ite2 = this.options2.includes.head;
		while(ite1 != null && ite2 != null) {
			var cb1 = ite1.elt;
			var cb2 = ite2.elt;
			if(cb1 == cb2) {
				var pre1 = null;
				var cx_ite = cb1.listeners.head;
				while(cx_ite != null) {
					var j = cx_ite.elt;
					if(_gthis.precedence > j.precedence || _gthis.precedence == j.precedence && _gthis.id > j.id) {
						break;
					}
					pre1 = cx_ite;
					cx_ite = cx_ite.next;
				}
				var _this = cb1.listeners;
				var ret;
				if(zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool == null) {
					ret = new zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener();
				} else {
					ret = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = ret.next;
					ret.next = null;
				}
				ret.elt = _gthis;
				var temp = ret;
				if(pre1 == null) {
					temp.next = _this.head;
					_this.head = temp;
				} else {
					temp.next = pre1.next;
					pre1.next = temp;
				}
				_this.pushmod = _this.modified = true;
				_this.length++;
				var cx_ite1 = cb1.cbsets.head;
				while(cx_ite1 != null) {
					var cb = cx_ite1.elt;
					cb.zip_listeners = true;
					cb.invalidate_pairs();
					cx_ite1 = cx_ite1.next;
				}
				if(pre) {
					var cx_ite2 = cb1.interactors.head;
					while(cx_ite2 != null) {
						var i = cx_ite2.elt;
						i.wake();
						cx_ite2 = cx_ite2.next;
					}
				}
				ite1 = ite1.next;
				ite2 = ite2.next;
			} else if(cb1.id < cb2.id) {
				var pre2 = null;
				var cx_ite3 = cb1.listeners.head;
				while(cx_ite3 != null) {
					var j1 = cx_ite3.elt;
					if(_gthis.precedence > j1.precedence || _gthis.precedence == j1.precedence && _gthis.id > j1.id) {
						break;
					}
					pre2 = cx_ite3;
					cx_ite3 = cx_ite3.next;
				}
				var _this1 = cb1.listeners;
				var ret1;
				if(zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool == null) {
					ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener();
				} else {
					ret1 = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = ret1.next;
					ret1.next = null;
				}
				ret1.elt = _gthis;
				var temp1 = ret1;
				if(pre2 == null) {
					temp1.next = _this1.head;
					_this1.head = temp1;
				} else {
					temp1.next = pre2.next;
					pre2.next = temp1;
				}
				_this1.pushmod = _this1.modified = true;
				_this1.length++;
				var cx_ite4 = cb1.cbsets.head;
				while(cx_ite4 != null) {
					var cb3 = cx_ite4.elt;
					cb3.zip_listeners = true;
					cb3.invalidate_pairs();
					cx_ite4 = cx_ite4.next;
				}
				if(pre) {
					var cx_ite5 = cb1.interactors.head;
					while(cx_ite5 != null) {
						var i1 = cx_ite5.elt;
						i1.wake();
						cx_ite5 = cx_ite5.next;
					}
				}
				ite1 = ite1.next;
			} else {
				var pre3 = null;
				var cx_ite6 = cb2.listeners.head;
				while(cx_ite6 != null) {
					var j2 = cx_ite6.elt;
					if(_gthis.precedence > j2.precedence || _gthis.precedence == j2.precedence && _gthis.id > j2.id) {
						break;
					}
					pre3 = cx_ite6;
					cx_ite6 = cx_ite6.next;
				}
				var _this2 = cb2.listeners;
				var ret2;
				if(zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool == null) {
					ret2 = new zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener();
				} else {
					ret2 = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = ret2.next;
					ret2.next = null;
				}
				ret2.elt = _gthis;
				var temp2 = ret2;
				if(pre3 == null) {
					temp2.next = _this2.head;
					_this2.head = temp2;
				} else {
					temp2.next = pre3.next;
					pre3.next = temp2;
				}
				_this2.pushmod = _this2.modified = true;
				_this2.length++;
				var cx_ite7 = cb2.cbsets.head;
				while(cx_ite7 != null) {
					var cb4 = cx_ite7.elt;
					cb4.zip_listeners = true;
					cb4.invalidate_pairs();
					cx_ite7 = cx_ite7.next;
				}
				if(pre) {
					var cx_ite8 = cb2.interactors.head;
					while(cx_ite8 != null) {
						var i2 = cx_ite8.elt;
						i2.wake();
						cx_ite8 = cx_ite8.next;
					}
				}
				ite2 = ite2.next;
			}
		}
		while(ite1 != null) {
			var cb5 = ite1.elt;
			var pre4 = null;
			var cx_ite9 = cb5.listeners.head;
			while(cx_ite9 != null) {
				var j3 = cx_ite9.elt;
				if(_gthis.precedence > j3.precedence || _gthis.precedence == j3.precedence && _gthis.id > j3.id) {
					break;
				}
				pre4 = cx_ite9;
				cx_ite9 = cx_ite9.next;
			}
			var _this3 = cb5.listeners;
			var ret3;
			if(zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool == null) {
				ret3 = new zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener();
			} else {
				ret3 = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = ret3.next;
				ret3.next = null;
			}
			ret3.elt = _gthis;
			var temp3 = ret3;
			if(pre4 == null) {
				temp3.next = _this3.head;
				_this3.head = temp3;
			} else {
				temp3.next = pre4.next;
				pre4.next = temp3;
			}
			_this3.pushmod = _this3.modified = true;
			_this3.length++;
			var cx_ite10 = cb5.cbsets.head;
			while(cx_ite10 != null) {
				var cb6 = cx_ite10.elt;
				cb6.zip_listeners = true;
				cb6.invalidate_pairs();
				cx_ite10 = cx_ite10.next;
			}
			if(pre) {
				var cx_ite11 = cb5.interactors.head;
				while(cx_ite11 != null) {
					var i3 = cx_ite11.elt;
					i3.wake();
					cx_ite11 = cx_ite11.next;
				}
			}
			ite1 = ite1.next;
		}
		while(ite2 != null) {
			var cb7 = ite2.elt;
			var pre5 = null;
			var cx_ite12 = cb7.listeners.head;
			while(cx_ite12 != null) {
				var j4 = cx_ite12.elt;
				if(_gthis.precedence > j4.precedence || _gthis.precedence == j4.precedence && _gthis.id > j4.id) {
					break;
				}
				pre5 = cx_ite12;
				cx_ite12 = cx_ite12.next;
			}
			var _this4 = cb7.listeners;
			var ret4;
			if(zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool == null) {
				ret4 = new zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener();
			} else {
				ret4 = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = ret4.next;
				ret4.next = null;
			}
			ret4.elt = _gthis;
			var temp4 = ret4;
			if(pre5 == null) {
				temp4.next = _this4.head;
				_this4.head = temp4;
			} else {
				temp4.next = pre5.next;
				pre5.next = temp4;
			}
			_this4.pushmod = _this4.modified = true;
			_this4.length++;
			var cx_ite13 = cb7.cbsets.head;
			while(cx_ite13 != null) {
				var cb8 = cx_ite13.elt;
				cb8.zip_listeners = true;
				cb8.invalidate_pairs();
				cx_ite13 = cx_ite13.next;
			}
			if(pre) {
				var cx_ite14 = cb7.interactors.head;
				while(cx_ite14 != null) {
					var i4 = cx_ite14.elt;
					i4.wake();
					cx_ite14 = cx_ite14.next;
				}
			}
			ite2 = ite2.next;
		}
		this.options1.handler = $bind(this,this.cbtype_change1);
		this.options2.handler = $bind(this,this.cbtype_change2);
		this.with_uniquesets(true);
	}
	,removedFromSpace: function() {
		var _gthis = this;
		this.with_uniquesets(false);
		var pre = this.type == 3;
		var ite1 = this.options1.includes.head;
		var ite2 = this.options2.includes.head;
		while(ite1 != null && ite2 != null) {
			var cb1 = ite1.elt;
			var cb2 = ite2.elt;
			if(cb1 == cb2) {
				cb1.listeners.remove(_gthis);
				var cx_ite = cb1.cbsets.head;
				while(cx_ite != null) {
					var cb = cx_ite.elt;
					cb.zip_listeners = true;
					cb.invalidate_pairs();
					cx_ite = cx_ite.next;
				}
				if(pre) {
					var cx_ite1 = cb1.interactors.head;
					while(cx_ite1 != null) {
						var i = cx_ite1.elt;
						i.wake();
						cx_ite1 = cx_ite1.next;
					}
				}
				ite1 = ite1.next;
				ite2 = ite2.next;
			} else if(cb1.id < cb2.id) {
				cb1.listeners.remove(_gthis);
				var cx_ite2 = cb1.cbsets.head;
				while(cx_ite2 != null) {
					var cb3 = cx_ite2.elt;
					cb3.zip_listeners = true;
					cb3.invalidate_pairs();
					cx_ite2 = cx_ite2.next;
				}
				if(pre) {
					var cx_ite3 = cb1.interactors.head;
					while(cx_ite3 != null) {
						var i1 = cx_ite3.elt;
						i1.wake();
						cx_ite3 = cx_ite3.next;
					}
				}
				ite1 = ite1.next;
			} else {
				cb2.listeners.remove(_gthis);
				var cx_ite4 = cb2.cbsets.head;
				while(cx_ite4 != null) {
					var cb4 = cx_ite4.elt;
					cb4.zip_listeners = true;
					cb4.invalidate_pairs();
					cx_ite4 = cx_ite4.next;
				}
				if(pre) {
					var cx_ite5 = cb2.interactors.head;
					while(cx_ite5 != null) {
						var i2 = cx_ite5.elt;
						i2.wake();
						cx_ite5 = cx_ite5.next;
					}
				}
				ite2 = ite2.next;
			}
		}
		while(ite1 != null) {
			var cb5 = ite1.elt;
			cb5.listeners.remove(_gthis);
			var cx_ite6 = cb5.cbsets.head;
			while(cx_ite6 != null) {
				var cb6 = cx_ite6.elt;
				cb6.zip_listeners = true;
				cb6.invalidate_pairs();
				cx_ite6 = cx_ite6.next;
			}
			if(pre) {
				var cx_ite7 = cb5.interactors.head;
				while(cx_ite7 != null) {
					var i3 = cx_ite7.elt;
					i3.wake();
					cx_ite7 = cx_ite7.next;
				}
			}
			ite1 = ite1.next;
		}
		while(ite2 != null) {
			var cb7 = ite2.elt;
			cb7.listeners.remove(_gthis);
			var cx_ite8 = cb7.cbsets.head;
			while(cx_ite8 != null) {
				var cb8 = cx_ite8.elt;
				cb8.zip_listeners = true;
				cb8.invalidate_pairs();
				cx_ite8 = cx_ite8.next;
			}
			if(pre) {
				var cx_ite9 = cb7.interactors.head;
				while(cx_ite9 != null) {
					var i4 = cx_ite9.elt;
					i4.wake();
					cx_ite9 = cx_ite9.next;
				}
			}
			ite2 = ite2.next;
		}
		this.options1.handler = null;
		this.options2.handler = null;
	}
	,cbtype_change1: function(cb,included,added) {
		this.cbtype_change(this.options1,cb,included,added);
	}
	,cbtype_change2: function(cb,included,added) {
		this.cbtype_change(this.options2,cb,included,added);
	}
	,cbtype_change: function(options,cb,included,added) {
		var _this = this.space;
		this.removedFromSpace();
		if(included) {
			if(added) {
				var pre = null;
				var cx_ite = options.includes.head;
				while(cx_ite != null) {
					var j = cx_ite.elt;
					if(cb.id < j.id) {
						break;
					}
					pre = cx_ite;
					cx_ite = cx_ite.next;
				}
				var _this1 = options.includes;
				var ret;
				if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
					ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
				} else {
					ret = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret.next;
					ret.next = null;
				}
				ret.elt = cb;
				var temp = ret;
				if(pre == null) {
					temp.next = _this1.head;
					_this1.head = temp;
				} else {
					temp.next = pre.next;
					pre.next = temp;
				}
				_this1.pushmod = _this1.modified = true;
				_this1.length++;
			} else {
				options.includes.remove(cb);
			}
		} else if(added) {
			var pre1 = null;
			var cx_ite1 = options.excludes.head;
			while(cx_ite1 != null) {
				var j1 = cx_ite1.elt;
				if(cb.id < j1.id) {
					break;
				}
				pre1 = cx_ite1;
				cx_ite1 = cx_ite1.next;
			}
			var _this2 = options.excludes;
			var ret1;
			if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
				ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
			} else {
				ret1 = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.elt = cb;
			var temp1 = ret1;
			if(pre1 == null) {
				temp1.next = _this2.head;
				_this2.head = temp1;
			} else {
				temp1.next = pre1.next;
				pre1.next = temp1;
			}
			_this2.pushmod = _this2.modified = true;
			_this2.length++;
		} else {
			options.excludes.remove(cb);
		}
		this.addedToSpace();
		var _this3 = this.space;
	}
	,__class__: zpp_$nape_callbacks_ZPP_$InteractionListener
});
var zpp_$nape_callbacks_ZPP_$OptionType = function() {
	this.wrap_excludes = null;
	this.wrap_includes = null;
	this.excludes = null;
	this.includes = null;
	this.handler = null;
	this.outer = null;
	this.includes = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
	this.excludes = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
};
zpp_$nape_callbacks_ZPP_$OptionType.__name__ = true;
zpp_$nape_callbacks_ZPP_$OptionType.argument = function(val) {
	if(val == null) {
		return new nape_callbacks_OptionType();
	} else if(js_Boot.__instanceof(val,nape_callbacks_OptionType)) {
		return val;
	} else {
		return new nape_callbacks_OptionType().including(val);
	}
};
zpp_$nape_callbacks_ZPP_$OptionType.prototype = {
	setup_includes: function() {
		this.wrap_includes = zpp_$nape_util_ZPP_$CbTypeList.get(this.includes,true);
	}
	,setup_excludes: function() {
		this.wrap_excludes = zpp_$nape_util_ZPP_$CbTypeList.get(this.excludes,true);
	}
	,nonemptyintersection: function(xs,ys) {
		var ret = false;
		var xite = xs.head;
		var eite = ys.head;
		while(eite != null && xite != null) {
			var ex = eite.elt;
			var xi = xite.elt;
			if(ex == xi) {
				ret = true;
				break;
			} else if(ex.id < xi.id) {
				eite = eite.next;
			} else {
				xite = xite.next;
			}
		}
		return ret;
	}
	,append_type: function(list,val) {
		if(list == this.includes) {
			if(!this.includes.has(val)) {
				if(!this.excludes.has(val)) {
					if(this.handler != null) {
						this.handler(val,true,true);
					} else {
						var pre = null;
						var cx_ite = this.includes.head;
						while(cx_ite != null) {
							var j = cx_ite.elt;
							if(val.id < j.id) {
								break;
							}
							pre = cx_ite;
							cx_ite = cx_ite.next;
						}
						var _this = this.includes;
						var ret;
						if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
							ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
						} else {
							ret = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret.next;
							ret.next = null;
						}
						ret.elt = val;
						var temp = ret;
						if(pre == null) {
							temp.next = _this.head;
							_this.head = temp;
						} else {
							temp.next = pre.next;
							pre.next = temp;
						}
						_this.pushmod = _this.modified = true;
						_this.length++;
					}
				} else if(this.handler != null) {
					this.handler(val,false,false);
				} else {
					this.excludes.remove(val);
				}
			}
		} else if(!this.excludes.has(val)) {
			if(!this.includes.has(val)) {
				if(this.handler != null) {
					this.handler(val,false,true);
				} else {
					var pre1 = null;
					var cx_ite1 = this.excludes.head;
					while(cx_ite1 != null) {
						var j1 = cx_ite1.elt;
						if(val.id < j1.id) {
							break;
						}
						pre1 = cx_ite1;
						cx_ite1 = cx_ite1.next;
					}
					var _this1 = this.excludes;
					var ret1;
					if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
						ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
					} else {
						ret1 = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret1.next;
						ret1.next = null;
					}
					ret1.elt = val;
					var temp1 = ret1;
					if(pre1 == null) {
						temp1.next = _this1.head;
						_this1.head = temp1;
					} else {
						temp1.next = pre1.next;
						pre1.next = temp1;
					}
					_this1.pushmod = _this1.modified = true;
					_this1.length++;
				}
			} else if(this.handler != null) {
				this.handler(val,true,false);
			} else {
				this.includes.remove(val);
			}
		}
	}
	,append: function(list,val) {
		if(val == null) {
			throw new js__$Boot_HaxeError("Error: Cannot append null, only CbType and CbType list values");
		}
		if(js_Boot.__instanceof(val,nape_callbacks_CbType)) {
			var cb = val;
			this.append_type(list,cb.zpp_inner);
		} else if(js_Boot.__instanceof(val,nape_callbacks_CbTypeList)) {
			var cbs = val;
			cbs.zpp_inner.valmod();
			var _g = nape_callbacks_CbTypeIterator.get(cbs);
			while(true) {
				_g.zpp_inner.zpp_inner.valmod();
				var _this = _g.zpp_inner;
				_this.zpp_inner.valmod();
				if(_this.zpp_inner.zip_length) {
					_this.zpp_inner.zip_length = false;
					_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
				}
				var length = _this.zpp_inner.user_length;
				_g.zpp_critical = true;
				var tmp;
				if(_g.zpp_i < length) {
					tmp = true;
				} else {
					_g.zpp_next = nape_callbacks_CbTypeIterator.zpp_pool;
					nape_callbacks_CbTypeIterator.zpp_pool = _g;
					_g.zpp_inner = null;
					tmp = false;
				}
				if(!tmp) {
					break;
				}
				_g.zpp_critical = false;
				var cb1 = _g.zpp_inner.at(_g.zpp_i++);
				this.append_type(list,cb1.zpp_inner);
			}
		} else if((val instanceof Array) && val.__enum__ == null) {
			var cbs1 = val;
			var _g1 = 0;
			while(_g1 < cbs1.length) {
				var cb2 = cbs1[_g1];
				++_g1;
				if(!js_Boot.__instanceof(cb2,nape_callbacks_CbType)) {
					throw new js__$Boot_HaxeError("Error: Cannot append non-CbType or CbType list value");
				}
				var cbx = cb2;
				this.append_type(list,cbx.zpp_inner);
			}
		} else {
			throw new js__$Boot_HaxeError("Error: Cannot append non-CbType or CbType list value");
		}
	}
	,__class__: zpp_$nape_callbacks_ZPP_$OptionType
};
var zpp_$nape_constraint_ZPP_$Constraint = function() {
	this.pre_dt = 0.0;
	this.cbSet = null;
	this.cbTypes = null;
	this.__velocity = false;
	this.ignore = false;
	this.component = null;
	this.removeOnBreak = false;
	this.breakUnderError = false;
	this.breakUnderForce = false;
	this.maxError = 0.0;
	this.maxForce = 0.0;
	this.damping = 0.0;
	this.frequency = 0.0;
	this.stiff = false;
	this.active = false;
	this.space = null;
	this.compound = null;
	this.id = 0;
	this.outer = null;
	this.__velocity = false;
	this.id = zpp_$nape_ZPP_$ID.Constraint();
	this.stiff = true;
	this.active = true;
	this.ignore = false;
	this.frequency = 10;
	this.damping = 1;
	this.maxForce = Infinity;
	this.maxError = Infinity;
	this.breakUnderForce = false;
	this.removeOnBreak = true;
	this.pre_dt = -1.0;
	this.cbTypes = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
};
zpp_$nape_constraint_ZPP_$Constraint.__name__ = true;
zpp_$nape_constraint_ZPP_$Constraint.prototype = {
	immutable_midstep: function(name) {
		if(this.space != null && this.space.midstep) {
			throw new js__$Boot_HaxeError("Error: Constraint::" + name + " cannot be set during space step()");
		}
	}
	,insert_cbtype: function(cb) {
		if(!this.cbTypes.has(cb)) {
			if(this.space != null) {
				this.dealloc_cbSet();
				cb.constraints.add(this);
			}
			var pre = null;
			var cx_ite = this.cbTypes.head;
			while(cx_ite != null) {
				var j = cx_ite.elt;
				if(cb.id < j.id) {
					break;
				}
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			var _this = this.cbTypes;
			var ret;
			if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
				ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
			} else {
				ret = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret.next;
				ret.next = null;
			}
			ret.elt = cb;
			var temp = ret;
			if(pre == null) {
				temp.next = _this.head;
				_this.head = temp;
			} else {
				temp.next = pre.next;
				pre.next = temp;
			}
			_this.pushmod = _this.modified = true;
			_this.length++;
			if(this.space != null) {
				this.alloc_cbSet();
				this.wake();
			}
		}
	}
	,alloc_cbSet: function() {
		if((this.cbSet = this.space.cbsets.get(this.cbTypes)) != null) {
			this.cbSet.count++;
			this.cbSet.constraints.add(this);
		}
	}
	,dealloc_cbSet: function() {
		if(this.cbSet != null) {
			this.cbSet.constraints.remove(this);
			if(--this.cbSet.count == 0) {
				this.space.cbsets.remove(this.cbSet);
				var o = this.cbSet;
				o.listeners.clear();
				o.zip_listeners = true;
				o.bodylisteners.clear();
				o.zip_bodylisteners = true;
				o.conlisteners.clear();
				o.zip_conlisteners = true;
				while(o.cbTypes.head != null) {
					var cb = o.cbTypes.pop_unsafe();
					cb.cbsets.remove(o);
				}
				o.next = zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool;
				zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool = o;
			}
			this.cbSet = null;
		}
	}
	,addedToSpace: function() {
		if(this.active) {
			this.activeInSpace();
		}
		this.activeBodies();
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.constraints.add(this);
			cx_ite = cx_ite.next;
		}
	}
	,removedFromSpace: function() {
		if(this.active) {
			this.inactiveOrOutSpace();
		}
		this.inactiveBodies();
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.constraints.remove(this);
			cx_ite = cx_ite.next;
		}
	}
	,activeInSpace: function() {
		this.alloc_cbSet();
		if(zpp_$nape_space_ZPP_$Component.zpp_pool == null) {
			this.component = new zpp_$nape_space_ZPP_$Component();
		} else {
			this.component = zpp_$nape_space_ZPP_$Component.zpp_pool;
			zpp_$nape_space_ZPP_$Component.zpp_pool = this.component.next;
			this.component.next = null;
		}
		var _this = this.component;
		this.component.isBody = false;
		this.component.constraint = this;
	}
	,inactiveOrOutSpace: function() {
		this.dealloc_cbSet();
		var o = this.component;
		o.body = null;
		o.constraint = null;
		o.next = zpp_$nape_space_ZPP_$Component.zpp_pool;
		zpp_$nape_space_ZPP_$Component.zpp_pool = o;
		this.component = null;
	}
	,activeBodies: function() {
	}
	,inactiveBodies: function() {
	}
	,clearcache: function() {
	}
	,validate: function() {
	}
	,wake_connected: function() {
	}
	,forest: function() {
	}
	,pair_exists: function(id,di) {
		return false;
	}
	,broken: function() {
	}
	,warmStart: function() {
	}
	,preStep: function(dt) {
		return false;
	}
	,applyImpulseVel: function() {
		return false;
	}
	,applyImpulsePos: function() {
		return false;
	}
	,wake: function() {
		if(this.space != null) {
			this.space.wake_constraint(this);
		}
	}
	,__class__: zpp_$nape_constraint_ZPP_$Constraint
};
var zpp_$nape_constraint_ZPP_$AngleJoint = function() {
	this.stepped = false;
	this.bias = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAcc = 0.0;
	this.kMass = 0.0;
	this.b2 = null;
	this.b1 = null;
	this.scale = 0.0;
	this.equal = false;
	this.slack = false;
	this.jointMax = 0.0;
	this.jointMin = 0.0;
	this.ratio = 0.0;
	this.outer_zn = null;
	zpp_$nape_constraint_ZPP_$Constraint.call(this);
	this.ratio = 1;
	this.jAcc = 0;
	this.slack = false;
	this.jMax = Infinity;
	this.stepped = false;
};
zpp_$nape_constraint_ZPP_$AngleJoint.__name__ = true;
zpp_$nape_constraint_ZPP_$AngleJoint.__super__ = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$AngleJoint.prototype = $extend(zpp_$nape_constraint_ZPP_$Constraint.prototype,{
	activeBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.add(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.add(this);
			}
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.remove(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.remove(this);
			}
		}
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) {
			throw new js__$Boot_HaxeError("Error: AngleJoint cannot be simulated null bodies");
		}
		if(this.b1 == this.b2) {
			throw new js__$Boot_HaxeError("Error: AngleJoint cannot be simulated with body1 == body2");
		}
		if(this.b1.space != this.space || this.b2.space != this.space) {
			throw new js__$Boot_HaxeError("Error: Constraints must have each body within the same space to which the constraint has been assigned");
		}
		if(this.jointMin > this.jointMax) {
			throw new js__$Boot_HaxeError("Error: AngleJoint must have jointMin <= jointMax");
		}
		if(this.b1.type != 2 && this.b2.type != 2) {
			throw new js__$Boot_HaxeError("Error: Constraints cannot have both bodies non-dynamic");
		}
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == 2) {
			this.b1.wake();
		}
		if(this.b2 != null && this.b2.type == 2) {
			this.b2.wake();
		}
	}
	,forest: function() {
		if(this.b1.type == 2) {
			var xr;
			if(this.b1.component == this.b1.component.parent) {
				xr = this.b1.component;
			} else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) {
				yr = this.component;
			} else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) {
					xr.parent = yr;
				} else if(xr.rank > yr.rank) {
					yr.parent = xr;
				} else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == 2) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) {
				xr1 = this.b2.component;
			} else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) {
				yr1 = this.component;
			} else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) {
					xr1.parent = yr1;
				} else if(xr1.rank > yr1.rank) {
					yr1.parent = xr1;
				} else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		if(!(this.b1.id == id && this.b2.id == di)) {
			if(this.b1.id == di) {
				return this.b2.id == id;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,clearcache: function() {
		this.jAcc = 0;
		this.pre_dt = -1.0;
		this.slack = false;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) {
			this.pre_dt = dt;
		}
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.equal = this.jointMin == this.jointMax;
		var C = this.ratio * this.b2.rot - this.b1.rot;
		if(this.equal) {
			C -= this.jointMax;
			this.slack = false;
			this.scale = 1.0;
		} else if(C < this.jointMin) {
			C = this.jointMin - C;
			this.scale = -1.0;
			this.slack = false;
		} else if(C > this.jointMax) {
			C -= this.jointMax;
			this.scale = 1.0;
			this.slack = false;
		} else {
			this.scale = 0.0;
			C = 0;
			this.slack = true;
		}
		var C1 = C;
		if(!this.slack) {
			this.kMass = this.b1.sinertia + this.ratio * this.ratio * this.b2.sinertia;
			if(this.kMass != 0) {
				this.kMass = 1 / this.kMass;
			} else {
				this.jAcc = 0;
			}
			if(!this.stiff) {
				if(this.breakUnderError && C1 * C1 > this.maxError * this.maxError) {
					return true;
				}
				var biasCoef;
				var omega = 2 * Math.PI * this.frequency;
				this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
				var ig = 1 / (1 + this.gamma);
				biasCoef = dt * omega * omega * this.gamma;
				this.gamma *= ig;
				this.kMass *= ig;
				this.bias = -C1 * biasCoef;
				if(this.bias < -this.maxError) {
					this.bias = -this.maxError;
				} else if(this.bias > this.maxError) {
					this.bias = this.maxError;
				}
			} else {
				this.bias = 0;
				this.gamma = 0;
			}
			this.jAcc *= dtratio;
			this.jMax = this.maxForce * dt;
		}
		return false;
	}
	,warmStart: function() {
		if(!this.slack) {
			this.b1.angvel -= this.scale * this.b1.iinertia * this.jAcc;
			this.b2.angvel += this.ratio * this.scale * this.b2.iinertia * this.jAcc;
		}
	}
	,applyImpulseVel: function() {
		if(this.slack) {
			return false;
		}
		var E = this.scale * (this.ratio * (this.b2.angvel + this.b2.kinangvel) - this.b1.angvel - this.b1.kinangvel);
		var j = this.kMass * (this.bias - E) - this.jAcc * this.gamma;
		var jOld = this.jAcc;
		this.jAcc += j;
		if(!this.equal && this.jAcc > 0) {
			this.jAcc = 0;
		}
		if(this.breakUnderForce && (this.jAcc > this.jMax || this.jAcc < -this.jMax)) {
			return true;
		}
		if(!this.stiff) {
			if(this.jAcc > this.jMax) {
				this.jAcc = this.jMax;
			} else if(this.jAcc < -this.jMax) {
				this.jAcc = -this.jMax;
			}
		}
		j = this.jAcc - jOld;
		this.b1.angvel -= this.scale * this.b1.iinertia * j;
		this.b2.angvel += this.ratio * this.scale * this.b2.iinertia * j;
		return false;
	}
	,applyImpulsePos: function() {
		var E;
		var j;
		var slack;
		var C = this.ratio * this.b2.rot - this.b1.rot;
		if(this.equal) {
			C -= this.jointMax;
			slack = false;
			this.scale = 1.0;
		} else if(C < this.jointMin) {
			C = this.jointMin - C;
			this.scale = -1.0;
			slack = false;
		} else if(C > this.jointMax) {
			C -= this.jointMax;
			this.scale = 1.0;
			slack = false;
		} else {
			this.scale = 0.0;
			C = 0;
			slack = true;
		}
		E = C;
		if(!slack) {
			if(this.breakUnderError && E * E > this.maxError * this.maxError) {
				return true;
			}
			E *= 0.5;
			j = -E * this.kMass;
			if(this.equal || j < 0) {
				var _this = this.b1;
				var dr = -this.scale * j * this.b1.iinertia;
				_this.rot += dr;
				if(dr * dr > 0.0001) {
					_this.axisx = Math.sin(_this.rot);
					_this.axisy = Math.cos(_this.rot);
				} else {
					var d2 = dr * dr;
					var p = 1 - 0.5 * d2;
					var m = 1 - d2 * d2 / 8;
					var nx = (p * _this.axisx + dr * _this.axisy) * m;
					_this.axisy = (p * _this.axisy - dr * _this.axisx) * m;
					_this.axisx = nx;
				}
				var _this1 = this.b2;
				var dr1 = this.ratio * this.scale * j * this.b2.iinertia;
				_this1.rot += dr1;
				if(dr1 * dr1 > 0.0001) {
					_this1.axisx = Math.sin(_this1.rot);
					_this1.axisy = Math.cos(_this1.rot);
				} else {
					var d21 = dr1 * dr1;
					var p1 = 1 - 0.5 * d21;
					var m1 = 1 - d21 * d21 / 8;
					var nx1 = (p1 * _this1.axisx + dr1 * _this1.axisy) * m1;
					_this1.axisy = (p1 * _this1.axisy - dr1 * _this1.axisx) * m1;
					_this1.axisx = nx1;
				}
			}
		}
		return false;
	}
	,__class__: zpp_$nape_constraint_ZPP_$AngleJoint
});
var zpp_$nape_constraint_ZPP_$DistanceJoint = function() {
	this.stepped = false;
	this.bias = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAcc = 0.0;
	this.kMass = 0.0;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.b2 = null;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.b1 = null;
	this.cx2 = 0.0;
	this.cx1 = 0.0;
	this.ny = 0.0;
	this.nx = 0.0;
	this.equal = false;
	this.slack = false;
	this.jointMax = 0.0;
	this.jointMin = 0.0;
	this.outer_zn = null;
	zpp_$nape_constraint_ZPP_$Constraint.call(this);
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
	this.jAcc = 0;
	this.jMax = Infinity;
	this.stepped = false;
	this.cx1 = this.cx2 = 0;
};
zpp_$nape_constraint_ZPP_$DistanceJoint.__name__ = true;
zpp_$nape_constraint_ZPP_$DistanceJoint.__super__ = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$DistanceJoint.prototype = $extend(zpp_$nape_constraint_ZPP_$Constraint.prototype,{
	activeBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.add(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.add(this);
			}
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.remove(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.remove(this);
			}
		}
	}
	,validate_a1: function() {
		this.wrap_a1.zpp_inner.x = this.a1localx;
		this.wrap_a1.zpp_inner.y = this.a1localy;
	}
	,invalidate_a1: function(x) {
		this.immutable_midstep("Constraint::" + "a1");
		this.a1localx = x.x;
		this.a1localy = x.y;
		this.wake();
	}
	,setup_a1: function() {
		var x = this.a1localx;
		var y = this.a1localy;
		if(x != x || y != y) {
			throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
			ret = new nape_geom_Vec2();
		} else {
			ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
				ret1 = new zpp_$nape_geom_ZPP_$Vec2();
			} else {
				ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = ret.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = ret.zpp_inner;
				if(_this2._validate != null) {
					_this2._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this3 = ret.zpp_inner;
				if(_this3._invalidate != null) {
					_this3._invalidate(_this3);
				}
			}
		}
		ret.zpp_inner.weak = false;
		this.wrap_a1 = ret;
		this.wrap_a1.zpp_inner._inuse = true;
		this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
		this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
	}
	,validate_a2: function() {
		this.wrap_a2.zpp_inner.x = this.a2localx;
		this.wrap_a2.zpp_inner.y = this.a2localy;
	}
	,invalidate_a2: function(x) {
		this.immutable_midstep("Constraint::" + "a2");
		this.a2localx = x.x;
		this.a2localy = x.y;
		this.wake();
	}
	,setup_a2: function() {
		var x = this.a2localx;
		var y = this.a2localy;
		if(x != x || y != y) {
			throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
			ret = new nape_geom_Vec2();
		} else {
			ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
				ret1 = new zpp_$nape_geom_ZPP_$Vec2();
			} else {
				ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = ret.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = ret.zpp_inner;
				if(_this2._validate != null) {
					_this2._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this3 = ret.zpp_inner;
				if(_this3._invalidate != null) {
					_this3._invalidate(_this3);
				}
			}
		}
		ret.zpp_inner.weak = false;
		this.wrap_a2 = ret;
		this.wrap_a2.zpp_inner._inuse = true;
		this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
		this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) {
			throw new js__$Boot_HaxeError("Error: DistanceJoint cannot be simulated null bodies");
		}
		if(this.b1 == this.b2) {
			throw new js__$Boot_HaxeError("Error: DistanceJoint cannot be simulated with body1 == body2");
		}
		if(this.b1.space != this.space || this.b2.space != this.space) {
			throw new js__$Boot_HaxeError("Error: Constraints must have each body within the same space to which the constraint has been assigned");
		}
		if(this.jointMin > this.jointMax) {
			throw new js__$Boot_HaxeError("Error: DistanceJoint must have jointMin <= jointMax");
		}
		if(this.b1.type != 2 && this.b2.type != 2) {
			throw new js__$Boot_HaxeError("Error: Constraints cannot have both bodies non-dynamic");
		}
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == 2) {
			this.b1.wake();
		}
		if(this.b2 != null && this.b2.type == 2) {
			this.b2.wake();
		}
	}
	,forest: function() {
		if(this.b1.type == 2) {
			var xr;
			if(this.b1.component == this.b1.component.parent) {
				xr = this.b1.component;
			} else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) {
				yr = this.component;
			} else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) {
					xr.parent = yr;
				} else if(xr.rank > yr.rank) {
					yr.parent = xr;
				} else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == 2) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) {
				xr1 = this.b2.component;
			} else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) {
				yr1 = this.component;
			} else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) {
					xr1.parent = yr1;
				} else if(xr1.rank > yr1.rank) {
					yr1.parent = xr1;
				} else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		if(!(this.b1.id == id && this.b2.id == di)) {
			if(this.b1.id == di) {
				return this.b2.id == id;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,clearcache: function() {
		this.jAcc = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) {
			this.pre_dt = dt;
		}
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.equal = this.jointMin == this.jointMax;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		this.nx = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
		this.ny = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
		var C = this.nx * this.nx + this.ny * this.ny;
		if(C < nape_Config.epsilon) {
			this.nx = 0;
			this.ny = 0;
			C = 0;
			this.slack = true;
		} else {
			C = Math.sqrt(C);
			var t = 1.0 / C;
			this.nx *= t;
			this.ny *= t;
			if(this.equal) {
				C -= this.jointMax;
				this.slack = false;
			} else if(C < this.jointMin) {
				C = this.jointMin - C;
				this.nx = -this.nx;
				this.ny = -this.ny;
				this.slack = false;
			} else if(C > this.jointMax) {
				C -= this.jointMax;
				this.slack = false;
			} else {
				this.nx = 0;
				this.ny = 0;
				C = 0;
				this.slack = true;
			}
		}
		var C1 = C;
		if(!this.slack) {
			this.cx1 = this.ny * this.a1relx - this.nx * this.a1rely;
			this.cx2 = this.ny * this.a2relx - this.nx * this.a2rely;
			this.kMass = this.b1.smass + this.b2.smass + this.cx1 * this.cx1 * this.b1.sinertia + this.cx2 * this.cx2 * this.b2.sinertia;
			if(this.kMass != 0) {
				this.kMass = 1 / this.kMass;
			} else {
				this.jAcc = 0;
			}
			if(!this.stiff) {
				if(this.breakUnderError && C1 * C1 > this.maxError * this.maxError) {
					return true;
				}
				var biasCoef;
				var omega = 2 * Math.PI * this.frequency;
				this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
				var ig = 1 / (1 + this.gamma);
				biasCoef = dt * omega * omega * this.gamma;
				this.gamma *= ig;
				this.kMass *= ig;
				this.bias = -C1 * biasCoef;
				if(this.bias < -this.maxError) {
					this.bias = -this.maxError;
				} else if(this.bias > this.maxError) {
					this.bias = this.maxError;
				}
			} else {
				this.bias = 0;
				this.gamma = 0;
			}
			this.jAcc *= dtratio;
			this.jMax = this.maxForce * dt;
		}
		return false;
	}
	,warmStart: function() {
		if(!this.slack) {
			var t = this.b1.imass * this.jAcc;
			this.b1.velx -= this.nx * t;
			this.b1.vely -= this.ny * t;
			var t1 = this.b2.imass * this.jAcc;
			this.b2.velx += this.nx * t1;
			this.b2.vely += this.ny * t1;
			this.b1.angvel -= this.cx1 * this.b1.iinertia * this.jAcc;
			this.b2.angvel += this.cx2 * this.b2.iinertia * this.jAcc;
		}
	}
	,applyImpulseVel: function() {
		if(this.slack) {
			return false;
		}
		var E = this.nx * (this.b2.velx + this.b2.kinvelx - this.b1.velx - this.b1.kinvelx) + this.ny * (this.b2.vely + this.b2.kinvely - this.b1.vely - this.b1.kinvely) + (this.b2.angvel + this.b2.kinangvel) * this.cx2 - (this.b1.angvel + this.b1.kinangvel) * this.cx1;
		var j = this.kMass * (this.bias - E) - this.jAcc * this.gamma;
		var jOld = this.jAcc;
		this.jAcc += j;
		if(!this.equal && this.jAcc > 0) {
			this.jAcc = 0;
		}
		if(this.breakUnderForce && this.jAcc < -this.jMax) {
			return true;
		}
		if(!this.stiff) {
			if(this.jAcc < -this.jMax) {
				this.jAcc = -this.jMax;
			}
		}
		j = this.jAcc - jOld;
		var t = this.b1.imass * j;
		this.b1.velx -= this.nx * t;
		this.b1.vely -= this.ny * t;
		var t1 = this.b2.imass * j;
		this.b2.velx += this.nx * t1;
		this.b2.vely += this.ny * t1;
		this.b1.angvel -= this.cx1 * this.b1.iinertia * j;
		this.b2.angvel += this.cx2 * this.b2.iinertia * j;
		return false;
	}
	,applyImpulsePos: function() {
		var E;
		var j;
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var slack;
		var nx = 0.0;
		var ny = 0.0;
		nx = this.b2.posx + r2x - (this.b1.posx + r1x);
		ny = this.b2.posy + r2y - (this.b1.posy + r1y);
		var C = nx * nx + ny * ny;
		if(C < nape_Config.epsilon) {
			nx = 0;
			ny = 0;
			C = 0;
			slack = true;
		} else {
			C = Math.sqrt(C);
			var t = 1.0 / C;
			nx *= t;
			ny *= t;
			if(this.equal) {
				C -= this.jointMax;
				slack = false;
			} else if(C < this.jointMin) {
				C = this.jointMin - C;
				nx = -nx;
				ny = -ny;
				slack = false;
			} else if(C > this.jointMax) {
				C -= this.jointMax;
				slack = false;
			} else {
				nx = 0;
				ny = 0;
				C = 0;
				slack = true;
			}
		}
		E = C;
		if(!slack) {
			if(this.breakUnderError && E * E > this.maxError * this.maxError) {
				return true;
			}
			if(E * E < nape_Config.constraintLinearSlop * nape_Config.constraintLinearSlop) {
				return false;
			}
			E *= 0.5;
			if(E * E > 6) {
				var k = this.b1.smass + this.b2.smass;
				if(k > nape_Config.epsilon) {
					k = 0.75 / k;
					j = -E * k;
					if(this.equal || j < 0) {
						var t1 = j * this.b1.imass;
						this.b1.posx -= nx * t1;
						this.b1.posy -= ny * t1;
						var t2 = j * this.b2.imass;
						this.b2.posx += nx * t2;
						this.b2.posy += ny * t2;
						nx = this.b2.posx + r2x - (this.b1.posx + r1x);
						ny = this.b2.posy + r2y - (this.b1.posy + r1y);
						var C1 = nx * nx + ny * ny;
						if(C1 < nape_Config.epsilon) {
							nx = 0;
							ny = 0;
							C1 = 0;
							slack = true;
						} else {
							C1 = Math.sqrt(C1);
							var t3 = 1.0 / C1;
							nx *= t3;
							ny *= t3;
							if(this.equal) {
								C1 -= this.jointMax;
								slack = false;
							} else if(C1 < this.jointMin) {
								C1 = this.jointMin - C1;
								nx = -nx;
								ny = -ny;
								slack = false;
							} else if(C1 > this.jointMax) {
								C1 -= this.jointMax;
								slack = false;
							} else {
								nx = 0;
								ny = 0;
								C1 = 0;
								slack = true;
							}
						}
						E = C1;
						E *= 0.5;
					}
				}
			}
			var cx1;
			var cx2;
			cx1 = ny * r1x - nx * r1y;
			cx2 = ny * r2x - nx * r2y;
			var k1 = this.b1.smass + this.b2.smass + cx1 * cx1 * this.b1.sinertia + cx2 * cx2 * this.b2.sinertia;
			if(k1 != 0) {
				k1 = 1 / k1;
			}
			j = -E * k1;
			if(this.equal || j < 0) {
				var t4 = this.b1.imass * j;
				this.b1.posx -= nx * t4;
				this.b1.posy -= ny * t4;
				var t5 = this.b2.imass * j;
				this.b2.posx += nx * t5;
				this.b2.posy += ny * t5;
				var _this = this.b1;
				var dr = -cx1 * this.b1.iinertia * j;
				_this.rot += dr;
				if(dr * dr > 0.0001) {
					_this.axisx = Math.sin(_this.rot);
					_this.axisy = Math.cos(_this.rot);
				} else {
					var d2 = dr * dr;
					var p = 1 - 0.5 * d2;
					var m = 1 - d2 * d2 / 8;
					var nx1 = (p * _this.axisx + dr * _this.axisy) * m;
					_this.axisy = (p * _this.axisy - dr * _this.axisx) * m;
					_this.axisx = nx1;
				}
				var _this1 = this.b2;
				var dr1 = cx2 * this.b2.iinertia * j;
				_this1.rot += dr1;
				if(dr1 * dr1 > 0.0001) {
					_this1.axisx = Math.sin(_this1.rot);
					_this1.axisy = Math.cos(_this1.rot);
				} else {
					var d21 = dr1 * dr1;
					var p1 = 1 - 0.5 * d21;
					var m1 = 1 - d21 * d21 / 8;
					var nx2 = (p1 * _this1.axisx + dr1 * _this1.axisy) * m1;
					_this1.axisy = (p1 * _this1.axisy - dr1 * _this1.axisx) * m1;
					_this1.axisx = nx2;
				}
			}
		}
		return false;
	}
	,__class__: zpp_$nape_constraint_ZPP_$DistanceJoint
});
var zpp_$nape_constraint_ZPP_$LineJoint = function() {
	this.biasy = 0.0;
	this.biasx = 0.0;
	this.jAccy = 0.0;
	this.jAccx = 0.0;
	this.kMassc = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.wrap_n = null;
	this.nrely = 0.0;
	this.nrelx = 0.0;
	this.nlocaly = 0.0;
	this.nlocalx = 0.0;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.cx2 = 0.0;
	this.cx1 = 0.0;
	this.dot2 = 0.0;
	this.dot1 = 0.0;
	this.equal = false;
	this.jointMax = 0.0;
	this.jointMin = 0.0;
	this.scale = 0.0;
	this.outer_zn = null;
	zpp_$nape_constraint_ZPP_$Constraint.call(this);
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
	this.nlocalx = 0;
	this.nlocaly = 0;
	this.nrelx = 0;
	this.nrely = 0;
	this.jAccx = 0;
	this.jAccy = 0;
	this.jMax = Infinity;
	this.jointMin = -Infinity;
	this.jointMax = Infinity;
	this.stepped = false;
};
zpp_$nape_constraint_ZPP_$LineJoint.__name__ = true;
zpp_$nape_constraint_ZPP_$LineJoint.__super__ = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$LineJoint.prototype = $extend(zpp_$nape_constraint_ZPP_$Constraint.prototype,{
	activeBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.add(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.add(this);
			}
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.remove(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.remove(this);
			}
		}
	}
	,validate_a1: function() {
		this.wrap_a1.zpp_inner.x = this.a1localx;
		this.wrap_a1.zpp_inner.y = this.a1localy;
	}
	,invalidate_a1: function(x) {
		this.immutable_midstep("Constraint::" + "a1");
		this.a1localx = x.x;
		this.a1localy = x.y;
		this.wake();
	}
	,setup_a1: function() {
		var x = this.a1localx;
		var y = this.a1localy;
		if(x != x || y != y) {
			throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
			ret = new nape_geom_Vec2();
		} else {
			ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
				ret1 = new zpp_$nape_geom_ZPP_$Vec2();
			} else {
				ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = ret.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = ret.zpp_inner;
				if(_this2._validate != null) {
					_this2._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this3 = ret.zpp_inner;
				if(_this3._invalidate != null) {
					_this3._invalidate(_this3);
				}
			}
		}
		ret.zpp_inner.weak = false;
		this.wrap_a1 = ret;
		this.wrap_a1.zpp_inner._inuse = true;
		this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
		this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
	}
	,validate_a2: function() {
		this.wrap_a2.zpp_inner.x = this.a2localx;
		this.wrap_a2.zpp_inner.y = this.a2localy;
	}
	,invalidate_a2: function(x) {
		this.immutable_midstep("Constraint::" + "a2");
		this.a2localx = x.x;
		this.a2localy = x.y;
		this.wake();
	}
	,setup_a2: function() {
		var x = this.a2localx;
		var y = this.a2localy;
		if(x != x || y != y) {
			throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
			ret = new nape_geom_Vec2();
		} else {
			ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
				ret1 = new zpp_$nape_geom_ZPP_$Vec2();
			} else {
				ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = ret.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = ret.zpp_inner;
				if(_this2._validate != null) {
					_this2._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this3 = ret.zpp_inner;
				if(_this3._invalidate != null) {
					_this3._invalidate(_this3);
				}
			}
		}
		ret.zpp_inner.weak = false;
		this.wrap_a2 = ret;
		this.wrap_a2.zpp_inner._inuse = true;
		this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
		this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
	}
	,validate_n: function() {
		this.wrap_n.zpp_inner.x = this.nlocalx;
		this.wrap_n.zpp_inner.y = this.nlocaly;
	}
	,invalidate_n: function(x) {
		this.immutable_midstep("Constraint::" + "n");
		this.nlocalx = x.x;
		this.nlocaly = x.y;
		this.zip_n = true;
		this.wake();
	}
	,setup_n: function() {
		var x = this.nlocalx;
		var y = this.nlocaly;
		if(x != x || y != y) {
			throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
			ret = new nape_geom_Vec2();
		} else {
			ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
				ret1 = new zpp_$nape_geom_ZPP_$Vec2();
			} else {
				ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = ret.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = ret.zpp_inner;
				if(_this2._validate != null) {
					_this2._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this3 = ret.zpp_inner;
				if(_this3._invalidate != null) {
					_this3._invalidate(_this3);
				}
			}
		}
		ret.zpp_inner.weak = false;
		this.wrap_n = ret;
		this.wrap_n.zpp_inner._inuse = true;
		this.wrap_n.zpp_inner._validate = $bind(this,this.validate_n);
		this.wrap_n.zpp_inner._invalidate = $bind(this,this.invalidate_n);
	}
	,validate_norm: function() {
		if(this.zip_n) {
			this.zip_n = false;
			var d = this.nlocalx * this.nlocalx + this.nlocaly * this.nlocaly;
			var imag = 1.0 / Math.sqrt(d);
			var t = imag;
			this.nlocalx *= t;
			this.nlocaly *= t;
		}
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) {
			throw new js__$Boot_HaxeError("Error: AngleJoint cannot be simulated null bodies");
		}
		if(this.b1 == this.b2) {
			throw new js__$Boot_HaxeError("Error: DistanceJoint cannot be simulated with body1 == body2");
		}
		if(this.b1.space != this.space || this.b2.space != this.space) {
			throw new js__$Boot_HaxeError("Error: Constraints must have each body within the same space to which the constraint has been assigned");
		}
		if(this.jointMin > this.jointMax) {
			throw new js__$Boot_HaxeError("Error: DistanceJoint must have jointMin <= jointMax");
		}
		if(this.nlocalx * this.nlocalx + this.nlocaly * this.nlocaly < nape_Config.epsilon) {
			throw new js__$Boot_HaxeError("Error: DistanceJoint direction must be non-degenerate");
		}
		if(this.b1.type != 2 && this.b2.type != 2) {
			throw new js__$Boot_HaxeError("Error: Constraints cannot have both bodies non-dynamic");
		}
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == 2) {
			this.b1.wake();
		}
		if(this.b2 != null && this.b2.type == 2) {
			this.b2.wake();
		}
	}
	,forest: function() {
		if(this.b1.type == 2) {
			var xr;
			if(this.b1.component == this.b1.component.parent) {
				xr = this.b1.component;
			} else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) {
				yr = this.component;
			} else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) {
					xr.parent = yr;
				} else if(xr.rank > yr.rank) {
					yr.parent = xr;
				} else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == 2) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) {
				xr1 = this.b2.component;
			} else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) {
				yr1 = this.component;
			} else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) {
					xr1.parent = yr1;
				} else if(xr1.rank > yr1.rank) {
					yr1.parent = xr1;
				} else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		if(!(this.b1.id == id && this.b2.id == di)) {
			if(this.b1.id == di) {
				return this.b2.id == id;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,clearcache: function() {
		this.jAccx = 0;
		this.jAccy = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) {
			this.pre_dt = dt;
		}
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.equal = this.jointMin == this.jointMax;
		this.stepped = true;
		this.validate_norm();
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.nrelx = this.b1.axisy * this.nlocalx - this.b1.axisx * this.nlocaly;
		this.nrely = this.nlocalx * this.b1.axisx + this.nlocaly * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var dx = 0.0;
		var dy = 0.0;
		var Cx = 0.0;
		var Cy = 0.0;
		dx = this.b2.posx + this.a2relx - this.b1.posx - this.a1relx;
		dy = this.b2.posy + this.a2rely - this.b1.posy - this.a1rely;
		Cx = dy * this.nrelx - dx * this.nrely;
		Cy = this.nrelx * dx + this.nrely * dy;
		if(this.equal) {
			Cy -= this.jointMin;
			this.scale = 1.0;
		} else if(Cy > this.jointMax) {
			Cy -= this.jointMax;
			this.scale = 1.0;
		} else if(Cy < this.jointMin) {
			Cy = this.jointMin - Cy;
			this.scale = -1.0;
		} else {
			Cy = 0;
			this.scale = 0;
		}
		var drx = 0.0;
		var dry = 0.0;
		drx = dx + this.a1relx;
		dry = dy + this.a1rely;
		this.dot1 = this.nrelx * drx + this.nrely * dry;
		this.cx1 = dry * this.nrelx - drx * this.nrely;
		this.dot2 = this.nrelx * this.a2relx + this.nrely * this.a2rely;
		this.cx2 = this.a2rely * this.nrelx - this.a2relx * this.nrely;
		this.kMassa = this.b1.smass + this.b2.smass + this.dot1 * this.dot1 * this.b1.sinertia + this.dot2 * this.dot2 * this.b2.sinertia;
		this.kMassb = -this.scale * (this.dot1 * this.cx1 * this.b1.sinertia + this.dot2 * this.cx2 * this.b2.sinertia);
		this.kMassc = this.scale * this.scale * (this.b1.smass + this.b2.smass + this.cx1 * this.cx1 * this.b1.sinertia + this.cx2 * this.cx2 * this.b2.sinertia);
		var det = this.kMassa * this.kMassc - this.kMassb * this.kMassb;
		var flag;
		if(det != det) {
			this.kMassa = this.kMassb = this.kMassc = 0;
			flag = 3;
		} else if(det == 0) {
			var flag1 = 0;
			if(this.kMassa != 0) {
				this.kMassa = 1 / this.kMassa;
			} else {
				this.kMassa = 0;
				flag1 |= 1;
			}
			if(this.kMassc != 0) {
				this.kMassc = 1 / this.kMassc;
			} else {
				this.kMassc = 0;
				flag1 |= 2;
			}
			this.kMassb = 0;
			flag = flag1;
		} else {
			det = 1 / det;
			var t = this.kMassc * det;
			this.kMassc = this.kMassa * det;
			this.kMassa = t;
			this.kMassb *= -det;
			flag = 0;
		}
		if((flag & 1) != 0) {
			this.jAccx = 0;
		}
		if((flag & 2) != 0) {
			this.jAccy = 0;
		}
		if(!this.stiff) {
			if(this.breakUnderError && Cx * Cx + Cy * Cy > this.maxError * this.maxError) {
				return true;
			}
			var biasCoef;
			var omega = 2 * Math.PI * this.frequency;
			this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
			var ig = 1 / (1 + this.gamma);
			biasCoef = dt * omega * omega * this.gamma;
			this.gamma *= ig;
			var X = ig;
			this.kMassa *= X;
			this.kMassb *= X;
			this.kMassc *= X;
			this.biasx = Cx;
			this.biasy = Cy;
			var t1 = -biasCoef;
			this.biasx *= t1;
			this.biasy *= t1;
			var t2 = this.maxError;
			var ls = this.biasx * this.biasx + this.biasy * this.biasy;
			if(ls > t2 * t2) {
				var t3 = t2 * (1.0 / Math.sqrt(ls));
				this.biasx *= t3;
				this.biasy *= t3;
			}
		} else {
			this.gamma = 0;
			this.biasx = 0;
			this.biasy = 0;
		}
		var t4 = dtratio;
		this.jAccx *= t4;
		this.jAccy *= t4;
		this.jMax = this.maxForce * dt;
		return false;
	}
	,warmStart: function() {
		var J2x = this.scale * this.nrelx * this.jAccy - this.nrely * this.jAccx;
		var J2y = this.nrelx * this.jAccx + this.scale * this.nrely * this.jAccy;
		var t = this.b1.imass;
		this.b1.velx -= J2x * t;
		this.b1.vely -= J2y * t;
		var t1 = this.b2.imass;
		this.b2.velx += J2x * t1;
		this.b2.vely += J2y * t1;
		this.b1.angvel += (this.scale * this.cx1 * this.jAccy - this.dot1 * this.jAccx) * this.b1.iinertia;
		this.b2.angvel += (this.dot2 * this.jAccx - this.scale * this.cx2 * this.jAccy) * this.b2.iinertia;
	}
	,applyImpulseVel: function() {
		var Ex = 0.0;
		var Ey = 0.0;
		var dvx = 0.0;
		var dvy = 0.0;
		dvx = this.b2.velx - this.b1.velx;
		dvy = this.b2.vely - this.b1.vely;
		dvx += this.b2.kinvelx - this.b1.kinvelx;
		dvy += this.b2.kinvely - this.b1.kinvely;
		Ex = dvy * this.nrelx - dvx * this.nrely + (this.b2.angvel + this.b2.kinangvel) * this.dot2 - (this.b1.angvel + this.b1.kinangvel) * this.dot1;
		Ey = this.scale * (this.nrelx * dvx + this.nrely * dvy - (this.b2.angvel + this.b2.kinangvel) * this.cx2 + (this.b1.angvel + this.b1.kinangvel) * this.cx1);
		var Jx = 0.0;
		var Jy = 0.0;
		Jx = this.biasx - Ex;
		Jy = this.biasy - Ey;
		var t = this.kMassa * Jx + this.kMassb * Jy;
		Jy = this.kMassb * Jx + this.kMassc * Jy;
		Jx = t;
		var t1 = this.gamma;
		Jx -= this.jAccx * t1;
		Jy -= this.jAccy * t1;
		var jOldx = 0.0;
		var jOldy = 0.0;
		jOldx = this.jAccx;
		jOldy = this.jAccy;
		var t2 = 1.0;
		this.jAccx += Jx * t2;
		this.jAccy += Jy * t2;
		if(this.jAccy > 0) {
			this.jAccy = 0;
		}
		if(this.breakUnderForce) {
			if(this.jAccx * this.jAccx + this.jAccy * this.jAccy > this.jMax * this.jMax) {
				return true;
			}
		} else if(!this.stiff) {
			var t3 = this.jMax;
			var ls = this.jAccx * this.jAccx + this.jAccy * this.jAccy;
			if(ls > t3 * t3) {
				var t4 = t3 * (1.0 / Math.sqrt(ls));
				this.jAccx *= t4;
				this.jAccy *= t4;
			}
		}
		Jx = this.jAccx - jOldx;
		Jy = this.jAccy - jOldy;
		var J2x = this.scale * this.nrelx * Jy - this.nrely * Jx;
		var J2y = this.nrelx * Jx + this.scale * this.nrely * Jy;
		var t5 = this.b1.imass;
		this.b1.velx -= J2x * t5;
		this.b1.vely -= J2y * t5;
		var t6 = this.b2.imass;
		this.b2.velx += J2x * t6;
		this.b2.vely += J2y * t6;
		this.b1.angvel += (this.scale * this.cx1 * Jy - this.dot1 * Jx) * this.b1.iinertia;
		this.b2.angvel += (this.dot2 * Jx - this.scale * this.cx2 * Jy) * this.b2.iinertia;
		return false;
	}
	,applyImpulsePos: function() {
		var nx = 0.0;
		var ny = 0.0;
		nx = this.b1.axisy * this.nlocalx - this.b1.axisx * this.nlocaly;
		ny = this.nlocalx * this.b1.axisx + this.nlocaly * this.b1.axisy;
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var dx = 0.0;
		var dy = 0.0;
		var scale;
		var Ex = 0.0;
		var Ey = 0.0;
		dx = this.b2.posx + r2x - this.b1.posx - r1x;
		dy = this.b2.posy + r2y - this.b1.posy - r1y;
		Ex = dy * nx - dx * ny;
		Ey = nx * dx + ny * dy;
		if(this.equal) {
			Ey -= this.jointMin;
			scale = 1.0;
		} else if(Ey > this.jointMax) {
			Ey -= this.jointMax;
			scale = 1.0;
		} else if(Ey < this.jointMin) {
			Ey = this.jointMin - Ey;
			scale = -1.0;
		} else {
			Ey = 0;
			scale = 0;
		}
		if(this.breakUnderError && Ex * Ex + Ey * Ey > this.maxError * this.maxError) {
			return true;
		}
		if(Ex * Ex + Ey * Ey < nape_Config.constraintLinearSlop * nape_Config.constraintLinearSlop) {
			return false;
		}
		var Jx = 0.0;
		var Jy = 0.0;
		var t = 0.5;
		Ex *= t;
		Ey *= t;
		if(Ex * Ex + Ey * Ey > 6) {
			var k = this.b1.smass + this.b2.smass;
			if(k > nape_Config.epsilon) {
				k = 0.8 / k;
				var Jx1 = k * (ny * Ex - scale * nx * Ey);
				var Jy1 = k * (nx * Ex * scale - ny * Ex);
				var t1 = this.b1.imass;
				this.b1.posx -= Jx1 * t1;
				this.b1.posy -= Jy1 * t1;
				var t2 = this.b2.imass;
				this.b2.posx += Jx1 * t2;
				this.b2.posy += Jy1 * t2;
				dx = this.b2.posx + r2x - this.b1.posx - r1x;
				dy = this.b2.posy + r2y - this.b1.posy - r1y;
				Ex = dy * nx - dx * ny;
				Ey = nx * dx + ny * dy;
				if(this.equal) {
					Ey -= this.jointMin;
					scale = 1.0;
				} else if(Ey > this.jointMax) {
					Ey -= this.jointMax;
					scale = 1.0;
				} else if(Ey < this.jointMin) {
					Ey = this.jointMin - Ey;
					scale = -1.0;
				} else {
					Ey = 0;
					scale = 0;
				}
				var t3 = 0.5;
				Ex *= t3;
				Ey *= t3;
			}
		}
		var dot1;
		var dot2;
		var cx1;
		var cx2;
		var Ka = 0.0;
		var Kb = 0.0;
		var Kc = 0.0;
		var drx = 0.0;
		var dry = 0.0;
		drx = dx + r1x;
		dry = dy + r1y;
		dot1 = nx * drx + ny * dry;
		cx1 = dry * nx - drx * ny;
		dot2 = nx * r2x + ny * r2y;
		cx2 = r2y * nx - r2x * ny;
		Ka = this.b1.smass + this.b2.smass + dot1 * dot1 * this.b1.sinertia + dot2 * dot2 * this.b2.sinertia;
		Kb = -scale * (dot1 * cx1 * this.b1.sinertia + dot2 * cx2 * this.b2.sinertia);
		Kc = scale * scale * (this.b1.smass + this.b2.smass + cx1 * cx1 * this.b1.sinertia + cx2 * cx2 * this.b2.sinertia);
		Jx = -Ex;
		Jy = -Ey;
		var det = Ka * Kc - Kb * Kb;
		if(det != det) {
			Jy = 0;
			Jx = Jy;
		} else if(det == 0) {
			if(Ka != 0) {
				Jx /= Ka;
			} else {
				Jx = 0;
			}
			if(Kc != 0) {
				Jy /= Kc;
			} else {
				Jy = 0;
			}
		} else {
			det = 1 / det;
			var t4 = det * (Kc * Jx - Kb * Jy);
			Jy = det * (Ka * Jy - Kb * Jx);
			Jx = t4;
		}
		if(Jy > 0) {
			Jy = 0;
		}
		var J2x = scale * nx * Jy - ny * Jx;
		var J2y = nx * Jx + scale * ny * Jy;
		var t5 = this.b1.imass;
		this.b1.posx -= J2x * t5;
		this.b1.posy -= J2y * t5;
		var t6 = this.b2.imass;
		this.b2.posx += J2x * t6;
		this.b2.posy += J2y * t6;
		var _this = this.b1;
		var dr = (scale * cx1 * Jy - dot1 * Jx) * this.b1.iinertia;
		_this.rot += dr;
		if(dr * dr > 0.0001) {
			_this.axisx = Math.sin(_this.rot);
			_this.axisy = Math.cos(_this.rot);
		} else {
			var d2 = dr * dr;
			var p = 1 - 0.5 * d2;
			var m = 1 - d2 * d2 / 8;
			var nx1 = (p * _this.axisx + dr * _this.axisy) * m;
			_this.axisy = (p * _this.axisy - dr * _this.axisx) * m;
			_this.axisx = nx1;
		}
		var _this1 = this.b2;
		var dr1 = (dot2 * Jx - scale * cx2 * Jy) * this.b2.iinertia;
		_this1.rot += dr1;
		if(dr1 * dr1 > 0.0001) {
			_this1.axisx = Math.sin(_this1.rot);
			_this1.axisy = Math.cos(_this1.rot);
		} else {
			var d21 = dr1 * dr1;
			var p1 = 1 - 0.5 * d21;
			var m1 = 1 - d21 * d21 / 8;
			var nx2 = (p1 * _this1.axisx + dr1 * _this1.axisy) * m1;
			_this1.axisy = (p1 * _this1.axisy - dr1 * _this1.axisx) * m1;
			_this1.axisx = nx2;
		}
		return false;
	}
	,__class__: zpp_$nape_constraint_ZPP_$LineJoint
});
var zpp_$nape_constraint_ZPP_$MotorJoint = function() {
	this.stepped = false;
	this.jMax = 0.0;
	this.jAcc = 0.0;
	this.kMass = 0.0;
	this.b2 = null;
	this.b1 = null;
	this.rate = 0.0;
	this.ratio = 0.0;
	this.outer_zn = null;
	zpp_$nape_constraint_ZPP_$Constraint.call(this);
	this.jAcc = 0;
	this.stepped = false;
	this.__velocity = true;
};
zpp_$nape_constraint_ZPP_$MotorJoint.__name__ = true;
zpp_$nape_constraint_ZPP_$MotorJoint.__super__ = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$MotorJoint.prototype = $extend(zpp_$nape_constraint_ZPP_$Constraint.prototype,{
	activeBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.add(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.add(this);
			}
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.remove(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.remove(this);
			}
		}
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) {
			throw new js__$Boot_HaxeError("Error: AngleJoint cannot be simulated null bodies");
		}
		if(this.b1 == this.b2) {
			throw new js__$Boot_HaxeError("Error: MotorJoint cannot be simulated with body1 == body2");
		}
		if(this.b1.space != this.space || this.b2.space != this.space) {
			throw new js__$Boot_HaxeError("Error: Constraints must have each body within the same space to which the constraint has been assigned");
		}
		if(this.b1.type != 2 && this.b2.type != 2) {
			throw new js__$Boot_HaxeError("Error: Constraints cannot have both bodies non-dynamic");
		}
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == 2) {
			this.b1.wake();
		}
		if(this.b2 != null && this.b2.type == 2) {
			this.b2.wake();
		}
	}
	,forest: function() {
		if(this.b1.type == 2) {
			var xr;
			if(this.b1.component == this.b1.component.parent) {
				xr = this.b1.component;
			} else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) {
				yr = this.component;
			} else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) {
					xr.parent = yr;
				} else if(xr.rank > yr.rank) {
					yr.parent = xr;
				} else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == 2) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) {
				xr1 = this.b2.component;
			} else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) {
				yr1 = this.component;
			} else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) {
					xr1.parent = yr1;
				} else if(xr1.rank > yr1.rank) {
					yr1.parent = xr1;
				} else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		if(!(this.b1.id == id && this.b2.id == di)) {
			if(this.b1.id == di) {
				return this.b2.id == id;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,clearcache: function() {
		this.jAcc = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) {
			this.pre_dt = dt;
		}
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.kMass = this.b1.sinertia + this.ratio * this.ratio * this.b2.sinertia;
		this.kMass = 1.0 / this.kMass;
		this.jAcc *= dtratio;
		this.jMax = this.maxForce * dt;
		return false;
	}
	,warmStart: function() {
		this.b1.angvel -= this.b1.iinertia * this.jAcc;
		this.b2.angvel += this.ratio * this.b2.iinertia * this.jAcc;
	}
	,applyImpulseVel: function() {
		var E = this.ratio * (this.b2.angvel + this.b2.kinangvel) - this.b1.angvel - this.b1.kinangvel - this.rate;
		var j = -this.kMass * E;
		var jOld = this.jAcc;
		this.jAcc += j;
		if(this.breakUnderForce) {
			if(this.jAcc > this.jMax || this.jAcc < -this.jMax) {
				return true;
			}
		} else if(this.jAcc < -this.jMax) {
			this.jAcc = -this.jMax;
		} else if(this.jAcc > this.jMax) {
			this.jAcc = this.jMax;
		}
		j = this.jAcc - jOld;
		this.b1.angvel -= this.b1.iinertia * j;
		this.b2.angvel += this.ratio * this.b2.iinertia * j;
		return false;
	}
	,applyImpulsePos: function() {
		return false;
	}
	,__class__: zpp_$nape_constraint_ZPP_$MotorJoint
});
var zpp_$nape_constraint_ZPP_$PivotJoint = function() {
	this.stepped = false;
	this.biasy = 0.0;
	this.biasx = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAccy = 0.0;
	this.jAccx = 0.0;
	this.kMassc = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.b2 = null;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.b1 = null;
	this.outer_zn = null;
	zpp_$nape_constraint_ZPP_$Constraint.call(this);
	this.stepped = false;
	this.jAccx = 0;
	this.jAccy = 0;
	this.jMax = Infinity;
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
};
zpp_$nape_constraint_ZPP_$PivotJoint.__name__ = true;
zpp_$nape_constraint_ZPP_$PivotJoint.__super__ = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$PivotJoint.prototype = $extend(zpp_$nape_constraint_ZPP_$Constraint.prototype,{
	activeBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.add(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.add(this);
			}
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.remove(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.remove(this);
			}
		}
	}
	,validate_a1: function() {
		this.wrap_a1.zpp_inner.x = this.a1localx;
		this.wrap_a1.zpp_inner.y = this.a1localy;
	}
	,invalidate_a1: function(x) {
		this.immutable_midstep("Constraint::" + "a1");
		this.a1localx = x.x;
		this.a1localy = x.y;
		this.wake();
	}
	,setup_a1: function() {
		var x = this.a1localx;
		var y = this.a1localy;
		if(x != x || y != y) {
			throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
			ret = new nape_geom_Vec2();
		} else {
			ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
				ret1 = new zpp_$nape_geom_ZPP_$Vec2();
			} else {
				ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = ret.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = ret.zpp_inner;
				if(_this2._validate != null) {
					_this2._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this3 = ret.zpp_inner;
				if(_this3._invalidate != null) {
					_this3._invalidate(_this3);
				}
			}
		}
		ret.zpp_inner.weak = false;
		this.wrap_a1 = ret;
		this.wrap_a1.zpp_inner._inuse = true;
		this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
		this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
	}
	,validate_a2: function() {
		this.wrap_a2.zpp_inner.x = this.a2localx;
		this.wrap_a2.zpp_inner.y = this.a2localy;
	}
	,invalidate_a2: function(x) {
		this.immutable_midstep("Constraint::" + "a2");
		this.a2localx = x.x;
		this.a2localy = x.y;
		this.wake();
	}
	,setup_a2: function() {
		var x = this.a2localx;
		var y = this.a2localy;
		if(x != x || y != y) {
			throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
			ret = new nape_geom_Vec2();
		} else {
			ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
				ret1 = new zpp_$nape_geom_ZPP_$Vec2();
			} else {
				ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = ret.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = ret.zpp_inner;
				if(_this2._validate != null) {
					_this2._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this3 = ret.zpp_inner;
				if(_this3._invalidate != null) {
					_this3._invalidate(_this3);
				}
			}
		}
		ret.zpp_inner.weak = false;
		this.wrap_a2 = ret;
		this.wrap_a2.zpp_inner._inuse = true;
		this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
		this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) {
			throw new js__$Boot_HaxeError("Error: PivotJoint cannot be simulated null bodies");
		}
		if(this.b1 == this.b2) {
			throw new js__$Boot_HaxeError("Error: PivotJoint cannot be simulated with body1 == body2 (body1=body2=" + this.b1.outer.toString() + ")");
		}
		if(this.b1.space != this.space || this.b2.space != this.space) {
			throw new js__$Boot_HaxeError("Error: Constraints must have each body within the same space to which the constraint has been assigned (body1=" + this.b1.outer.toString() + ", body2=" + this.b2.outer.toString() + ")");
		}
		if(this.b1.type != 2 && this.b2.type != 2) {
			throw new js__$Boot_HaxeError("Error: Constraints cannot have both bodies non-dynamic (body1=" + this.b1.outer.toString() + ", body2=" + this.b2.outer.toString() + ")");
		}
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == 2) {
			this.b1.wake();
		}
		if(this.b2 != null && this.b2.type == 2) {
			this.b2.wake();
		}
	}
	,forest: function() {
		if(this.b1.type == 2) {
			var xr;
			if(this.b1.component == this.b1.component.parent) {
				xr = this.b1.component;
			} else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) {
				yr = this.component;
			} else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) {
					xr.parent = yr;
				} else if(xr.rank > yr.rank) {
					yr.parent = xr;
				} else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == 2) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) {
				xr1 = this.b2.component;
			} else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) {
				yr1 = this.component;
			} else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) {
					xr1.parent = yr1;
				} else if(xr1.rank > yr1.rank) {
					yr1.parent = xr1;
				} else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		if(!(this.b1.id == id && this.b2.id == di)) {
			if(this.b1.id == di) {
				return this.b2.id == id;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,clearcache: function() {
		this.jAccx = 0;
		this.jAccy = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) {
			this.pre_dt = dt;
		}
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var m = this.b1.smass + this.b2.smass;
		this.kMassa = m;
		this.kMassb = 0;
		this.kMassc = m;
		if(this.b1.sinertia != 0) {
			var X = this.a1relx * this.b1.sinertia;
			var Y = this.a1rely * this.b1.sinertia;
			this.kMassa += Y * this.a1rely;
			this.kMassb += -Y * this.a1relx;
			this.kMassc += X * this.a1relx;
		}
		if(this.b2.sinertia != 0) {
			var X1 = this.a2relx * this.b2.sinertia;
			var Y1 = this.a2rely * this.b2.sinertia;
			this.kMassa += Y1 * this.a2rely;
			this.kMassb += -Y1 * this.a2relx;
			this.kMassc += X1 * this.a2relx;
		}
		var det = this.kMassa * this.kMassc - this.kMassb * this.kMassb;
		var flag;
		if(det != det) {
			this.kMassa = this.kMassb = this.kMassc = 0;
			flag = 3;
		} else if(det == 0) {
			var flag1 = 0;
			if(this.kMassa != 0) {
				this.kMassa = 1 / this.kMassa;
			} else {
				this.kMassa = 0;
				flag1 |= 1;
			}
			if(this.kMassc != 0) {
				this.kMassc = 1 / this.kMassc;
			} else {
				this.kMassc = 0;
				flag1 |= 2;
			}
			this.kMassb = 0;
			flag = flag1;
		} else {
			det = 1 / det;
			var t = this.kMassc * det;
			this.kMassc = this.kMassa * det;
			this.kMassa = t;
			this.kMassb *= -det;
			flag = 0;
		}
		if((flag & 1) != 0) {
			this.jAccx = 0;
		}
		if((flag & 2) != 0) {
			this.jAccy = 0;
		}
		if(!this.stiff) {
			var biasCoef;
			var omega = 2 * Math.PI * this.frequency;
			this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
			var ig = 1 / (1 + this.gamma);
			biasCoef = dt * omega * omega * this.gamma;
			this.gamma *= ig;
			var X2 = ig;
			this.kMassa *= X2;
			this.kMassb *= X2;
			this.kMassc *= X2;
			this.biasx = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
			this.biasy = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
			if(this.breakUnderError && this.biasx * this.biasx + this.biasy * this.biasy > this.maxError * this.maxError) {
				return true;
			}
			var t1 = -biasCoef;
			this.biasx *= t1;
			this.biasy *= t1;
			var t2 = this.maxError;
			var ls = this.biasx * this.biasx + this.biasy * this.biasy;
			if(ls > t2 * t2) {
				var t3 = t2 * (1.0 / Math.sqrt(ls));
				this.biasx *= t3;
				this.biasy *= t3;
			}
		} else {
			this.biasx = 0;
			this.biasy = 0;
			this.gamma = 0;
		}
		var t4 = dtratio;
		this.jAccx *= t4;
		this.jAccy *= t4;
		this.jMax = this.maxForce * dt;
		return false;
	}
	,warmStart: function() {
		var t = this.b1.imass;
		this.b1.velx -= this.jAccx * t;
		this.b1.vely -= this.jAccy * t;
		var t1 = this.b2.imass;
		this.b2.velx += this.jAccx * t1;
		this.b2.vely += this.jAccy * t1;
		this.b1.angvel -= (this.jAccy * this.a1relx - this.jAccx * this.a1rely) * this.b1.iinertia;
		this.b2.angvel += (this.jAccy * this.a2relx - this.jAccx * this.a2rely) * this.b2.iinertia;
	}
	,applyImpulseVel: function() {
		var Ex = 0.0;
		var Ey = 0.0;
		Ex = this.b2.velx + this.b2.kinvelx - this.a2rely * (this.b2.angvel + this.b2.kinangvel) - (this.b1.velx + this.b1.kinvelx - this.a1rely * (this.b1.angvel + this.b1.kinangvel));
		Ey = this.b2.vely + this.b2.kinvely + this.a2relx * (this.b2.angvel + this.b2.kinangvel) - (this.b1.vely + this.b1.kinvely + this.a1relx * (this.b1.angvel + this.b1.kinangvel));
		var Jx = 0.0;
		var Jy = 0.0;
		Jx = this.biasx - Ex;
		Jy = this.biasy - Ey;
		var t = this.kMassa * Jx + this.kMassb * Jy;
		Jy = this.kMassb * Jx + this.kMassc * Jy;
		Jx = t;
		var t1 = this.gamma;
		Jx -= this.jAccx * t1;
		Jy -= this.jAccy * t1;
		var jOldx = 0.0;
		var jOldy = 0.0;
		jOldx = this.jAccx;
		jOldy = this.jAccy;
		var t2 = 1.0;
		this.jAccx += Jx * t2;
		this.jAccy += Jy * t2;
		if(this.breakUnderForce) {
			if(this.jAccx * this.jAccx + this.jAccy * this.jAccy > this.jMax * this.jMax) {
				return true;
			}
		} else if(!this.stiff) {
			var t3 = this.jMax;
			var ls = this.jAccx * this.jAccx + this.jAccy * this.jAccy;
			if(ls > t3 * t3) {
				var t4 = t3 * (1.0 / Math.sqrt(ls));
				this.jAccx *= t4;
				this.jAccy *= t4;
			}
		}
		Jx = this.jAccx - jOldx;
		Jy = this.jAccy - jOldy;
		var t5 = this.b1.imass;
		this.b1.velx -= Jx * t5;
		this.b1.vely -= Jy * t5;
		var t6 = this.b2.imass;
		this.b2.velx += Jx * t6;
		this.b2.vely += Jy * t6;
		this.b1.angvel -= (Jy * this.a1relx - Jx * this.a1rely) * this.b1.iinertia;
		this.b2.angvel += (Jy * this.a2relx - Jx * this.a2rely) * this.b2.iinertia;
		return false;
	}
	,applyImpulsePos: function() {
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var Ex = 0.0;
		var Ey = 0.0;
		Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
		Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
		if(this.breakUnderError && Ex * Ex + Ey * Ey > this.maxError * this.maxError) {
			return true;
		}
		if(Ex * Ex + Ey * Ey < nape_Config.constraintLinearSlop * nape_Config.constraintLinearSlop) {
			return false;
		}
		var t = 0.5;
		Ex *= t;
		Ey *= t;
		var Jx = 0.0;
		var Jy = 0.0;
		if(Ex * Ex + Ey * Ey > 6) {
			var k = this.b1.smass + this.b2.smass;
			if(k > nape_Config.epsilon) {
				k = 0.75 / k;
				Jx = -Ex * k;
				Jy = -Ey * k;
				var t1 = 20;
				var ls = Jx * Jx + Jy * Jy;
				if(ls > t1 * t1) {
					var t2 = t1 * (1.0 / Math.sqrt(ls));
					Jx *= t2;
					Jy *= t2;
				}
				var t3 = this.b1.imass;
				this.b1.posx -= Jx * t3;
				this.b1.posy -= Jy * t3;
				var t4 = this.b2.imass;
				this.b2.posx += Jx * t4;
				this.b2.posy += Jy * t4;
				Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
				Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
				var t5 = 0.5;
				Ex *= t5;
				Ey *= t5;
			}
		}
		var Ka = 0.0;
		var Kb = 0.0;
		var Kc = 0.0;
		var m = this.b1.smass + this.b2.smass;
		Ka = m;
		Kb = 0;
		Kc = m;
		if(this.b1.sinertia != 0) {
			var X = r1x * this.b1.sinertia;
			var Y = r1y * this.b1.sinertia;
			Ka += Y * r1y;
			Kb += -Y * r1x;
			Kc += X * r1x;
		}
		if(this.b2.sinertia != 0) {
			var X1 = r2x * this.b2.sinertia;
			var Y1 = r2y * this.b2.sinertia;
			Ka += Y1 * r2y;
			Kb += -Y1 * r2x;
			Kc += X1 * r2x;
		}
		Jx = -Ex;
		Jy = -Ey;
		var t6 = 6;
		var ls1 = Jx * Jx + Jy * Jy;
		if(ls1 > t6 * t6) {
			var t7 = t6 * (1.0 / Math.sqrt(ls1));
			Jx *= t7;
			Jy *= t7;
		}
		var det = Ka * Kc - Kb * Kb;
		if(det != det) {
			Jy = 0;
			Jx = Jy;
		} else if(det == 0) {
			if(Ka != 0) {
				Jx /= Ka;
			} else {
				Jx = 0;
			}
			if(Kc != 0) {
				Jy /= Kc;
			} else {
				Jy = 0;
			}
		} else {
			det = 1 / det;
			var t8 = det * (Kc * Jx - Kb * Jy);
			Jy = det * (Ka * Jy - Kb * Jx);
			Jx = t8;
		}
		var t9 = this.b1.imass;
		this.b1.posx -= Jx * t9;
		this.b1.posy -= Jy * t9;
		var t10 = this.b2.imass;
		this.b2.posx += Jx * t10;
		this.b2.posy += Jy * t10;
		var _this = this.b1;
		var dr = -(Jy * r1x - Jx * r1y) * this.b1.iinertia;
		_this.rot += dr;
		if(dr * dr > 0.0001) {
			_this.axisx = Math.sin(_this.rot);
			_this.axisy = Math.cos(_this.rot);
		} else {
			var d2 = dr * dr;
			var p = 1 - 0.5 * d2;
			var m1 = 1 - d2 * d2 / 8;
			var nx = (p * _this.axisx + dr * _this.axisy) * m1;
			_this.axisy = (p * _this.axisy - dr * _this.axisx) * m1;
			_this.axisx = nx;
		}
		var _this1 = this.b2;
		var dr1 = (Jy * r2x - Jx * r2y) * this.b2.iinertia;
		_this1.rot += dr1;
		if(dr1 * dr1 > 0.0001) {
			_this1.axisx = Math.sin(_this1.rot);
			_this1.axisy = Math.cos(_this1.rot);
		} else {
			var d21 = dr1 * dr1;
			var p1 = 1 - 0.5 * d21;
			var m2 = 1 - d21 * d21 / 8;
			var nx1 = (p1 * _this1.axisx + dr1 * _this1.axisy) * m2;
			_this1.axisy = (p1 * _this1.axisy - dr1 * _this1.axisx) * m2;
			_this1.axisx = nx1;
		}
		return false;
	}
	,__class__: zpp_$nape_constraint_ZPP_$PivotJoint
});
var zpp_$nape_constraint_ZPP_$PulleyJoint = function() {
	this.stepped = false;
	this.bias = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAcc = 0.0;
	this.kMass = 0.0;
	this.wrap_a4 = null;
	this.a4rely = 0.0;
	this.a4relx = 0.0;
	this.a4localy = 0.0;
	this.a4localx = 0.0;
	this.b4 = null;
	this.wrap_a3 = null;
	this.a3rely = 0.0;
	this.a3relx = 0.0;
	this.a3localy = 0.0;
	this.a3localx = 0.0;
	this.b3 = null;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.b2 = null;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.b1 = null;
	this.cx4 = 0.0;
	this.cx3 = 0.0;
	this.cx2 = 0.0;
	this.cx1 = 0.0;
	this.n34y = 0.0;
	this.n34x = 0.0;
	this.n12y = 0.0;
	this.n12x = 0.0;
	this.equal = false;
	this.slack = false;
	this.jointMax = 0.0;
	this.jointMin = 0.0;
	this.ratio = 1.0;
	this.outer_zn = null;
	zpp_$nape_constraint_ZPP_$Constraint.call(this);
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
	this.a3localx = 0;
	this.a3localy = 0;
	this.a3relx = 0;
	this.a3rely = 0;
	this.a4localx = 0;
	this.a4localy = 0;
	this.a4relx = 0;
	this.a4rely = 0;
	this.n12x = 1;
	this.n12y = 0;
	this.n34x = 1;
	this.n34y = 0;
	this.jAcc = 0;
	this.jMax = Infinity;
	this.stepped = false;
	this.cx1 = this.cx2 = this.cx3 = this.cx4 = 0;
};
zpp_$nape_constraint_ZPP_$PulleyJoint.__name__ = true;
zpp_$nape_constraint_ZPP_$PulleyJoint.__super__ = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$PulleyJoint.prototype = $extend(zpp_$nape_constraint_ZPP_$Constraint.prototype,{
	activeBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.add(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.add(this);
			}
		}
		if(this.b3 != this.b1 && this.b3 != this.b2) {
			if(this.b3 != null) {
				this.b3.constraints.add(this);
			}
		}
		if(this.b4 != this.b1 && this.b4 != this.b2 && this.b4 != this.b3) {
			if(this.b4 != null) {
				this.b4.constraints.add(this);
			}
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.remove(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.remove(this);
			}
		}
		if(this.b3 != this.b1 && this.b3 != this.b2) {
			if(this.b3 != null) {
				this.b3.constraints.remove(this);
			}
		}
		if(this.b4 != this.b1 && this.b4 != this.b2 && this.b4 != this.b3) {
			if(this.b4 != null) {
				this.b4.constraints.remove(this);
			}
		}
	}
	,validate_a1: function() {
		this.wrap_a1.zpp_inner.x = this.a1localx;
		this.wrap_a1.zpp_inner.y = this.a1localy;
	}
	,invalidate_a1: function(x) {
		this.immutable_midstep("Constraint::" + "a1");
		this.a1localx = x.x;
		this.a1localy = x.y;
		this.wake();
	}
	,setup_a1: function() {
		var x = this.a1localx;
		var y = this.a1localy;
		if(x != x || y != y) {
			throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
			ret = new nape_geom_Vec2();
		} else {
			ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
				ret1 = new zpp_$nape_geom_ZPP_$Vec2();
			} else {
				ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = ret.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = ret.zpp_inner;
				if(_this2._validate != null) {
					_this2._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this3 = ret.zpp_inner;
				if(_this3._invalidate != null) {
					_this3._invalidate(_this3);
				}
			}
		}
		ret.zpp_inner.weak = false;
		this.wrap_a1 = ret;
		this.wrap_a1.zpp_inner._inuse = true;
		this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
		this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
	}
	,validate_a2: function() {
		this.wrap_a2.zpp_inner.x = this.a2localx;
		this.wrap_a2.zpp_inner.y = this.a2localy;
	}
	,invalidate_a2: function(x) {
		this.immutable_midstep("Constraint::" + "a2");
		this.a2localx = x.x;
		this.a2localy = x.y;
		this.wake();
	}
	,setup_a2: function() {
		var x = this.a2localx;
		var y = this.a2localy;
		if(x != x || y != y) {
			throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
			ret = new nape_geom_Vec2();
		} else {
			ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
				ret1 = new zpp_$nape_geom_ZPP_$Vec2();
			} else {
				ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = ret.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = ret.zpp_inner;
				if(_this2._validate != null) {
					_this2._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this3 = ret.zpp_inner;
				if(_this3._invalidate != null) {
					_this3._invalidate(_this3);
				}
			}
		}
		ret.zpp_inner.weak = false;
		this.wrap_a2 = ret;
		this.wrap_a2.zpp_inner._inuse = true;
		this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
		this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
	}
	,validate_a3: function() {
		this.wrap_a3.zpp_inner.x = this.a3localx;
		this.wrap_a3.zpp_inner.y = this.a3localy;
	}
	,invalidate_a3: function(x) {
		this.immutable_midstep("Constraint::" + "a3");
		this.a3localx = x.x;
		this.a3localy = x.y;
		this.wake();
	}
	,setup_a3: function() {
		var x = this.a3localx;
		var y = this.a3localy;
		if(x != x || y != y) {
			throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
			ret = new nape_geom_Vec2();
		} else {
			ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
				ret1 = new zpp_$nape_geom_ZPP_$Vec2();
			} else {
				ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = ret.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = ret.zpp_inner;
				if(_this2._validate != null) {
					_this2._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this3 = ret.zpp_inner;
				if(_this3._invalidate != null) {
					_this3._invalidate(_this3);
				}
			}
		}
		ret.zpp_inner.weak = false;
		this.wrap_a3 = ret;
		this.wrap_a3.zpp_inner._inuse = true;
		this.wrap_a3.zpp_inner._validate = $bind(this,this.validate_a3);
		this.wrap_a3.zpp_inner._invalidate = $bind(this,this.invalidate_a3);
	}
	,validate_a4: function() {
		this.wrap_a4.zpp_inner.x = this.a4localx;
		this.wrap_a4.zpp_inner.y = this.a4localy;
	}
	,invalidate_a4: function(x) {
		this.immutable_midstep("Constraint::" + "a4");
		this.a4localx = x.x;
		this.a4localy = x.y;
		this.wake();
	}
	,setup_a4: function() {
		var x = this.a4localx;
		var y = this.a4localy;
		if(x != x || y != y) {
			throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
			ret = new nape_geom_Vec2();
		} else {
			ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
				ret1 = new zpp_$nape_geom_ZPP_$Vec2();
			} else {
				ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = ret.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = ret.zpp_inner;
				if(_this2._validate != null) {
					_this2._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this3 = ret.zpp_inner;
				if(_this3._invalidate != null) {
					_this3._invalidate(_this3);
				}
			}
		}
		ret.zpp_inner.weak = false;
		this.wrap_a4 = ret;
		this.wrap_a4.zpp_inner._inuse = true;
		this.wrap_a4.zpp_inner._validate = $bind(this,this.validate_a4);
		this.wrap_a4.zpp_inner._invalidate = $bind(this,this.invalidate_a4);
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null || this.b3 == null || this.b4 == null) {
			throw new js__$Boot_HaxeError("Error: PulleyJoint cannot be simulated with null bodies");
		}
		if(this.b1 == this.b2 || this.b3 == this.b4) {
			throw new js__$Boot_HaxeError("Error: PulleyJoint cannot have body1==body2 or body3==body4");
		}
		if(this.b1.space != this.space || this.b2.space != this.space || this.b3.space != this.space || this.b4.space != this.space) {
			throw new js__$Boot_HaxeError("Error: Constraints must have each body within the same space to which the constraint has been assigned");
		}
		if(this.jointMin > this.jointMax) {
			throw new js__$Boot_HaxeError("Error: PulleyJoint must have jointMin <= jointMax");
		}
		if(this.b1.type != 2 && this.b2.type != 2) {
			throw new js__$Boot_HaxeError("Error: PulleyJoint cannot have both bodies in a linked pair non-dynamic");
		}
		if(this.b3.type != 2 && this.b4.type != 2) {
			throw new js__$Boot_HaxeError("Error: PulleyJoint cannot have both bodies in a linked pair non-dynamic");
		}
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == 2) {
			this.b1.wake();
		}
		if(this.b2 != null && this.b2.type == 2) {
			this.b2.wake();
		}
		if(this.b3 != null && this.b3.type == 2) {
			this.b3.wake();
		}
		if(this.b4 != null && this.b4.type == 2) {
			this.b4.wake();
		}
	}
	,forest: function() {
		if(this.b1.type == 2) {
			var xr;
			if(this.b1.component == this.b1.component.parent) {
				xr = this.b1.component;
			} else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) {
				yr = this.component;
			} else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) {
					xr.parent = yr;
				} else if(xr.rank > yr.rank) {
					yr.parent = xr;
				} else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == 2) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) {
				xr1 = this.b2.component;
			} else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) {
				yr1 = this.component;
			} else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) {
					xr1.parent = yr1;
				} else if(xr1.rank > yr1.rank) {
					yr1.parent = xr1;
				} else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
		if(this.b3.type == 2) {
			var xr2;
			if(this.b3.component == this.b3.component.parent) {
				xr2 = this.b3.component;
			} else {
				var obj4 = this.b3.component;
				var stack4 = null;
				while(obj4 != obj4.parent) {
					var nxt8 = obj4.parent;
					obj4.parent = stack4;
					stack4 = obj4;
					obj4 = nxt8;
				}
				while(stack4 != null) {
					var nxt9 = stack4.parent;
					stack4.parent = obj4;
					stack4 = nxt9;
				}
				xr2 = obj4;
			}
			var yr2;
			if(this.component == this.component.parent) {
				yr2 = this.component;
			} else {
				var obj5 = this.component;
				var stack5 = null;
				while(obj5 != obj5.parent) {
					var nxt10 = obj5.parent;
					obj5.parent = stack5;
					stack5 = obj5;
					obj5 = nxt10;
				}
				while(stack5 != null) {
					var nxt11 = stack5.parent;
					stack5.parent = obj5;
					stack5 = nxt11;
				}
				yr2 = obj5;
			}
			if(xr2 != yr2) {
				if(xr2.rank < yr2.rank) {
					xr2.parent = yr2;
				} else if(xr2.rank > yr2.rank) {
					yr2.parent = xr2;
				} else {
					yr2.parent = xr2;
					xr2.rank++;
				}
			}
		}
		if(this.b4.type == 2) {
			var xr3;
			if(this.b4.component == this.b4.component.parent) {
				xr3 = this.b4.component;
			} else {
				var obj6 = this.b4.component;
				var stack6 = null;
				while(obj6 != obj6.parent) {
					var nxt12 = obj6.parent;
					obj6.parent = stack6;
					stack6 = obj6;
					obj6 = nxt12;
				}
				while(stack6 != null) {
					var nxt13 = stack6.parent;
					stack6.parent = obj6;
					stack6 = nxt13;
				}
				xr3 = obj6;
			}
			var yr3;
			if(this.component == this.component.parent) {
				yr3 = this.component;
			} else {
				var obj7 = this.component;
				var stack7 = null;
				while(obj7 != obj7.parent) {
					var nxt14 = obj7.parent;
					obj7.parent = stack7;
					stack7 = obj7;
					obj7 = nxt14;
				}
				while(stack7 != null) {
					var nxt15 = stack7.parent;
					stack7.parent = obj7;
					stack7 = nxt15;
				}
				yr3 = obj7;
			}
			if(xr3 != yr3) {
				if(xr3.rank < yr3.rank) {
					xr3.parent = yr3;
				} else if(xr3.rank > yr3.rank) {
					yr3.parent = xr3;
				} else {
					yr3.parent = xr3;
					xr3.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		if(!(this.b1.id == id && (this.b2.id == di || this.b3.id == di || this.b4.id == di) || this.b2.id == id && (this.b3.id == di || this.b4.id == di || this.b1.id == di) || this.b3.id == id && (this.b4.id == di || this.b1.id == di || this.b2.id == di))) {
			if(this.b4.id == id) {
				if(!(this.b1.id == di || this.b2.id == di)) {
					return this.b3.id == di;
				} else {
					return true;
				}
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,clearcache: function() {
		this.jAcc = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) {
			this.pre_dt = dt;
		}
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.equal = this.jointMin == this.jointMax;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		this.a3relx = this.b3.axisy * this.a3localx - this.b3.axisx * this.a3localy;
		this.a3rely = this.a3localx * this.b3.axisx + this.a3localy * this.b3.axisy;
		this.a4relx = this.b4.axisy * this.a4localx - this.b4.axisx * this.a4localy;
		this.a4rely = this.a4localx * this.b4.axisx + this.a4localy * this.b4.axisy;
		var t12x = 0.0;
		var t12y = 0.0;
		var t34x = 0.0;
		var t34y = 0.0;
		t12x = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
		t12y = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
		t34x = this.b4.posx + this.a4relx - (this.b3.posx + this.a3relx);
		t34y = this.b4.posy + this.a4rely - (this.b3.posy + this.a3rely);
		var C12 = Math.sqrt(t12x * t12x + t12y * t12y);
		var C34 = Math.sqrt(t34x * t34x + t34y * t34y);
		if(C12 != 0) {
			var t = 1.0 / C12;
			this.n12x = t12x * t;
			this.n12y = t12y * t;
		}
		if(C34 != 0) {
			var t1 = 1.0 / C34;
			this.n34x = t34x * t1;
			this.n34y = t34y * t1;
			var t2 = this.ratio;
			this.n34x *= t2;
			this.n34y *= t2;
		} else {
			var t3 = this.ratio / Math.sqrt(this.n34x * this.n34x + this.n34y * this.n34y);
			this.n34x *= t3;
			this.n34y *= t3;
		}
		var C = C12 + this.ratio * C34;
		if(this.equal) {
			C -= this.jointMax;
			this.slack = false;
		} else if(C < this.jointMin) {
			C = this.jointMin - C;
			this.n12x = -this.n12x;
			this.n12y = -this.n12y;
			this.n34x = -this.n34x;
			this.n34y = -this.n34y;
			this.slack = false;
		} else if(C > this.jointMax) {
			C -= this.jointMax;
			this.slack = false;
		} else {
			this.n12x = 0;
			this.n12y = 0;
			this.n34x = 0;
			this.n34y = 0;
			C = 0;
			this.slack = true;
		}
		var C1 = C;
		if(!this.slack) {
			this.cx1 = this.n12y * this.a1relx - this.n12x * this.a1rely;
			this.cx2 = this.n12y * this.a2relx - this.n12x * this.a2rely;
			this.cx3 = this.n34y * this.a3relx - this.n34x * this.a3rely;
			this.cx4 = this.n34y * this.a4relx - this.n34x * this.a4rely;
			var ratioSq = this.ratio * this.ratio;
			var K = this.b1.smass + this.b2.smass + ratioSq * (this.b3.smass + this.b4.smass) + this.b1.sinertia * this.cx1 * this.cx1 + this.b2.sinertia * this.cx2 * this.cx2 + this.b3.sinertia * this.cx3 * this.cx3 + this.b4.sinertia * this.cx4 * this.cx4;
			if(this.b1 == this.b4) {
				K -= 2 * ((this.n12x * this.n34x + this.n12y * this.n34y) * this.b1.smass + this.cx1 * this.cx4 * this.b1.sinertia);
			}
			if(this.b1 == this.b3) {
				K += 2 * ((this.n12x * this.n34x + this.n12y * this.n34y) * this.b1.smass + this.cx1 * this.cx3 * this.b1.sinertia);
			}
			if(this.b2 == this.b3) {
				K -= 2 * ((this.n12x * this.n34x + this.n12y * this.n34y) * this.b2.smass + this.cx2 * this.cx3 * this.b2.sinertia);
			}
			if(this.b2 == this.b4) {
				K += 2 * ((this.n12x * this.n34x + this.n12y * this.n34y) * this.b2.smass + this.cx2 * this.cx4 * this.b2.sinertia);
			}
			this.kMass = K;
			if(this.kMass != 0) {
				this.kMass = 1 / this.kMass;
			} else {
				this.jAcc = 0;
			}
			if(!this.stiff) {
				if(this.breakUnderError && C1 * C1 > this.maxError * this.maxError) {
					return true;
				}
				var biasCoef;
				var omega = 2 * Math.PI * this.frequency;
				this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
				var ig = 1 / (1 + this.gamma);
				biasCoef = dt * omega * omega * this.gamma;
				this.gamma *= ig;
				this.kMass *= ig;
				this.bias = -C1 * biasCoef;
				if(this.bias < -this.maxError) {
					this.bias = -this.maxError;
				} else if(this.bias > this.maxError) {
					this.bias = this.maxError;
				}
			} else {
				this.bias = 0;
				this.gamma = 0;
			}
			this.jAcc *= dtratio;
			this.jMax = this.maxForce * dt;
		}
		return false;
	}
	,warmStart: function() {
		if(!this.slack) {
			var t = this.b1.imass * this.jAcc;
			this.b1.velx -= this.n12x * t;
			this.b1.vely -= this.n12y * t;
			var t1 = this.b2.imass * this.jAcc;
			this.b2.velx += this.n12x * t1;
			this.b2.vely += this.n12y * t1;
			var t2 = this.b3.imass * this.jAcc;
			this.b3.velx -= this.n34x * t2;
			this.b3.vely -= this.n34y * t2;
			var t3 = this.b4.imass * this.jAcc;
			this.b4.velx += this.n34x * t3;
			this.b4.vely += this.n34y * t3;
			this.b1.angvel -= this.cx1 * this.b1.iinertia * this.jAcc;
			this.b2.angvel += this.cx2 * this.b2.iinertia * this.jAcc;
			this.b3.angvel -= this.cx3 * this.b3.iinertia * this.jAcc;
			this.b4.angvel += this.cx4 * this.b4.iinertia * this.jAcc;
		}
	}
	,applyImpulseVel: function() {
		if(this.slack) {
			return false;
		}
		var E = this.n12x * (this.b2.velx + this.b2.kinvelx - this.b1.velx - this.b1.kinvelx) + this.n12y * (this.b2.vely + this.b2.kinvely - this.b1.vely - this.b1.kinvely) + this.n34x * (this.b4.velx + this.b4.kinvelx - this.b3.velx - this.b3.kinvelx) + this.n34y * (this.b4.vely + this.b4.kinvely - this.b3.vely - this.b3.kinvely) + (this.b2.angvel + this.b2.kinangvel) * this.cx2 - (this.b1.angvel + this.b1.kinangvel) * this.cx1 + (this.b4.angvel + this.b4.kinangvel) * this.cx4 - (this.b3.angvel + this.b3.kinangvel) * this.cx3;
		var j = this.kMass * (this.bias - E) - this.jAcc * this.gamma;
		var jOld = this.jAcc;
		this.jAcc += j;
		if(!this.equal && this.jAcc > 0) {
			this.jAcc = 0;
		}
		if(this.breakUnderForce && this.jAcc < -this.jMax) {
			return true;
		}
		if(!this.stiff) {
			if(this.jAcc < -this.jMax) {
				this.jAcc = -this.jMax;
			}
		}
		j = this.jAcc - jOld;
		var t = this.b1.imass * j;
		this.b1.velx -= this.n12x * t;
		this.b1.vely -= this.n12y * t;
		var t1 = this.b2.imass * j;
		this.b2.velx += this.n12x * t1;
		this.b2.vely += this.n12y * t1;
		var t2 = this.b3.imass * j;
		this.b3.velx -= this.n34x * t2;
		this.b3.vely -= this.n34y * t2;
		var t3 = this.b4.imass * j;
		this.b4.velx += this.n34x * t3;
		this.b4.vely += this.n34y * t3;
		this.b1.angvel -= this.cx1 * this.b1.iinertia * j;
		this.b2.angvel += this.cx2 * this.b2.iinertia * j;
		this.b3.angvel -= this.cx3 * this.b3.iinertia * j;
		this.b4.angvel += this.cx4 * this.b4.iinertia * j;
		return false;
	}
	,applyImpulsePos: function() {
		var E;
		var j;
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var r3x = 0.0;
		var r3y = 0.0;
		r3x = this.b3.axisy * this.a3localx - this.b3.axisx * this.a3localy;
		r3y = this.a3localx * this.b3.axisx + this.a3localy * this.b3.axisy;
		var r4x = 0.0;
		var r4y = 0.0;
		r4x = this.b4.axisy * this.a4localx - this.b4.axisx * this.a4localy;
		r4y = this.a4localx * this.b4.axisx + this.a4localy * this.b4.axisy;
		var slack;
		var n12x = 0.0;
		var n12y = 0.0;
		var n34x = 0.0;
		var n34y = 0.0;
		n12x = this.n12x;
		n12y = this.n12y;
		n34x = this.n34x;
		n34y = this.n34y;
		var t12x = 0.0;
		var t12y = 0.0;
		var t34x = 0.0;
		var t34y = 0.0;
		t12x = this.b2.posx + r2x - (this.b1.posx + r1x);
		t12y = this.b2.posy + r2y - (this.b1.posy + r1y);
		t34x = this.b4.posx + r4x - (this.b3.posx + r3x);
		t34y = this.b4.posy + r4y - (this.b3.posy + r3y);
		var C12 = Math.sqrt(t12x * t12x + t12y * t12y);
		var C34 = Math.sqrt(t34x * t34x + t34y * t34y);
		if(C12 != 0) {
			var t = 1.0 / C12;
			n12x = t12x * t;
			n12y = t12y * t;
		}
		if(C34 != 0) {
			var t1 = 1.0 / C34;
			n34x = t34x * t1;
			n34y = t34y * t1;
			var t2 = this.ratio;
			n34x *= t2;
			n34y *= t2;
		} else {
			var t3 = this.ratio / Math.sqrt(n34x * n34x + n34y * n34y);
			n34x *= t3;
			n34y *= t3;
		}
		var C = C12 + this.ratio * C34;
		if(this.equal) {
			C -= this.jointMax;
			slack = false;
		} else if(C < this.jointMin) {
			C = this.jointMin - C;
			n12x = -n12x;
			n12y = -n12y;
			n34x = -n34x;
			n34y = -n34y;
			slack = false;
		} else if(C > this.jointMax) {
			C -= this.jointMax;
			slack = false;
		} else {
			n12x = 0;
			n12y = 0;
			n34x = 0;
			n34y = 0;
			C = 0;
			slack = true;
		}
		E = C;
		if(!slack) {
			if(this.breakUnderError && E * E > this.maxError * this.maxError) {
				return true;
			}
			if(E * E < nape_Config.constraintLinearSlop * nape_Config.constraintLinearSlop) {
				return false;
			}
			E *= 0.5;
			if(E * E > 6) {
				var k = this.b1.smass + this.b2.smass;
				if(k > nape_Config.epsilon) {
					k = 0.75 / k;
					j = -E * k;
					if(this.equal || j < 0) {
						var t4 = j * this.b1.imass;
						this.b1.posx -= n12x * t4;
						this.b1.posy -= n12y * t4;
						var t5 = j * this.b2.imass;
						this.b2.posx += n12x * t5;
						this.b2.posy += n12y * t5;
						var t6 = j * this.b3.imass;
						this.b3.posx -= n34x * t6;
						this.b3.posy -= n34y * t6;
						var t7 = j * this.b4.imass;
						this.b4.posx += n34x * t7;
						this.b4.posy += n34y * t7;
						var t12x1 = 0.0;
						var t12y1 = 0.0;
						var t34x1 = 0.0;
						var t34y1 = 0.0;
						t12x1 = this.b2.posx + r2x - (this.b1.posx + r1x);
						t12y1 = this.b2.posy + r2y - (this.b1.posy + r1y);
						t34x1 = this.b4.posx + r4x - (this.b3.posx + r3x);
						t34y1 = this.b4.posy + r4y - (this.b3.posy + r3y);
						var C121 = Math.sqrt(t12x1 * t12x1 + t12y1 * t12y1);
						var C341 = Math.sqrt(t34x1 * t34x1 + t34y1 * t34y1);
						if(C121 != 0) {
							var t8 = 1.0 / C121;
							n12x = t12x1 * t8;
							n12y = t12y1 * t8;
						}
						if(C341 != 0) {
							var t9 = 1.0 / C341;
							n34x = t34x1 * t9;
							n34y = t34y1 * t9;
							var t10 = this.ratio;
							n34x *= t10;
							n34y *= t10;
						} else {
							var t11 = this.ratio / Math.sqrt(n34x * n34x + n34y * n34y);
							n34x *= t11;
							n34y *= t11;
						}
						var C1 = C121 + this.ratio * C341;
						if(this.equal) {
							C1 -= this.jointMax;
							slack = false;
						} else if(C1 < this.jointMin) {
							C1 = this.jointMin - C1;
							n12x = -n12x;
							n12y = -n12y;
							n34x = -n34x;
							n34y = -n34y;
							slack = false;
						} else if(C1 > this.jointMax) {
							C1 -= this.jointMax;
							slack = false;
						} else {
							n12x = 0;
							n12y = 0;
							n34x = 0;
							n34y = 0;
							C1 = 0;
							slack = true;
						}
						E = C1;
						E *= 0.5;
					}
				}
			}
			var cx1;
			var cx2;
			var cx3;
			var cx4;
			cx1 = n12y * r1x - n12x * r1y;
			cx2 = n12y * r2x - n12x * r2y;
			cx3 = n34y * r3x - n34x * r3y;
			cx4 = n34y * r4x - n34x * r4y;
			var ratioSq = this.ratio * this.ratio;
			var K = this.b1.smass + this.b2.smass + ratioSq * (this.b3.smass + this.b4.smass) + this.b1.sinertia * cx1 * cx1 + this.b2.sinertia * cx2 * cx2 + this.b3.sinertia * cx3 * cx3 + this.b4.sinertia * cx4 * cx4;
			if(this.b1 == this.b4) {
				K -= 2 * ((n12x * n34x + n12y * n34y) * this.b1.smass + cx1 * cx4 * this.b1.sinertia);
			}
			if(this.b1 == this.b3) {
				K += 2 * ((n12x * n34x + n12y * n34y) * this.b1.smass + cx1 * cx3 * this.b1.sinertia);
			}
			if(this.b2 == this.b3) {
				K -= 2 * ((n12x * n34x + n12y * n34y) * this.b2.smass + cx2 * cx3 * this.b2.sinertia);
			}
			if(this.b2 == this.b4) {
				K += 2 * ((n12x * n34x + n12y * n34y) * this.b2.smass + cx2 * cx4 * this.b2.sinertia);
			}
			var k1 = K;
			if(k1 != 0) {
				k1 = 1 / k1;
			}
			j = -E * k1;
			if(this.equal || j < 0) {
				var t12 = this.b1.imass * j;
				this.b1.posx -= n12x * t12;
				this.b1.posy -= n12y * t12;
				var t13 = this.b2.imass * j;
				this.b2.posx += n12x * t13;
				this.b2.posy += n12y * t13;
				var t14 = this.b3.imass * j;
				this.b3.posx -= n34x * t14;
				this.b3.posy -= n34y * t14;
				var t15 = this.b4.imass * j;
				this.b4.posx += n34x * t15;
				this.b4.posy += n34y * t15;
				var _this = this.b1;
				var dr = -cx1 * this.b1.iinertia * j;
				_this.rot += dr;
				if(dr * dr > 0.0001) {
					_this.axisx = Math.sin(_this.rot);
					_this.axisy = Math.cos(_this.rot);
				} else {
					var d2 = dr * dr;
					var p = 1 - 0.5 * d2;
					var m = 1 - d2 * d2 / 8;
					var nx = (p * _this.axisx + dr * _this.axisy) * m;
					_this.axisy = (p * _this.axisy - dr * _this.axisx) * m;
					_this.axisx = nx;
				}
				var _this1 = this.b2;
				var dr1 = cx2 * this.b2.iinertia * j;
				_this1.rot += dr1;
				if(dr1 * dr1 > 0.0001) {
					_this1.axisx = Math.sin(_this1.rot);
					_this1.axisy = Math.cos(_this1.rot);
				} else {
					var d21 = dr1 * dr1;
					var p1 = 1 - 0.5 * d21;
					var m1 = 1 - d21 * d21 / 8;
					var nx1 = (p1 * _this1.axisx + dr1 * _this1.axisy) * m1;
					_this1.axisy = (p1 * _this1.axisy - dr1 * _this1.axisx) * m1;
					_this1.axisx = nx1;
				}
				var _this2 = this.b3;
				var dr2 = -cx3 * this.b3.iinertia * j;
				_this2.rot += dr2;
				if(dr2 * dr2 > 0.0001) {
					_this2.axisx = Math.sin(_this2.rot);
					_this2.axisy = Math.cos(_this2.rot);
				} else {
					var d22 = dr2 * dr2;
					var p2 = 1 - 0.5 * d22;
					var m2 = 1 - d22 * d22 / 8;
					var nx2 = (p2 * _this2.axisx + dr2 * _this2.axisy) * m2;
					_this2.axisy = (p2 * _this2.axisy - dr2 * _this2.axisx) * m2;
					_this2.axisx = nx2;
				}
				var _this3 = this.b4;
				var dr3 = cx4 * this.b4.iinertia * j;
				_this3.rot += dr3;
				if(dr3 * dr3 > 0.0001) {
					_this3.axisx = Math.sin(_this3.rot);
					_this3.axisy = Math.cos(_this3.rot);
				} else {
					var d23 = dr3 * dr3;
					var p3 = 1 - 0.5 * d23;
					var m3 = 1 - d23 * d23 / 8;
					var nx3 = (p3 * _this3.axisx + dr3 * _this3.axisy) * m3;
					_this3.axisy = (p3 * _this3.axisy - dr3 * _this3.axisx) * m3;
					_this3.axisx = nx3;
				}
			}
		}
		return false;
	}
	,__class__: zpp_$nape_constraint_ZPP_$PulleyJoint
});
var zpp_$nape_constraint_ZPP_$UserConstraint = function(dim,velonly) {
	this.jOld = null;
	this.J = null;
	this.vec3 = null;
	this.Keff = null;
	this.jMax = 0.0;
	this.velonly = false;
	this.gamma = 0.0;
	this.soft = 0.0;
	this.y = null;
	this.L = null;
	this.stepped = false;
	this.bias = null;
	this.jAcc = null;
	this.dim = 0;
	this.bodies = null;
	this.outer_zn = null;
	zpp_$nape_constraint_ZPP_$Constraint.call(this);
	this.bodies = [];
	this.dim = dim;
	this.velonly = velonly;
	this.jAcc = [];
	this.bias = [];
	this.L = [];
	this.J = [];
	this.jOld = [];
	this.y = [];
	this.Keff = [];
	this.vec3 = nape_geom_Vec3.get(0,0,0);
	var _g1 = 0;
	var _g = dim;
	while(_g1 < _g) {
		var i = _g1++;
		var tmp = this.bias[i] = this.J[i] = this.jOld[i] = this.y[i] = 0.0;
		this.jAcc[i] = tmp;
		var _g3 = 0;
		var _g2 = dim;
		while(_g3 < _g2) {
			var j = _g3++;
			this.L[i * dim + j] = 0.0;
		}
	}
	this.stepped = false;
};
zpp_$nape_constraint_ZPP_$UserConstraint.__name__ = true;
zpp_$nape_constraint_ZPP_$UserConstraint.__super__ = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$UserConstraint.prototype = $extend(zpp_$nape_constraint_ZPP_$Constraint.prototype,{
	activeBodies: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body != null) {
				b.body.constraints.add(this);
			}
		}
	}
	,inactiveBodies: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body != null) {
				b.body.constraints.remove(this);
			}
		}
	}
	,validate: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body.space != this.space) {
				throw new js__$Boot_HaxeError("Error: Constraints must have each body within the same sapce to which the constraint has been assigned");
			}
		}
		this.outer_zn.__validate();
	}
	,wake_connected: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body.type == 2) {
				b.body.wake();
			}
		}
	}
	,forest: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body.type == 2) {
				var xr;
				if(b.body.component == b.body.component.parent) {
					xr = b.body.component;
				} else {
					var obj = b.body.component;
					var stack = null;
					while(obj != obj.parent) {
						var nxt = obj.parent;
						obj.parent = stack;
						stack = obj;
						obj = nxt;
					}
					while(stack != null) {
						var nxt1 = stack.parent;
						stack.parent = obj;
						stack = nxt1;
					}
					xr = obj;
				}
				var yr;
				if(this.component == this.component.parent) {
					yr = this.component;
				} else {
					var obj1 = this.component;
					var stack1 = null;
					while(obj1 != obj1.parent) {
						var nxt2 = obj1.parent;
						obj1.parent = stack1;
						stack1 = obj1;
						obj1 = nxt2;
					}
					while(stack1 != null) {
						var nxt3 = stack1.parent;
						stack1.parent = obj1;
						stack1 = nxt3;
					}
					yr = obj1;
				}
				if(xr != yr) {
					if(xr.rank < yr.rank) {
						xr.parent = yr;
					} else if(xr.rank > yr.rank) {
						yr.parent = xr;
					} else {
						yr.parent = xr;
						xr.rank++;
					}
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		var ret = false;
		var bl = this.bodies.length | 0;
		var _g1 = 0;
		var _g = bl;
		while(_g1 < _g) {
			var bi = _g1++;
			var b = this.bodies[bi].body;
			var _g3 = bi + 1;
			var _g2 = bl;
			while(_g3 < _g2) {
				var ci = _g3++;
				var c = this.bodies[ci].body;
				if(b.id == id && c.id == di || b.id == di && c.id == id) {
					ret = true;
					break;
				}
			}
			if(ret) {
				break;
			}
		}
		return ret;
	}
	,broken: function() {
		this.outer_zn.__broken();
	}
	,clearcache: function() {
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			this.jAcc[i] = 0.0;
		}
		this.pre_dt = -1.0;
	}
	,lsq: function(v) {
		var sum = 0.0;
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			sum += v[i] * v[i];
		}
		return sum;
	}
	,_clamp: function(v,max) {
		var x = this.lsq(v);
		if(x > max * max) {
			var scale = max / Math.sqrt(x);
			var _g1 = 0;
			var _g = this.dim;
			while(_g1 < _g) {
				var i = _g1++;
				v[i] *= scale;
			}
		}
	}
	,solve: function(m) {
		var ind = 0;
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var j = _g1++;
			var sum = 0.0;
			var _g3 = 0;
			var _g2 = j - 1;
			while(_g3 < _g2) {
				var k = _g3++;
				sum += this.L[j * this.dim + k] * this.L[j * this.dim + k];
			}
			var rec = Math.sqrt(m[ind++] - sum);
			this.L[j * this.dim + j] = rec;
			if(rec != 0) {
				rec = 1.0 / rec;
				var _g31 = j + 1;
				var _g21 = this.dim;
				while(_g31 < _g21) {
					var i = _g31++;
					var sum1 = 0.0;
					var _g5 = 0;
					var _g4 = j - 1;
					while(_g5 < _g4) {
						var k1 = _g5++;
						sum1 += this.L[i * this.dim + k1] * this.L[j * this.dim + k1];
					}
					this.L[i * this.dim + j] = rec * (m[ind++] - sum1);
				}
			} else {
				var _g32 = j + 1;
				var _g22 = this.dim;
				while(_g32 < _g22) {
					var i1 = _g32++;
					this.L[i1 * this.dim + j] = 0.0;
				}
				ind += this.dim - j - 1;
			}
		}
		return this.L;
	}
	,transform: function(L,x) {
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			var sum = x[i];
			var lii = L[i * this.dim + i];
			if(lii != 0) {
				var _g3 = 0;
				var _g2 = i;
				while(_g3 < _g2) {
					var k = _g3++;
					sum -= L[i * this.dim + k] * this.y[k];
				}
				this.y[i] = sum / lii;
			} else {
				this.y[i] = 0.0;
			}
		}
		var _g11 = 0;
		var _g4 = this.dim;
		while(_g11 < _g4) {
			var ix = _g11++;
			var i1 = this.dim - 1 - ix;
			var lii1 = L[i1 * this.dim + i1];
			if(lii1 != 0) {
				var sum1 = this.y[i1];
				var _g31 = i1 + 1;
				var _g21 = this.dim;
				while(_g31 < _g21) {
					var k1 = _g31++;
					sum1 -= L[k1 * this.dim + i1] * x[k1];
				}
				x[i1] = sum1 / lii1;
			} else {
				x[i1] = 0.0;
			}
		}
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) {
			this.pre_dt = dt;
		}
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.outer_zn.__prepare();
		this.outer_zn.__eff_mass(this.Keff);
		this.L = this.solve(this.Keff);
		if(!this.stiff && !this.velonly) {
			var biasCoef;
			var omega = 2 * Math.PI * this.frequency;
			this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
			var ig = 1 / (1 + this.gamma);
			biasCoef = dt * omega * omega * this.gamma;
			this.gamma *= ig;
			this.soft = ig;
			this.outer_zn.__position(this.bias);
			if(this.breakUnderError && this.lsq(this.bias) > this.maxError * this.maxError) {
				return true;
			}
			var _g1 = 0;
			var _g = this.dim;
			while(_g1 < _g) {
				var i = _g1++;
				this.bias[i] *= -biasCoef;
			}
			this._clamp(this.bias,this.maxError);
		} else {
			var _g11 = 0;
			var _g2 = this.dim;
			while(_g11 < _g2) {
				var i1 = _g11++;
				this.bias[i1] = 0.0;
			}
			this.gamma = 0.0;
			this.soft = 1.0;
		}
		var _g12 = 0;
		var _g3 = this.dim;
		while(_g12 < _g3) {
			var i2 = _g12++;
			this.jAcc[i2] *= dtratio;
		}
		this.jMax = this.maxForce * dt;
		return false;
	}
	,warmStart: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var bs = _g1[_g];
			++_g;
			var b = bs.body;
			this.outer_zn.__impulse(this.jAcc,b.outer,this.vec3);
			var t = b.imass;
			var b1 = b;
			var b2 = b1.velx;
			var _this = this.vec3;
			if(_this != null && _this.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this1 = _this.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			b1.velx = b2 + _this.zpp_inner.x * t;
			var b3 = b;
			var b4 = b3.vely;
			var _this2 = this.vec3;
			if(_this2 != null && _this2.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this3 = _this2.zpp_inner;
			if(_this3._validate != null) {
				_this3._validate();
			}
			b3.vely = b4 + _this2.zpp_inner.y * t;
			var b5 = b;
			var b6 = b5.angvel;
			var _this4 = this.vec3;
			if(_this4 != null && _this4.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this5 = _this4.zpp_inner;
			if(_this5._validate != null) {
				_this5._validate();
			}
			b5.angvel = b6 + _this4.zpp_inner.z * b.iinertia;
		}
	}
	,applyImpulseVel: function() {
		this.outer_zn.__velocity(this.J);
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			this.J[i] = this.bias[i] - this.J[i];
		}
		this.transform(this.L,this.J);
		var _g11 = 0;
		var _g2 = this.dim;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this.jOld[i1] = this.jAcc[i1];
			this.jAcc[i1] += this.J[i1] = this.J[i1] * this.soft - this.jAcc[i1] * this.gamma;
		}
		this.outer_zn.__clamp(this.jAcc);
		if((this.breakUnderForce || !this.stiff) && this.lsq(this.jAcc) > this.jMax * this.jMax) {
			if(this.breakUnderForce) {
				return true;
			} else if(!this.stiff) {
				this._clamp(this.jAcc,this.jMax);
			}
		}
		var _g12 = 0;
		var _g3 = this.dim;
		while(_g12 < _g3) {
			var i2 = _g12++;
			this.J[i2] = this.jAcc[i2] - this.jOld[i2];
		}
		var _g4 = 0;
		var _g13 = this.bodies;
		while(_g4 < _g13.length) {
			var bs = _g13[_g4];
			++_g4;
			var b = bs.body;
			this.outer_zn.__impulse(this.J,b.outer,this.vec3);
			var t = b.imass;
			var b1 = b;
			var b2 = b1.velx;
			var _this = this.vec3;
			if(_this != null && _this.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this1 = _this.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			b1.velx = b2 + _this.zpp_inner.x * t;
			var b3 = b;
			var b4 = b3.vely;
			var _this2 = this.vec3;
			if(_this2 != null && _this2.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this3 = _this2.zpp_inner;
			if(_this3._validate != null) {
				_this3._validate();
			}
			b3.vely = b4 + _this2.zpp_inner.y * t;
			var b5 = b;
			var b6 = b5.angvel;
			var _this4 = this.vec3;
			if(_this4 != null && _this4.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this5 = _this4.zpp_inner;
			if(_this5._validate != null) {
				_this5._validate();
			}
			b5.angvel = b6 + _this4.zpp_inner.z * b.iinertia;
		}
		return false;
	}
	,applyImpulsePos: function() {
		if(this.velonly) {
			return false;
		}
		this.outer_zn.__prepare();
		this.outer_zn.__position(this.J);
		var lj = this.lsq(this.J);
		if(this.breakUnderError && lj > this.maxError * this.maxError) {
			return true;
		} else if(lj < nape_Config.constraintLinearSlop * nape_Config.constraintLinearSlop) {
			return false;
		}
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			this.J[i] *= -1;
		}
		this.outer_zn.__eff_mass(this.Keff);
		this.transform(this.solve(this.Keff),this.J);
		this.outer_zn.__clamp(this.J);
		var _g2 = 0;
		var _g11 = this.bodies;
		while(_g2 < _g11.length) {
			var bs = _g11[_g2];
			++_g2;
			var b = bs.body;
			this.outer_zn.__impulse(this.J,b.outer,this.vec3);
			var t = b.imass;
			var b1 = b;
			var b2 = b1.posx;
			var _this = this.vec3;
			if(_this != null && _this.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this1 = _this.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			b1.posx = b2 + _this.zpp_inner.x * t;
			var b3 = b;
			var b4 = b3.posy;
			var _this2 = this.vec3;
			if(_this2 != null && _this2.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this3 = _this2.zpp_inner;
			if(_this3._validate != null) {
				_this3._validate();
			}
			b3.posy = b4 + _this2.zpp_inner.y * t;
			var _this4 = this.vec3;
			if(_this4 != null && _this4.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this5 = _this4.zpp_inner;
			if(_this5._validate != null) {
				_this5._validate();
			}
			var dr = _this4.zpp_inner.z * b.iinertia;
			b.rot += dr;
			if(dr * dr > 0.0001) {
				b.axisx = Math.sin(b.rot);
				b.axisy = Math.cos(b.rot);
			} else {
				var d2 = dr * dr;
				var p = 1 - 0.5 * d2;
				var m = 1 - d2 * d2 / 8;
				var nx = (p * b.axisx + dr * b.axisy) * m;
				b.axisy = (p * b.axisy - dr * b.axisx) * m;
				b.axisx = nx;
			}
		}
		return false;
	}
	,__class__: zpp_$nape_constraint_ZPP_$UserConstraint
});
var zpp_$nape_constraint_ZPP_$UserBody = function(cnt,body) {
	this.body = null;
	this.cnt = 0;
	this.cnt = cnt;
	this.body = body;
};
zpp_$nape_constraint_ZPP_$UserBody.__name__ = true;
zpp_$nape_constraint_ZPP_$UserBody.prototype = {
	__class__: zpp_$nape_constraint_ZPP_$UserBody
};
var zpp_$nape_constraint_ZPP_$WeldJoint = function() {
	this.stepped = false;
	this.biasz = 0.0;
	this.biasy = 0.0;
	this.biasx = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAccz = 0.0;
	this.jAccy = 0.0;
	this.jAccx = 0.0;
	this.kMassf = 0.0;
	this.kMasse = 0.0;
	this.kMassc = 0.0;
	this.kMassd = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.phase = 0.0;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.b2 = null;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.b1 = null;
	this.outer_zn = null;
	zpp_$nape_constraint_ZPP_$Constraint.call(this);
	this.phase = 0;
	this.jAccx = 0;
	this.jAccy = 0;
	this.jAccz = 0;
	this.jMax = Infinity;
	this.stepped = false;
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
};
zpp_$nape_constraint_ZPP_$WeldJoint.__name__ = true;
zpp_$nape_constraint_ZPP_$WeldJoint.__super__ = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$WeldJoint.prototype = $extend(zpp_$nape_constraint_ZPP_$Constraint.prototype,{
	activeBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.add(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.add(this);
			}
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.remove(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.remove(this);
			}
		}
	}
	,validate_a1: function() {
		this.wrap_a1.zpp_inner.x = this.a1localx;
		this.wrap_a1.zpp_inner.y = this.a1localy;
	}
	,invalidate_a1: function(x) {
		this.immutable_midstep("Constraint::" + "a1");
		this.a1localx = x.x;
		this.a1localy = x.y;
		this.wake();
	}
	,setup_a1: function() {
		var x = this.a1localx;
		var y = this.a1localy;
		if(x != x || y != y) {
			throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
			ret = new nape_geom_Vec2();
		} else {
			ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
				ret1 = new zpp_$nape_geom_ZPP_$Vec2();
			} else {
				ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = ret.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = ret.zpp_inner;
				if(_this2._validate != null) {
					_this2._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this3 = ret.zpp_inner;
				if(_this3._invalidate != null) {
					_this3._invalidate(_this3);
				}
			}
		}
		ret.zpp_inner.weak = false;
		this.wrap_a1 = ret;
		this.wrap_a1.zpp_inner._inuse = true;
		this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
		this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
	}
	,validate_a2: function() {
		this.wrap_a2.zpp_inner.x = this.a2localx;
		this.wrap_a2.zpp_inner.y = this.a2localy;
	}
	,invalidate_a2: function(x) {
		this.immutable_midstep("Constraint::" + "a2");
		this.a2localx = x.x;
		this.a2localy = x.y;
		this.wake();
	}
	,setup_a2: function() {
		var x = this.a2localx;
		var y = this.a2localy;
		if(x != x || y != y) {
			throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
			ret = new nape_geom_Vec2();
		} else {
			ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
				ret1 = new zpp_$nape_geom_ZPP_$Vec2();
			} else {
				ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = ret.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = ret.zpp_inner;
				if(_this2._validate != null) {
					_this2._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this3 = ret.zpp_inner;
				if(_this3._invalidate != null) {
					_this3._invalidate(_this3);
				}
			}
		}
		ret.zpp_inner.weak = false;
		this.wrap_a2 = ret;
		this.wrap_a2.zpp_inner._inuse = true;
		this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
		this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) {
			throw new js__$Boot_HaxeError("Error: AngleJoint cannot be simulated null bodies");
		}
		if(this.b1 == this.b2) {
			throw new js__$Boot_HaxeError("Error: WeldJoint cannot be simulated with body1 == body2");
		}
		if(this.b1.space != this.space || this.b2.space != this.space) {
			throw new js__$Boot_HaxeError("Error: Constraints must have each body within the same space to which the constraint has been assigned");
		}
		if(this.b1.type != 2 && this.b2.type != 2) {
			throw new js__$Boot_HaxeError("Error: Constraints cannot have both bodies non-dynamic");
		}
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == 2) {
			this.b1.wake();
		}
		if(this.b2 != null && this.b2.type == 2) {
			this.b2.wake();
		}
	}
	,forest: function() {
		if(this.b1.type == 2) {
			var xr;
			if(this.b1.component == this.b1.component.parent) {
				xr = this.b1.component;
			} else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) {
				yr = this.component;
			} else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) {
					xr.parent = yr;
				} else if(xr.rank > yr.rank) {
					yr.parent = xr;
				} else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == 2) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) {
				xr1 = this.b2.component;
			} else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) {
				yr1 = this.component;
			} else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) {
					xr1.parent = yr1;
				} else if(xr1.rank > yr1.rank) {
					yr1.parent = xr1;
				} else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		if(!(this.b1.id == id && this.b2.id == di)) {
			if(this.b1.id == di) {
				return this.b2.id == id;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,clearcache: function() {
		this.jAccx = 0;
		this.jAccy = 0;
		this.jAccz = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) {
			this.pre_dt = dt;
		}
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var m = this.b1.smass + this.b2.smass;
		this.kMassa = m;
		this.kMassb = 0;
		this.kMassd = m;
		this.kMassc = 0;
		this.kMasse = 0;
		this.kMassf = 0;
		if(this.b1.sinertia != 0) {
			var X = this.a1relx * this.b1.sinertia;
			var Y = this.a1rely * this.b1.sinertia;
			this.kMassa += Y * this.a1rely;
			this.kMassb += -Y * this.a1relx;
			this.kMassd += X * this.a1relx;
			this.kMassc += -Y;
			this.kMasse += X;
			this.kMassf += this.b1.sinertia;
		}
		if(this.b2.sinertia != 0) {
			var X1 = this.a2relx * this.b2.sinertia;
			var Y1 = this.a2rely * this.b2.sinertia;
			this.kMassa += Y1 * this.a2rely;
			this.kMassb += -Y1 * this.a2relx;
			this.kMassd += X1 * this.a2relx;
			this.kMassc += -Y1;
			this.kMasse += X1;
			this.kMassf += this.b2.sinertia;
		}
		var det = this.kMassa * (this.kMassd * this.kMassf - this.kMasse * this.kMasse) + this.kMassb * (this.kMassc * this.kMasse - this.kMassb * this.kMassf) + this.kMassc * (this.kMassb * this.kMasse - this.kMassc * this.kMassd);
		var flag;
		if(det != det) {
			this.kMassa = 0;
			this.kMassb = 0;
			this.kMassd = 0;
			this.kMassc = 0;
			this.kMasse = 0;
			this.kMassf = 0;
			flag = 7;
		} else if(det == 0) {
			var flag1 = 0;
			if(this.kMassa != 0) {
				this.kMassa = 1 / this.kMassa;
			} else {
				this.kMassa = 0;
				flag1 |= 1;
			}
			if(this.kMassd != 0) {
				this.kMassd = 1 / this.kMassd;
			} else {
				this.kMassd = 0;
				flag1 |= 2;
			}
			if(this.kMassf != 0) {
				this.kMassf = 1 / this.kMassf;
			} else {
				this.kMassf = 0;
				flag1 |= 4;
			}
			this.kMassb = this.kMassc = this.kMasse = 0.0;
			flag = flag1;
		} else {
			det = 1 / det;
			var A = det * (this.kMassd * this.kMassf - this.kMasse * this.kMasse);
			var B = det * (this.kMasse * this.kMassc - this.kMassb * this.kMassf);
			var D = det * (this.kMassa * this.kMassf - this.kMassc * this.kMassc);
			var C = det * (this.kMassb * this.kMasse - this.kMassc * this.kMassd);
			var E = det * (this.kMassb * this.kMassc - this.kMassa * this.kMasse);
			var F = det * (this.kMassa * this.kMassd - this.kMassb * this.kMassb);
			this.kMassa = A;
			this.kMassb = B;
			this.kMassd = D;
			this.kMassc = C;
			this.kMasse = E;
			this.kMassf = F;
			flag = 0;
		}
		if((flag & 1) != 0) {
			this.jAccx = 0;
		}
		if((flag & 2) != 0) {
			this.jAccy = 0;
		}
		if((flag & 4) != 0) {
			this.jAccz = 0;
		}
		if(!this.stiff) {
			var biasCoef;
			var omega = 2 * Math.PI * this.frequency;
			this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
			var ig = 1 / (1 + this.gamma);
			biasCoef = dt * omega * omega * this.gamma;
			this.gamma *= ig;
			var X2 = ig;
			this.kMassa *= X2;
			this.kMassb *= X2;
			this.kMassd *= X2;
			this.kMassc *= X2;
			this.kMasse *= X2;
			this.kMassf *= X2;
			this.biasx = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
			this.biasy = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
			this.biasz = this.b2.rot - this.b1.rot - this.phase;
			if(this.breakUnderError && this.biasx * this.biasx + this.biasy * this.biasy + this.biasz * this.biasz > this.maxError * this.maxError) {
				return true;
			}
			var t = -biasCoef;
			var t1 = t;
			this.biasx *= t1;
			this.biasy *= t1;
			this.biasz *= t;
			var t2 = this.maxError;
			var ls = this.biasx * this.biasx + this.biasy * this.biasy + this.biasz * this.biasz;
			if(ls > t2 * t2) {
				var t3 = t2 * (1.0 / Math.sqrt(ls));
				var t4 = t3;
				this.biasx *= t4;
				this.biasy *= t4;
				this.biasz *= t3;
			}
		} else {
			this.biasx = 0;
			this.biasy = 0;
			this.biasz = 0;
			this.gamma = 0;
		}
		var t5 = dtratio;
		var t6 = t5;
		this.jAccx *= t6;
		this.jAccy *= t6;
		this.jAccz *= t5;
		this.jMax = this.maxForce * dt;
		return false;
	}
	,warmStart: function() {
		var t = this.b1.imass;
		this.b1.velx -= this.jAccx * t;
		this.b1.vely -= this.jAccy * t;
		var t1 = this.b2.imass;
		this.b2.velx += this.jAccx * t1;
		this.b2.vely += this.jAccy * t1;
		this.b1.angvel -= (this.jAccy * this.a1relx - this.jAccx * this.a1rely + this.jAccz) * this.b1.iinertia;
		this.b2.angvel += (this.jAccy * this.a2relx - this.jAccx * this.a2rely + this.jAccz) * this.b2.iinertia;
	}
	,applyImpulseVel: function() {
		var Ex = 0.0;
		var Ey = 0.0;
		var Ez = 0.0;
		Ex = this.b2.velx + this.b2.kinvelx - this.a2rely * (this.b2.angvel + this.b2.kinangvel) - (this.b1.velx + this.b1.kinvelx - this.a1rely * (this.b1.angvel + this.b1.kinangvel));
		Ey = this.b2.vely + this.b2.kinvely + this.a2relx * (this.b2.angvel + this.b2.kinangvel) - (this.b1.vely + this.b1.kinvely + this.a1relx * (this.b1.angvel + this.b1.kinangvel));
		Ez = this.b2.angvel + this.b2.kinangvel - this.b1.angvel - this.b1.kinangvel;
		var Jx = 0.0;
		var Jy = 0.0;
		var Jz = 0.0;
		Jx = this.biasx - Ex;
		Jy = this.biasy - Ey;
		Jz = this.biasz - Ez;
		var X = this.kMassa * Jx + this.kMassb * Jy + this.kMassc * Jz;
		var Y = this.kMassb * Jx + this.kMassd * Jy + this.kMasse * Jz;
		Jz = this.kMassc * Jx + this.kMasse * Jy + this.kMassf * Jz;
		Jx = X;
		Jy = Y;
		var t = this.gamma;
		var t1 = t;
		Jx -= this.jAccx * t1;
		Jy -= this.jAccy * t1;
		Jz -= this.jAccz * t;
		var jOldx = 0.0;
		var jOldy = 0.0;
		var jOldz = 0.0;
		jOldx = this.jAccx;
		jOldy = this.jAccy;
		jOldz = this.jAccz;
		var t2 = 1;
		var t3 = t2;
		this.jAccx += Jx * t3;
		this.jAccy += Jy * t3;
		this.jAccz += Jz * t2;
		if(this.breakUnderForce) {
			if(this.jAccx * this.jAccx + this.jAccy * this.jAccy + this.jAccz * this.jAccz > this.jMax * this.jMax) {
				return true;
			}
		} else if(!this.stiff) {
			var t4 = this.jMax;
			var ls = this.jAccx * this.jAccx + this.jAccy * this.jAccy + this.jAccz * this.jAccz;
			if(ls > t4 * t4) {
				var t5 = t4 * (1.0 / Math.sqrt(ls));
				var t6 = t5;
				this.jAccx *= t6;
				this.jAccy *= t6;
				this.jAccz *= t5;
			}
		}
		Jx = this.jAccx - jOldx;
		Jy = this.jAccy - jOldy;
		Jz = this.jAccz - jOldz;
		var t7 = this.b1.imass;
		this.b1.velx -= Jx * t7;
		this.b1.vely -= Jy * t7;
		var t8 = this.b2.imass;
		this.b2.velx += Jx * t8;
		this.b2.vely += Jy * t8;
		this.b1.angvel -= (Jy * this.a1relx - Jx * this.a1rely + Jz) * this.b1.iinertia;
		this.b2.angvel += (Jy * this.a2relx - Jx * this.a2rely + Jz) * this.b2.iinertia;
		return false;
	}
	,applyImpulsePos: function() {
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var Ex = 0.0;
		var Ey = 0.0;
		var Ez = 0.0;
		Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
		Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
		Ez = this.b2.rot - this.b1.rot - this.phase;
		var Jx = 0.0;
		var Jy = 0.0;
		var Jz = 0.0;
		if(this.breakUnderError && Ex * Ex + Ey * Ey + Ez * Ez > this.maxError * this.maxError) {
			return true;
		}
		var cont = true;
		if(Ex * Ex + Ey * Ey < nape_Config.constraintLinearSlop * nape_Config.constraintLinearSlop) {
			cont = false;
			Ex = 0;
			Ey = 0;
		}
		var x = nape_Config.constraintAngularSlop;
		if(Ez * Ez < x * x) {
			if(!cont) {
				return false;
			} else {
				Ez = 0;
			}
		}
		var t = 0.5;
		var t1 = t;
		Ex *= t1;
		Ey *= t1;
		Ez *= t;
		if(Ex * Ex + Ey * Ey > 6) {
			var k = this.b1.smass + this.b2.smass;
			if(k > nape_Config.epsilon) {
				k = 0.75 / k;
				Jx = -Ex * k;
				Jy = -Ey * k;
				var t2 = 20;
				var ls = Jx * Jx + Jy * Jy;
				if(ls > t2 * t2) {
					var t3 = t2 * (1.0 / Math.sqrt(ls));
					Jx *= t3;
					Jy *= t3;
				}
				var t4 = this.b1.imass;
				this.b1.posx -= Jx * t4;
				this.b1.posy -= Jy * t4;
				var t5 = this.b2.imass;
				this.b2.posx += Jx * t5;
				this.b2.posy += Jy * t5;
				Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
				Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
				Ez = this.b2.rot - this.b1.rot - this.phase;
				var t6 = 0.5;
				var t7 = t6;
				Ex *= t7;
				Ey *= t7;
				Ez *= t6;
			}
		}
		var Ka = 0.0;
		var Kb = 0.0;
		var Kd = 0.0;
		var Kc = 0.0;
		var Ke = 0.0;
		var Kf = 0.0;
		var m = this.b1.smass + this.b2.smass;
		Ka = m;
		Kb = 0;
		Kd = m;
		Kc = 0;
		Ke = 0;
		Kf = 0;
		if(this.b1.sinertia != 0) {
			var X = r1x * this.b1.sinertia;
			var Y = r1y * this.b1.sinertia;
			Ka += Y * r1y;
			Kb += -Y * r1x;
			Kd += X * r1x;
			Kc += -Y;
			Ke += X;
			Kf += this.b1.sinertia;
		}
		if(this.b2.sinertia != 0) {
			var X1 = r2x * this.b2.sinertia;
			var Y1 = r2y * this.b2.sinertia;
			Ka += Y1 * r2y;
			Kb += -Y1 * r2x;
			Kd += X1 * r2x;
			Kc += -Y1;
			Ke += X1;
			Kf += this.b2.sinertia;
		}
		Jx = -Ex;
		Jy = -Ey;
		Jz = -Ez;
		var t8 = 6;
		var ls1 = Jx * Jx + Jy * Jy;
		if(ls1 > t8 * t8) {
			var t9 = t8 * (1.0 / Math.sqrt(ls1));
			Jx *= t9;
			Jy *= t9;
		}
		var a = -0.25;
		if(!(Jz < a)) {
			var tmp = Jz > 0.25;
		}
		var det = Ka * (Kd * Kf - Ke * Ke) + Kb * (Kc * Ke - Kb * Kf) + Kc * (Kb * Ke - Kc * Kd);
		if(det != det) {
			Jz = 0;
			Jy = Jz;
			Jx = Jy;
		} else if(det == 0) {
			if(Ka != 0) {
				Jx /= Ka;
			} else {
				Jx = 0;
			}
			if(Kd != 0) {
				Jy /= Kd;
			} else {
				Jy = 0;
			}
			if(Kf != 0) {
				Jz /= Kf;
			} else {
				Jz = 0;
			}
		} else {
			det = 1 / det;
			var B = Ke * Kc - Kb * Kf;
			var C = Kb * Ke - Kc * Kd;
			var E = Kb * Kc - Ka * Ke;
			var X2 = det * (Jx * (Kd * Kf - Ke * Ke) + Jy * B + Jz * C);
			var Y2 = det * (Jx * B + Jy * (Ka * Kf - Kc * Kc) + Jz * E);
			Jz = det * (Jx * C + Jy * E + Jz * (Ka * Kd - Kb * Kb));
			Jx = X2;
			Jy = Y2;
		}
		var t10 = this.b1.imass;
		this.b1.posx -= Jx * t10;
		this.b1.posy -= Jy * t10;
		var t11 = this.b2.imass;
		this.b2.posx += Jx * t11;
		this.b2.posy += Jy * t11;
		var _this = this.b1;
		var dr = -(Jy * r1x - Jx * r1y + Jz) * this.b1.iinertia;
		_this.rot += dr;
		if(dr * dr > 0.0001) {
			_this.axisx = Math.sin(_this.rot);
			_this.axisy = Math.cos(_this.rot);
		} else {
			var d2 = dr * dr;
			var p = 1 - 0.5 * d2;
			var m1 = 1 - d2 * d2 / 8;
			var nx = (p * _this.axisx + dr * _this.axisy) * m1;
			_this.axisy = (p * _this.axisy - dr * _this.axisx) * m1;
			_this.axisx = nx;
		}
		var _this1 = this.b2;
		var dr1 = (Jy * r2x - Jx * r2y + Jz) * this.b2.iinertia;
		_this1.rot += dr1;
		if(dr1 * dr1 > 0.0001) {
			_this1.axisx = Math.sin(_this1.rot);
			_this1.axisy = Math.cos(_this1.rot);
		} else {
			var d21 = dr1 * dr1;
			var p1 = 1 - 0.5 * d21;
			var m2 = 1 - d21 * d21 / 8;
			var nx1 = (p1 * _this1.axisx + dr1 * _this1.axisy) * m2;
			_this1.axisy = (p1 * _this1.axisy - dr1 * _this1.axisx) * m2;
			_this1.axisx = nx1;
		}
		return false;
	}
	,__class__: zpp_$nape_constraint_ZPP_$WeldJoint
});
var zpp_$nape_dynamics_ZPP_$Arbiter = function() {
	this.sensorarb = null;
	this.fluidarb = null;
	this.colarb = null;
	this.type = 0;
	this.pair = null;
	this.ws2 = null;
	this.ws1 = null;
	this.b2 = null;
	this.b1 = null;
	this.invalidated = false;
	this.immState = 0;
	this.fresh = false;
	this.continuous = false;
	this.presentable = false;
	this.intchange = false;
	this.present = 0;
	this.sleeping = false;
	this.cleared = false;
	this.active = false;
	this.endGenerated = 0;
	this.sleep_stamp = 0;
	this.up_stamp = 0;
	this.stamp = 0;
	this.di = 0;
	this.id = 0;
	this.outer = null;
};
zpp_$nape_dynamics_ZPP_$Arbiter.__name__ = true;
zpp_$nape_dynamics_ZPP_$Arbiter.prototype = {
	wrapper: function() {
		if(this.outer == null) {
			zpp_$nape_dynamics_ZPP_$Arbiter.internal = true;
			if(this.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL) {
				this.colarb.outer_zn = new nape_dynamics_CollisionArbiter();
				this.outer = this.colarb.outer_zn;
			} else if(this.type == zpp_$nape_dynamics_ZPP_$Arbiter.FLUID) {
				this.fluidarb.outer_zn = new nape_dynamics_FluidArbiter();
				this.outer = this.fluidarb.outer_zn;
			} else {
				this.outer = new nape_dynamics_Arbiter();
			}
			this.outer.zpp_inner = this;
			zpp_$nape_dynamics_ZPP_$Arbiter.internal = false;
		}
		return this.outer;
	}
	,__class__: zpp_$nape_dynamics_ZPP_$Arbiter
};
var zpp_$nape_dynamics_ZPP_$SensorArbiter = function() {
	this.next = null;
	zpp_$nape_dynamics_ZPP_$Arbiter.call(this);
	this.type = zpp_$nape_dynamics_ZPP_$Arbiter.SENSOR;
	this.sensorarb = this;
};
zpp_$nape_dynamics_ZPP_$SensorArbiter.__name__ = true;
zpp_$nape_dynamics_ZPP_$SensorArbiter.__super__ = zpp_$nape_dynamics_ZPP_$Arbiter;
zpp_$nape_dynamics_ZPP_$SensorArbiter.prototype = $extend(zpp_$nape_dynamics_ZPP_$Arbiter.prototype,{
	__class__: zpp_$nape_dynamics_ZPP_$SensorArbiter
});
var zpp_$nape_dynamics_ZPP_$FluidArbiter = function() {
	this.pre_dt = 0.0;
	this.mutable = false;
	this.wrap_position = null;
	this.buoyy = 0.0;
	this.buoyx = 0.0;
	this.ny = 0.0;
	this.nx = 0.0;
	this.lgamma = 0.0;
	this.dampy = 0.0;
	this.dampx = 0.0;
	this.vMassc = 0.0;
	this.vMassb = 0.0;
	this.vMassa = 0.0;
	this.agamma = 0.0;
	this.adamp = 0.0;
	this.wMass = 0.0;
	this.nodrag = false;
	this.r2y = 0.0;
	this.r2x = 0.0;
	this.r1y = 0.0;
	this.r1x = 0.0;
	this.overlap = 0.0;
	this.centroidy = 0.0;
	this.centroidx = 0.0;
	this.next = null;
	this.outer_zn = null;
	zpp_$nape_dynamics_ZPP_$Arbiter.call(this);
	this.type = zpp_$nape_dynamics_ZPP_$Arbiter.FLUID;
	this.fluidarb = this;
	this.buoyx = 0;
	this.buoyy = 0;
	this.pre_dt = -1.0;
};
zpp_$nape_dynamics_ZPP_$FluidArbiter.__name__ = true;
zpp_$nape_dynamics_ZPP_$FluidArbiter.__super__ = zpp_$nape_dynamics_ZPP_$Arbiter;
zpp_$nape_dynamics_ZPP_$FluidArbiter.prototype = $extend(zpp_$nape_dynamics_ZPP_$Arbiter.prototype,{
	__class__: zpp_$nape_dynamics_ZPP_$FluidArbiter
});
var zpp_$nape_dynamics_ZPP_$ColArbiter = function() {
	this.pre_dt = 0.0;
	this.mutable = false;
	this.stat = false;
	this.next = null;
	this.hpc2 = false;
	this.hc2 = false;
	this.oc2 = null;
	this.c2 = null;
	this.oc1 = null;
	this.c1 = null;
	this.__ref_vertex = 0;
	this.__ref_edge2 = null;
	this.__ref_edge1 = null;
	this.biasCoef = 0.0;
	this.rev = false;
	this.radius = 0.0;
	this.lproj = 0.0;
	this.lnormy = 0.0;
	this.lnormx = 0.0;
	this.surfacey = 0.0;
	this.surfacex = 0.0;
	this.k2y = 0.0;
	this.k2x = 0.0;
	this.k1y = 0.0;
	this.k1x = 0.0;
	this.rt2b = 0.0;
	this.rn2b = 0.0;
	this.rt2a = 0.0;
	this.rn2a = 0.0;
	this.rt1b = 0.0;
	this.rn1b = 0.0;
	this.rt1a = 0.0;
	this.rn1a = 0.0;
	this.jrAcc = 0.0;
	this.rMass = 0.0;
	this.Kc = 0.0;
	this.Kb = 0.0;
	this.Ka = 0.0;
	this.kMassc = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.wrap_normal = null;
	this.ny = 0.0;
	this.nx = 0.0;
	this.innards = null;
	this.wrap_contacts = null;
	this.contacts = null;
	this.s2 = null;
	this.s1 = null;
	this.userdef_rfric = false;
	this.userdef_restitution = false;
	this.userdef_stat_fric = false;
	this.userdef_dyn_fric = false;
	this.rfric = 0.0;
	this.restitution = 0.0;
	this.stat_fric = 0.0;
	this.dyn_fric = 0.0;
	this.outer_zn = null;
	zpp_$nape_dynamics_ZPP_$Arbiter.call(this);
	this.pre_dt = -1.0;
	this.contacts = new zpp_$nape_dynamics_ZPP_$Contact();
	this.innards = new zpp_$nape_dynamics_ZPP_$IContact();
	this.type = zpp_$nape_dynamics_ZPP_$Arbiter.COL;
	this.colarb = this;
};
zpp_$nape_dynamics_ZPP_$ColArbiter.__name__ = true;
zpp_$nape_dynamics_ZPP_$ColArbiter.__super__ = zpp_$nape_dynamics_ZPP_$Arbiter;
zpp_$nape_dynamics_ZPP_$ColArbiter.prototype = $extend(zpp_$nape_dynamics_ZPP_$Arbiter.prototype,{
	__class__: zpp_$nape_dynamics_ZPP_$ColArbiter
});
var zpp_$nape_dynamics_ZPP_$Contact = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.elasticity = 0.0;
	this.dist = 0.0;
	this.fresh = false;
	this.hash = 0;
	this.stamp = 0;
	this.posOnly = false;
	this.active = false;
	this.inner = null;
	this.arbiter = null;
	this.py = 0.0;
	this.px = 0.0;
	this.outer = null;
	this.inner = new zpp_$nape_dynamics_ZPP_$IContact();
};
zpp_$nape_dynamics_ZPP_$Contact.__name__ = true;
zpp_$nape_dynamics_ZPP_$Contact.prototype = {
	wrapper: function() {
		if(this.outer == null) {
			zpp_$nape_dynamics_ZPP_$Contact.internal = true;
			this.outer = new nape_dynamics_Contact();
			zpp_$nape_dynamics_ZPP_$Contact.internal = false;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,pop: function() {
		var ret = this.next;
		this.next = ret.next;
		ret._inuse = false;
		if(this.next == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,__class__: zpp_$nape_dynamics_ZPP_$Contact
};
var zpp_$nape_dynamics_ZPP_$IContact = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.lr2y = 0.0;
	this.lr2x = 0.0;
	this.lr1y = 0.0;
	this.lr1x = 0.0;
	this.jtAcc = 0.0;
	this.jnAcc = 0.0;
	this.friction = 0.0;
	this.bounce = 0.0;
	this.tMass = 0.0;
	this.nMass = 0.0;
	this.r2y = 0.0;
	this.r2x = 0.0;
	this.r1y = 0.0;
	this.r1x = 0.0;
};
zpp_$nape_dynamics_ZPP_$IContact.__name__ = true;
zpp_$nape_dynamics_ZPP_$IContact.prototype = {
	add: function(o) {
		o._inuse = true;
		var temp = o;
		temp.next = this.next;
		this.next = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,__class__: zpp_$nape_dynamics_ZPP_$IContact
};
var zpp_$nape_dynamics_ZPP_$InteractionFilter = function() {
	this.fluidMask = 0;
	this.fluidGroup = 0;
	this.sensorMask = 0;
	this.sensorGroup = 0;
	this.collisionMask = 0;
	this.collisionGroup = 0;
	this.shapes = null;
	this.outer = null;
	this.next = null;
	this.shapes = new zpp_$nape_util_ZNPList_$ZPP_$Shape();
	this.collisionGroup = this.sensorGroup = this.fluidGroup = 1;
	this.collisionMask = this.sensorMask = this.fluidMask = -1;
};
zpp_$nape_dynamics_ZPP_$InteractionFilter.__name__ = true;
zpp_$nape_dynamics_ZPP_$InteractionFilter.prototype = {
	wrapper: function() {
		if(this.outer == null) {
			this.outer = new nape_dynamics_InteractionFilter();
			var o = this.outer.zpp_inner;
			o.outer = null;
			o.next = zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool;
			zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool = o;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,invalidate: function() {
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.invalidate_filter();
			cx_ite = cx_ite.next;
		}
	}
	,__class__: zpp_$nape_dynamics_ZPP_$InteractionFilter
};
var zpp_$nape_dynamics_ZPP_$InteractionGroup = function() {
	this.depth = 0;
	this.interactors = null;
	this.groups = null;
	this.group = null;
	this.ignore = false;
	this.outer = null;
	this.depth = 0;
	this.groups = new zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup();
	this.interactors = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
};
zpp_$nape_dynamics_ZPP_$InteractionGroup.__name__ = true;
zpp_$nape_dynamics_ZPP_$InteractionGroup.prototype = {
	invalidate: function(force) {
		if(force == null) {
			force = false;
		}
		if(!(force || this.ignore)) {
			return;
		}
		var cx_ite = this.interactors.head;
		while(cx_ite != null) {
			var b = cx_ite.elt;
			if(b.ibody != null) {
				b.ibody.wake();
			} else if(b.ishape != null) {
				b.ishape.body.wake();
			} else {
				b.icompound.wake();
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = this.groups.head;
		while(cx_ite1 != null) {
			var g = cx_ite1.elt;
			g.invalidate(force);
			cx_ite1 = cx_ite1.next;
		}
	}
	,__class__: zpp_$nape_dynamics_ZPP_$InteractionGroup
};
var zpp_$nape_dynamics_ZPP_$SpaceArbiterList = function() {
	this.at_index_3 = 0;
	this.at_index_2 = 0;
	this.at_index_1 = 0;
	this.at_index_0 = 0;
	this.ite_3 = null;
	this.ite_2 = null;
	this.ite_1 = null;
	this.ite_0 = null;
	this.lengths = null;
	this.zip_length = false;
	this._length = 0;
	this.space = null;
	nape_dynamics_ArbiterList.call(this);
	this.at_index_0 = 0;
	this.at_index_1 = 0;
	this.at_index_2 = 0;
	this.at_index_3 = 0;
	this.zip_length = true;
	this._length = 0;
	this.lengths = [];
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		this.lengths.push(0);
	}
};
zpp_$nape_dynamics_ZPP_$SpaceArbiterList.__name__ = true;
zpp_$nape_dynamics_ZPP_$SpaceArbiterList.__super__ = nape_dynamics_ArbiterList;
zpp_$nape_dynamics_ZPP_$SpaceArbiterList.prototype = $extend(nape_dynamics_ArbiterList.prototype,{
	zpp_gl: function() {
		this.zpp_vm();
		if(this.zip_length) {
			this._length = 0;
			var ind = 0;
			var len = 0;
			var cx_ite = this.space.c_arbiters_true.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.active) {
					++len;
				}
				cx_ite = cx_ite.next;
			}
			this.lengths[ind++] = len;
			this._length += len;
			var len1 = 0;
			var cx_ite1 = this.space.c_arbiters_false.head;
			while(cx_ite1 != null) {
				var i1 = cx_ite1.elt;
				if(i1.active) {
					++len1;
				}
				cx_ite1 = cx_ite1.next;
			}
			this.lengths[ind++] = len1;
			this._length += len1;
			var len2 = 0;
			var cx_ite2 = this.space.f_arbiters.head;
			while(cx_ite2 != null) {
				var i2 = cx_ite2.elt;
				if(i2.active) {
					++len2;
				}
				cx_ite2 = cx_ite2.next;
			}
			this.lengths[ind++] = len2;
			this._length += len2;
			var len3 = 0;
			var cx_ite3 = this.space.s_arbiters.head;
			while(cx_ite3 != null) {
				var i3 = cx_ite3.elt;
				if(i3.active) {
					++len3;
				}
				cx_ite3 = cx_ite3.next;
			}
			this.lengths[ind++] = len3;
			this._length += len3;
			this.zip_length = false;
		}
		return this._length;
	}
	,zpp_vm: function() {
		var modified = false;
		if(this.space.c_arbiters_true.modified) {
			modified = true;
			this.space.c_arbiters_true.modified = false;
		}
		if(this.space.c_arbiters_false.modified) {
			modified = true;
			this.space.c_arbiters_false.modified = false;
		}
		if(this.space.f_arbiters.modified) {
			modified = true;
			this.space.f_arbiters.modified = false;
		}
		if(this.space.s_arbiters.modified) {
			modified = true;
			this.space.s_arbiters.modified = false;
		}
		if(modified) {
			this.zip_length = true;
			this._length = 0;
			this.ite_0 = null;
			this.ite_1 = null;
			this.ite_2 = null;
			this.ite_3 = null;
		}
	}
	,at: function(index) {
		this.zpp_vm();
		if(index < 0 || index >= this.zpp_gl()) {
			throw new js__$Boot_HaxeError("Error: Index out of bounds");
		}
		var ret = null;
		var accum_length = 0;
		if(ret == null) {
			if(index < accum_length + this.lengths[0]) {
				var offset = index - accum_length;
				if(offset < this.at_index_0 || this.ite_0 == null) {
					this.at_index_0 = 0;
					this.ite_0 = this.space.c_arbiters_true.head;
					while(true) {
						var x = this.ite_0.elt;
						if(x.active) {
							break;
						}
						this.ite_0 = this.ite_0.next;
					}
				}
				while(this.at_index_0 != offset) {
					this.at_index_0++;
					this.ite_0 = this.ite_0.next;
					while(true) {
						var x1 = this.ite_0.elt;
						if(x1.active) {
							break;
						}
						this.ite_0 = this.ite_0.next;
					}
				}
				ret = this.ite_0.elt.wrapper();
			} else {
				accum_length += this.lengths[0];
			}
		}
		if(ret == null) {
			if(index < accum_length + this.lengths[1]) {
				var offset1 = index - accum_length;
				if(offset1 < this.at_index_1 || this.ite_1 == null) {
					this.at_index_1 = 0;
					this.ite_1 = this.space.c_arbiters_false.head;
					while(true) {
						var x2 = this.ite_1.elt;
						if(x2.active) {
							break;
						}
						this.ite_1 = this.ite_1.next;
					}
				}
				while(this.at_index_1 != offset1) {
					this.at_index_1++;
					this.ite_1 = this.ite_1.next;
					while(true) {
						var x3 = this.ite_1.elt;
						if(x3.active) {
							break;
						}
						this.ite_1 = this.ite_1.next;
					}
				}
				ret = this.ite_1.elt.wrapper();
			} else {
				accum_length += this.lengths[1];
			}
		}
		if(ret == null) {
			if(index < accum_length + this.lengths[2]) {
				var offset2 = index - accum_length;
				if(offset2 < this.at_index_2 || this.ite_2 == null) {
					this.at_index_2 = 0;
					this.ite_2 = this.space.f_arbiters.head;
					while(true) {
						var x4 = this.ite_2.elt;
						if(x4.active) {
							break;
						}
						this.ite_2 = this.ite_2.next;
					}
				}
				while(this.at_index_2 != offset2) {
					this.at_index_2++;
					this.ite_2 = this.ite_2.next;
					while(true) {
						var x5 = this.ite_2.elt;
						if(x5.active) {
							break;
						}
						this.ite_2 = this.ite_2.next;
					}
				}
				ret = this.ite_2.elt.wrapper();
			} else {
				accum_length += this.lengths[2];
			}
		}
		if(ret == null) {
			if(index < accum_length + this.lengths[3]) {
				var offset3 = index - accum_length;
				if(offset3 < this.at_index_3 || this.ite_3 == null) {
					this.at_index_3 = 0;
					this.ite_3 = this.space.s_arbiters.head;
					while(true) {
						var x6 = this.ite_3.elt;
						if(x6.active) {
							break;
						}
						this.ite_3 = this.ite_3.next;
					}
				}
				while(this.at_index_3 != offset3) {
					this.at_index_3++;
					this.ite_3 = this.ite_3.next;
					while(true) {
						var x7 = this.ite_3.elt;
						if(x7.active) {
							break;
						}
						this.ite_3 = this.ite_3.next;
					}
				}
				ret = this.ite_3.elt.wrapper();
			} else {
				accum_length += this.lengths[3];
			}
		}
		return ret;
	}
	,__class__: zpp_$nape_dynamics_ZPP_$SpaceArbiterList
});
var zpp_$nape_geom_ZPP_$AABB = function() {
	this.wrap_max = null;
	this.maxy = 0.0;
	this.maxx = 0.0;
	this.wrap_min = null;
	this.miny = 0.0;
	this.minx = 0.0;
	this.next = null;
	this.outer = null;
	this._immutable = false;
	this._validate = null;
	this._invalidate = null;
};
zpp_$nape_geom_ZPP_$AABB.__name__ = true;
zpp_$nape_geom_ZPP_$AABB.prototype = {
	toString: function() {
		return "{ x: " + this.minx + " y: " + this.miny + " w: " + (this.maxx - this.minx) + " h: " + (this.maxy - this.miny) + " }";
	}
	,__class__: zpp_$nape_geom_ZPP_$AABB
};
var zpp_$nape_util_ZNPList_$ZPP_$Vec2 = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$Vec2.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$Vec2.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Vec2();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,insert: function(cur,o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Vec2();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool = o;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,clear: function() {
		while(this.head != null) {
			var ret = this.head;
			this.head = ret.next;
			var o = ret;
			o.elt = null;
			o.next = zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool = o;
			if(this.head == null) {
				this.pushmod = true;
			}
			this.modified = true;
			this.length--;
		}
		this.pushmod = true;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Vec2
};
var zpp_$nape_geom_ZPP_$Collide = function() { };
zpp_$nape_geom_ZPP_$Collide.__name__ = true;
zpp_$nape_geom_ZPP_$Collide.contactCollide = function(s1,s2,arb,rev) {
	if(s2.type == 1) {
		if(s1.type == 1) {
			var cont = true;
			var max = -1e+100;
			var maxmin = -1e+100;
			var maxi = -1;
			var axis1 = null;
			var axis2 = null;
			var cx_ite = s1.polygon.edges.head;
			while(cx_ite != null) {
				var ax = cx_ite.elt;
				var min = 1e100;
				var cx_ite1 = s2.polygon.gverts.next;
				while(cx_ite1 != null) {
					var v = cx_ite1;
					var k = ax.gnormx * v.x + ax.gnormy * v.y;
					if(k < min) {
						min = k;
					}
					if(min - ax.gprojection <= max) {
						break;
					}
					cx_ite1 = cx_ite1.next;
				}
				min -= ax.gprojection;
				if(min >= 0) {
					cont = false;
					break;
				}
				if(min > max) {
					max = min;
					axis1 = ax;
					maxi = 1;
				}
				cx_ite = cx_ite.next;
			}
			if(cont) {
				var cx_ite2 = s2.polygon.edges.head;
				while(cx_ite2 != null) {
					var ax1 = cx_ite2.elt;
					var min1 = 1e100;
					var cx_ite3 = s1.polygon.gverts.next;
					while(cx_ite3 != null) {
						var v1 = cx_ite3;
						var k1 = ax1.gnormx * v1.x + ax1.gnormy * v1.y;
						if(k1 < min1) {
							min1 = k1;
						}
						if(min1 - ax1.gprojection <= max) {
							break;
						}
						cx_ite3 = cx_ite3.next;
					}
					min1 -= ax1.gprojection;
					if(min1 >= 0) {
						cont = false;
						break;
					}
					if(min1 > max) {
						max = min1;
						axis2 = ax1;
						maxi = 2;
					}
					cx_ite2 = cx_ite2.next;
				}
				if(!cont) {
					return false;
				} else {
					var q1;
					var q2;
					var ax2;
					var scale;
					if(maxi == 1) {
						q1 = s1.polygon;
						q2 = s2.polygon;
						ax2 = axis1;
						scale = 1.0;
					} else {
						q1 = s2.polygon;
						q2 = s1.polygon;
						ax2 = axis2;
						scale = -1.0;
					}
					var ay = null;
					var min2 = 1e100;
					var cx_ite4 = q2.edges.head;
					while(cx_ite4 != null) {
						var axis = cx_ite4.elt;
						var k2 = ax2.gnormx * axis.gnormx + ax2.gnormy * axis.gnormy;
						if(k2 < min2) {
							min2 = k2;
							ay = axis;
						}
						cx_ite4 = cx_ite4.next;
					}
					var c0x = 0.0;
					var c0y = 0.0;
					c0x = ay.gp0.x;
					c0y = ay.gp0.y;
					var c1x = 0.0;
					var c1y = 0.0;
					c1x = ay.gp1.x;
					c1y = ay.gp1.y;
					var dvx = 0.0;
					var dvy = 0.0;
					dvx = c1x - c0x;
					dvy = c1y - c0y;
					var d0 = ax2.gnormy * c0x - ax2.gnormx * c0y;
					var d1 = ax2.gnormy * c1x - ax2.gnormx * c1y;
					var den = 1 / (d1 - d0);
					var t = (-ax2.tp1 - d0) * den;
					if(t > nape_Config.epsilon) {
						var t1 = t;
						c0x += dvx * t1;
						c0y += dvy * t1;
					}
					var t2 = (-ax2.tp0 - d1) * den;
					if(t2 < -nape_Config.epsilon) {
						var t3 = t2;
						c1x += dvx * t3;
						c1y += dvy * t3;
					}
					var nx = 0.0;
					var ny = 0.0;
					var t4 = scale;
					nx = ax2.gnormx * t4;
					ny = ax2.gnormy * t4;
					arb.lnormx = ax2.lnormx;
					arb.lnormy = ax2.lnormy;
					arb.lproj = ax2.lprojection;
					arb.radius = 0;
					arb.rev = rev != (scale == -1);
					arb.ptype = arb.rev ? 1 : 0;
					var c0d = c0x * ax2.gnormx + c0y * ax2.gnormy - ax2.gprojection;
					var c1d = c1x * ax2.gnormx + c1y * ax2.gnormy - ax2.gprojection;
					if(c0d > 0 && c1d > 0) {
						return false;
					} else {
						if(rev) {
							nx = -nx;
							ny = -ny;
						}
						var px = c0x - ax2.gnormx * c0d * 0.5;
						var py = c0y - ax2.gnormy * c0d * 0.5;
						var hash = arb.rev ? 1 : 0;
						var c = null;
						var cx_ite5 = arb.contacts.next;
						while(cx_ite5 != null) {
							var cur = cx_ite5;
							if(hash == cur.hash) {
								c = cur;
								break;
							}
							cx_ite5 = cx_ite5.next;
						}
						if(c == null) {
							if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) {
								c = new zpp_$nape_dynamics_ZPP_$Contact();
							} else {
								c = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
								zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c.next;
								c.next = null;
							}
							var ci = c.inner;
							ci.jnAcc = ci.jtAcc = 0;
							c.hash = hash;
							c.fresh = true;
							c.arbiter = arb;
							arb.jrAcc = 0;
							var _this = arb.contacts;
							c._inuse = true;
							var temp = c;
							temp.next = _this.next;
							_this.next = temp;
							_this.modified = true;
							_this.length++;
							arb.innards.add(ci);
						} else {
							c.fresh = false;
						}
						c.px = px;
						c.py = py;
						arb.nx = nx;
						arb.ny = ny;
						c.dist = c0d;
						c.stamp = arb.stamp;
						c.posOnly = c0d > 0;
						var con = c;
						var t5 = 1.0;
						c0x -= q2.body.posx * t5;
						c0y -= q2.body.posy * t5;
						con.inner.lr1x = c0x * q2.body.axisy + c0y * q2.body.axisx;
						con.inner.lr1y = c0y * q2.body.axisy - c0x * q2.body.axisx;
						var px1 = c1x - ax2.gnormx * c1d * 0.5;
						var py1 = c1y - ax2.gnormy * c1d * 0.5;
						var hash1 = arb.rev ? 0 : 1;
						var c1 = null;
						var cx_ite6 = arb.contacts.next;
						while(cx_ite6 != null) {
							var cur1 = cx_ite6;
							if(hash1 == cur1.hash) {
								c1 = cur1;
								break;
							}
							cx_ite6 = cx_ite6.next;
						}
						if(c1 == null) {
							if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) {
								c1 = new zpp_$nape_dynamics_ZPP_$Contact();
							} else {
								c1 = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
								zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c1.next;
								c1.next = null;
							}
							var ci1 = c1.inner;
							ci1.jnAcc = ci1.jtAcc = 0;
							c1.hash = hash1;
							c1.fresh = true;
							c1.arbiter = arb;
							arb.jrAcc = 0;
							var _this1 = arb.contacts;
							c1._inuse = true;
							var temp1 = c1;
							temp1.next = _this1.next;
							_this1.next = temp1;
							_this1.modified = true;
							_this1.length++;
							arb.innards.add(ci1);
						} else {
							c1.fresh = false;
						}
						c1.px = px1;
						c1.py = py1;
						arb.nx = nx;
						arb.ny = ny;
						c1.dist = c1d;
						c1.stamp = arb.stamp;
						c1.posOnly = c1d > 0;
						con = c1;
						var t6 = 1.0;
						c1x -= q2.body.posx * t6;
						c1y -= q2.body.posy * t6;
						con.inner.lr1x = c1x * q2.body.axisy + c1y * q2.body.axisx;
						con.inner.lr1y = c1y * q2.body.axisy - c1x * q2.body.axisx;
						if(maxi == 1) {
							arb.__ref_edge1 = ax2;
							arb.__ref_edge2 = ay;
						} else {
							arb.__ref_edge2 = ax2;
							arb.__ref_edge1 = ay;
						}
						return true;
					}
				}
			} else {
				return false;
			}
		} else {
			var max1 = -1e+100;
			var minmax = -1e+100;
			var cont1 = true;
			var a0 = null;
			var vi = null;
			var vite = s2.polygon.gverts.next;
			var cx_ite7 = s2.polygon.edges.head;
			while(cx_ite7 != null) {
				var a = cx_ite7.elt;
				var dist = a.gnormx * s1.circle.worldCOMx + a.gnormy * s1.circle.worldCOMy - a.gprojection - s1.circle.radius;
				if(dist > 0) {
					cont1 = false;
					break;
				}
				if(dist > max1) {
					max1 = dist;
					a0 = a;
					vi = vite;
				}
				vite = vite.next;
				cx_ite7 = cx_ite7.next;
			}
			if(cont1) {
				var v0 = vi;
				var v11 = vi.next == null ? s2.polygon.gverts.next : vi.next;
				var dt = s1.circle.worldCOMy * a0.gnormx - s1.circle.worldCOMx * a0.gnormy;
				if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
					var minDist = s1.circle.radius;
					var px2 = 0.0;
					var py2 = 0.0;
					px2 = v0.x - s1.circle.worldCOMx;
					py2 = v0.y - s1.circle.worldCOMy;
					var distSqr = px2 * px2 + py2 * py2;
					var co;
					if(distSqr > minDist * minDist) {
						co = null;
					} else if(distSqr < nape_Config.epsilon * nape_Config.epsilon) {
						var px3 = s1.circle.worldCOMx;
						var py3 = s1.circle.worldCOMy;
						var c2 = null;
						var cx_ite8 = arb.contacts.next;
						while(cx_ite8 != null) {
							var cur2 = cx_ite8;
							if(0 == cur2.hash) {
								c2 = cur2;
								break;
							}
							cx_ite8 = cx_ite8.next;
						}
						if(c2 == null) {
							if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) {
								c2 = new zpp_$nape_dynamics_ZPP_$Contact();
							} else {
								c2 = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
								zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c2.next;
								c2.next = null;
							}
							var ci2 = c2.inner;
							ci2.jnAcc = ci2.jtAcc = 0;
							c2.hash = 0;
							c2.fresh = true;
							c2.arbiter = arb;
							arb.jrAcc = 0;
							var _this2 = arb.contacts;
							c2._inuse = true;
							var temp2 = c2;
							temp2.next = _this2.next;
							_this2.next = temp2;
							_this2.modified = true;
							_this2.length++;
							arb.innards.add(ci2);
						} else {
							c2.fresh = false;
						}
						c2.px = px3;
						c2.py = py3;
						arb.nx = 1;
						arb.ny = 0;
						c2.dist = -minDist;
						c2.stamp = arb.stamp;
						c2.posOnly = false;
						co = c2;
					} else {
						var invDist = 1.0 / Math.sqrt(distSqr);
						var dist1 = invDist < nape_Config.epsilon ? 1e100 : 1.0 / invDist;
						var df = 0.5 + (s1.circle.radius - 0.5 * minDist) * invDist;
						if(rev) {
							var px4 = s1.circle.worldCOMx + px2 * df;
							var py4 = s1.circle.worldCOMy + py2 * df;
							var c3 = null;
							var cx_ite9 = arb.contacts.next;
							while(cx_ite9 != null) {
								var cur3 = cx_ite9;
								if(0 == cur3.hash) {
									c3 = cur3;
									break;
								}
								cx_ite9 = cx_ite9.next;
							}
							if(c3 == null) {
								if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) {
									c3 = new zpp_$nape_dynamics_ZPP_$Contact();
								} else {
									c3 = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
									zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c3.next;
									c3.next = null;
								}
								var ci3 = c3.inner;
								ci3.jnAcc = ci3.jtAcc = 0;
								c3.hash = 0;
								c3.fresh = true;
								c3.arbiter = arb;
								arb.jrAcc = 0;
								var _this3 = arb.contacts;
								c3._inuse = true;
								var temp3 = c3;
								temp3.next = _this3.next;
								_this3.next = temp3;
								_this3.modified = true;
								_this3.length++;
								arb.innards.add(ci3);
							} else {
								c3.fresh = false;
							}
							c3.px = px4;
							c3.py = py4;
							arb.nx = -px2 * invDist;
							arb.ny = -py2 * invDist;
							c3.dist = dist1 - minDist;
							c3.stamp = arb.stamp;
							c3.posOnly = false;
							co = c3;
						} else {
							var px5 = s1.circle.worldCOMx + px2 * df;
							var py5 = s1.circle.worldCOMy + py2 * df;
							var c4 = null;
							var cx_ite10 = arb.contacts.next;
							while(cx_ite10 != null) {
								var cur4 = cx_ite10;
								if(0 == cur4.hash) {
									c4 = cur4;
									break;
								}
								cx_ite10 = cx_ite10.next;
							}
							if(c4 == null) {
								if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) {
									c4 = new zpp_$nape_dynamics_ZPP_$Contact();
								} else {
									c4 = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
									zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c4.next;
									c4.next = null;
								}
								var ci4 = c4.inner;
								ci4.jnAcc = ci4.jtAcc = 0;
								c4.hash = 0;
								c4.fresh = true;
								c4.arbiter = arb;
								arb.jrAcc = 0;
								var _this4 = arb.contacts;
								c4._inuse = true;
								var temp4 = c4;
								temp4.next = _this4.next;
								_this4.next = temp4;
								_this4.modified = true;
								_this4.length++;
								arb.innards.add(ci4);
							} else {
								c4.fresh = false;
							}
							c4.px = px5;
							c4.py = py5;
							arb.nx = px2 * invDist;
							arb.ny = py2 * invDist;
							c4.dist = dist1 - minDist;
							c4.stamp = arb.stamp;
							c4.posOnly = false;
							co = c4;
						}
					}
					if(co != null) {
						var con1 = co.inner;
						arb.ptype = 2;
						var vx = 0.0;
						var vy = 0.0;
						vx = v0.x - s2.polygon.body.posx;
						vy = v0.y - s2.polygon.body.posy;
						arb.__ref_edge1 = a0;
						arb.__ref_vertex = -1;
						if(rev) {
							con1.lr1x = vx * s2.polygon.body.axisy + vy * s2.polygon.body.axisx;
							con1.lr1y = vy * s2.polygon.body.axisy - vx * s2.polygon.body.axisx;
							con1.lr2x = s1.circle.localCOMx;
							con1.lr2y = s1.circle.localCOMy;
						} else {
							con1.lr2x = vx * s2.polygon.body.axisy + vy * s2.polygon.body.axisx;
							con1.lr2y = vy * s2.polygon.body.axisy - vx * s2.polygon.body.axisx;
							con1.lr1x = s1.circle.localCOMx;
							con1.lr1y = s1.circle.localCOMy;
						}
						arb.radius = s1.circle.radius;
					}
					return co != null;
				} else if(dt >= v11.y * a0.gnormx - v11.x * a0.gnormy) {
					var minDist1 = s1.circle.radius;
					var px6 = 0.0;
					var py6 = 0.0;
					px6 = v11.x - s1.circle.worldCOMx;
					py6 = v11.y - s1.circle.worldCOMy;
					var distSqr1 = px6 * px6 + py6 * py6;
					var co1;
					if(distSqr1 > minDist1 * minDist1) {
						co1 = null;
					} else if(distSqr1 < nape_Config.epsilon * nape_Config.epsilon) {
						var px7 = s1.circle.worldCOMx;
						var py7 = s1.circle.worldCOMy;
						var c5 = null;
						var cx_ite11 = arb.contacts.next;
						while(cx_ite11 != null) {
							var cur5 = cx_ite11;
							if(0 == cur5.hash) {
								c5 = cur5;
								break;
							}
							cx_ite11 = cx_ite11.next;
						}
						if(c5 == null) {
							if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) {
								c5 = new zpp_$nape_dynamics_ZPP_$Contact();
							} else {
								c5 = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
								zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c5.next;
								c5.next = null;
							}
							var ci5 = c5.inner;
							ci5.jnAcc = ci5.jtAcc = 0;
							c5.hash = 0;
							c5.fresh = true;
							c5.arbiter = arb;
							arb.jrAcc = 0;
							var _this5 = arb.contacts;
							c5._inuse = true;
							var temp5 = c5;
							temp5.next = _this5.next;
							_this5.next = temp5;
							_this5.modified = true;
							_this5.length++;
							arb.innards.add(ci5);
						} else {
							c5.fresh = false;
						}
						c5.px = px7;
						c5.py = py7;
						arb.nx = 1;
						arb.ny = 0;
						c5.dist = -minDist1;
						c5.stamp = arb.stamp;
						c5.posOnly = false;
						co1 = c5;
					} else {
						var invDist1 = 1.0 / Math.sqrt(distSqr1);
						var dist2 = invDist1 < nape_Config.epsilon ? 1e100 : 1.0 / invDist1;
						var df1 = 0.5 + (s1.circle.radius - 0.5 * minDist1) * invDist1;
						if(rev) {
							var px8 = s1.circle.worldCOMx + px6 * df1;
							var py8 = s1.circle.worldCOMy + py6 * df1;
							var c6 = null;
							var cx_ite12 = arb.contacts.next;
							while(cx_ite12 != null) {
								var cur6 = cx_ite12;
								if(0 == cur6.hash) {
									c6 = cur6;
									break;
								}
								cx_ite12 = cx_ite12.next;
							}
							if(c6 == null) {
								if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) {
									c6 = new zpp_$nape_dynamics_ZPP_$Contact();
								} else {
									c6 = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
									zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c6.next;
									c6.next = null;
								}
								var ci6 = c6.inner;
								ci6.jnAcc = ci6.jtAcc = 0;
								c6.hash = 0;
								c6.fresh = true;
								c6.arbiter = arb;
								arb.jrAcc = 0;
								var _this6 = arb.contacts;
								c6._inuse = true;
								var temp6 = c6;
								temp6.next = _this6.next;
								_this6.next = temp6;
								_this6.modified = true;
								_this6.length++;
								arb.innards.add(ci6);
							} else {
								c6.fresh = false;
							}
							c6.px = px8;
							c6.py = py8;
							arb.nx = -px6 * invDist1;
							arb.ny = -py6 * invDist1;
							c6.dist = dist2 - minDist1;
							c6.stamp = arb.stamp;
							c6.posOnly = false;
							co1 = c6;
						} else {
							var px9 = s1.circle.worldCOMx + px6 * df1;
							var py9 = s1.circle.worldCOMy + py6 * df1;
							var c7 = null;
							var cx_ite13 = arb.contacts.next;
							while(cx_ite13 != null) {
								var cur7 = cx_ite13;
								if(0 == cur7.hash) {
									c7 = cur7;
									break;
								}
								cx_ite13 = cx_ite13.next;
							}
							if(c7 == null) {
								if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) {
									c7 = new zpp_$nape_dynamics_ZPP_$Contact();
								} else {
									c7 = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
									zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c7.next;
									c7.next = null;
								}
								var ci7 = c7.inner;
								ci7.jnAcc = ci7.jtAcc = 0;
								c7.hash = 0;
								c7.fresh = true;
								c7.arbiter = arb;
								arb.jrAcc = 0;
								var _this7 = arb.contacts;
								c7._inuse = true;
								var temp7 = c7;
								temp7.next = _this7.next;
								_this7.next = temp7;
								_this7.modified = true;
								_this7.length++;
								arb.innards.add(ci7);
							} else {
								c7.fresh = false;
							}
							c7.px = px9;
							c7.py = py9;
							arb.nx = px6 * invDist1;
							arb.ny = py6 * invDist1;
							c7.dist = dist2 - minDist1;
							c7.stamp = arb.stamp;
							c7.posOnly = false;
							co1 = c7;
						}
					}
					if(co1 != null) {
						var con2 = co1.inner;
						arb.ptype = 2;
						var vx1 = 0.0;
						var vy1 = 0.0;
						vx1 = v11.x - s2.polygon.body.posx;
						vy1 = v11.y - s2.polygon.body.posy;
						arb.__ref_edge1 = a0;
						arb.__ref_vertex = 1;
						if(rev) {
							con2.lr1x = vx1 * s2.polygon.body.axisy + vy1 * s2.polygon.body.axisx;
							con2.lr1y = vy1 * s2.polygon.body.axisy - vx1 * s2.polygon.body.axisx;
							con2.lr2x = s1.circle.localCOMx;
							con2.lr2y = s1.circle.localCOMy;
						} else {
							con2.lr2x = vx1 * s2.polygon.body.axisy + vy1 * s2.polygon.body.axisx;
							con2.lr2y = vy1 * s2.polygon.body.axisy - vx1 * s2.polygon.body.axisx;
							con2.lr1x = s1.circle.localCOMx;
							con2.lr1y = s1.circle.localCOMy;
						}
						arb.radius = s1.circle.radius;
					}
					return co1 != null;
				} else {
					var nx1 = 0.0;
					var ny1 = 0.0;
					var t7 = s1.circle.radius + max1 * 0.5;
					nx1 = a0.gnormx * t7;
					ny1 = a0.gnormy * t7;
					var px10 = 0.0;
					var py10 = 0.0;
					px10 = s1.circle.worldCOMx - nx1;
					py10 = s1.circle.worldCOMy - ny1;
					var con3;
					if(rev) {
						var nx2 = a0.gnormx;
						var ny2 = a0.gnormy;
						var c8 = null;
						var cx_ite14 = arb.contacts.next;
						while(cx_ite14 != null) {
							var cur8 = cx_ite14;
							if(0 == cur8.hash) {
								c8 = cur8;
								break;
							}
							cx_ite14 = cx_ite14.next;
						}
						if(c8 == null) {
							if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) {
								c8 = new zpp_$nape_dynamics_ZPP_$Contact();
							} else {
								c8 = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
								zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c8.next;
								c8.next = null;
							}
							var ci8 = c8.inner;
							ci8.jnAcc = ci8.jtAcc = 0;
							c8.hash = 0;
							c8.fresh = true;
							c8.arbiter = arb;
							arb.jrAcc = 0;
							var _this8 = arb.contacts;
							c8._inuse = true;
							var temp8 = c8;
							temp8.next = _this8.next;
							_this8.next = temp8;
							_this8.modified = true;
							_this8.length++;
							arb.innards.add(ci8);
						} else {
							c8.fresh = false;
						}
						c8.px = px10;
						c8.py = py10;
						arb.nx = nx2;
						arb.ny = ny2;
						c8.dist = max1;
						c8.stamp = arb.stamp;
						c8.posOnly = false;
						con3 = c8;
					} else {
						var nx3 = -a0.gnormx;
						var ny3 = -a0.gnormy;
						var c9 = null;
						var cx_ite15 = arb.contacts.next;
						while(cx_ite15 != null) {
							var cur9 = cx_ite15;
							if(0 == cur9.hash) {
								c9 = cur9;
								break;
							}
							cx_ite15 = cx_ite15.next;
						}
						if(c9 == null) {
							if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) {
								c9 = new zpp_$nape_dynamics_ZPP_$Contact();
							} else {
								c9 = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
								zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c9.next;
								c9.next = null;
							}
							var ci9 = c9.inner;
							ci9.jnAcc = ci9.jtAcc = 0;
							c9.hash = 0;
							c9.fresh = true;
							c9.arbiter = arb;
							arb.jrAcc = 0;
							var _this9 = arb.contacts;
							c9._inuse = true;
							var temp9 = c9;
							temp9.next = _this9.next;
							_this9.next = temp9;
							_this9.modified = true;
							_this9.length++;
							arb.innards.add(ci9);
						} else {
							c9.fresh = false;
						}
						c9.px = px10;
						c9.py = py10;
						arb.nx = nx3;
						arb.ny = ny3;
						c9.dist = max1;
						c9.stamp = arb.stamp;
						c9.posOnly = false;
						con3 = c9;
					}
					arb.ptype = rev ? 0 : 1;
					arb.lnormx = a0.lnormx;
					arb.lnormy = a0.lnormy;
					arb.rev = !rev;
					arb.lproj = a0.lprojection;
					arb.radius = s1.circle.radius;
					con3.inner.lr1x = s1.circle.localCOMx;
					con3.inner.lr1y = s1.circle.localCOMy;
					arb.__ref_edge1 = a0;
					arb.__ref_vertex = 0;
					return true;
				}
			} else {
				return false;
			}
		}
	} else {
		var minDist2 = s1.circle.radius + s2.circle.radius;
		var px11 = 0.0;
		var py11 = 0.0;
		px11 = s2.circle.worldCOMx - s1.circle.worldCOMx;
		py11 = s2.circle.worldCOMy - s1.circle.worldCOMy;
		var distSqr2 = px11 * px11 + py11 * py11;
		var co2;
		if(distSqr2 > minDist2 * minDist2) {
			co2 = null;
		} else if(distSqr2 < nape_Config.epsilon * nape_Config.epsilon) {
			var px12 = s1.circle.worldCOMx;
			var py12 = s1.circle.worldCOMy;
			var c10 = null;
			var cx_ite16 = arb.contacts.next;
			while(cx_ite16 != null) {
				var cur10 = cx_ite16;
				if(0 == cur10.hash) {
					c10 = cur10;
					break;
				}
				cx_ite16 = cx_ite16.next;
			}
			if(c10 == null) {
				if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) {
					c10 = new zpp_$nape_dynamics_ZPP_$Contact();
				} else {
					c10 = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
					zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c10.next;
					c10.next = null;
				}
				var ci10 = c10.inner;
				ci10.jnAcc = ci10.jtAcc = 0;
				c10.hash = 0;
				c10.fresh = true;
				c10.arbiter = arb;
				arb.jrAcc = 0;
				var _this10 = arb.contacts;
				c10._inuse = true;
				var temp10 = c10;
				temp10.next = _this10.next;
				_this10.next = temp10;
				_this10.modified = true;
				_this10.length++;
				arb.innards.add(ci10);
			} else {
				c10.fresh = false;
			}
			c10.px = px12;
			c10.py = py12;
			arb.nx = 1;
			arb.ny = 0;
			c10.dist = -minDist2;
			c10.stamp = arb.stamp;
			c10.posOnly = false;
			co2 = c10;
		} else {
			var invDist2 = 1.0 / Math.sqrt(distSqr2);
			var dist3 = invDist2 < nape_Config.epsilon ? 1e100 : 1.0 / invDist2;
			var df2 = 0.5 + (s1.circle.radius - 0.5 * minDist2) * invDist2;
			if(rev) {
				var px13 = s1.circle.worldCOMx + px11 * df2;
				var py13 = s1.circle.worldCOMy + py11 * df2;
				var c11 = null;
				var cx_ite17 = arb.contacts.next;
				while(cx_ite17 != null) {
					var cur11 = cx_ite17;
					if(0 == cur11.hash) {
						c11 = cur11;
						break;
					}
					cx_ite17 = cx_ite17.next;
				}
				if(c11 == null) {
					if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) {
						c11 = new zpp_$nape_dynamics_ZPP_$Contact();
					} else {
						c11 = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
						zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c11.next;
						c11.next = null;
					}
					var ci11 = c11.inner;
					ci11.jnAcc = ci11.jtAcc = 0;
					c11.hash = 0;
					c11.fresh = true;
					c11.arbiter = arb;
					arb.jrAcc = 0;
					var _this11 = arb.contacts;
					c11._inuse = true;
					var temp11 = c11;
					temp11.next = _this11.next;
					_this11.next = temp11;
					_this11.modified = true;
					_this11.length++;
					arb.innards.add(ci11);
				} else {
					c11.fresh = false;
				}
				c11.px = px13;
				c11.py = py13;
				arb.nx = -px11 * invDist2;
				arb.ny = -py11 * invDist2;
				c11.dist = dist3 - minDist2;
				c11.stamp = arb.stamp;
				c11.posOnly = false;
				co2 = c11;
			} else {
				var px14 = s1.circle.worldCOMx + px11 * df2;
				var py14 = s1.circle.worldCOMy + py11 * df2;
				var c12 = null;
				var cx_ite18 = arb.contacts.next;
				while(cx_ite18 != null) {
					var cur12 = cx_ite18;
					if(0 == cur12.hash) {
						c12 = cur12;
						break;
					}
					cx_ite18 = cx_ite18.next;
				}
				if(c12 == null) {
					if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) {
						c12 = new zpp_$nape_dynamics_ZPP_$Contact();
					} else {
						c12 = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
						zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c12.next;
						c12.next = null;
					}
					var ci12 = c12.inner;
					ci12.jnAcc = ci12.jtAcc = 0;
					c12.hash = 0;
					c12.fresh = true;
					c12.arbiter = arb;
					arb.jrAcc = 0;
					var _this12 = arb.contacts;
					c12._inuse = true;
					var temp12 = c12;
					temp12.next = _this12.next;
					_this12.next = temp12;
					_this12.modified = true;
					_this12.length++;
					arb.innards.add(ci12);
				} else {
					c12.fresh = false;
				}
				c12.px = px14;
				c12.py = py14;
				arb.nx = px11 * invDist2;
				arb.ny = py11 * invDist2;
				c12.dist = dist3 - minDist2;
				c12.stamp = arb.stamp;
				c12.posOnly = false;
				co2 = c12;
			}
		}
		if(co2 != null) {
			var con4 = co2.inner;
			if(rev) {
				con4.lr1x = s2.circle.localCOMx;
				con4.lr1y = s2.circle.localCOMy;
				con4.lr2x = s1.circle.localCOMx;
				con4.lr2y = s1.circle.localCOMy;
			} else {
				con4.lr1x = s1.circle.localCOMx;
				con4.lr1y = s1.circle.localCOMy;
				con4.lr2x = s2.circle.localCOMx;
				con4.lr2y = s2.circle.localCOMy;
			}
			arb.radius = s1.circle.radius + s2.circle.radius;
			arb.ptype = 2;
			return true;
		} else {
			return false;
		}
	}
};
zpp_$nape_geom_ZPP_$Collide.testCollide_safe = function(s1,s2) {
	if(s2.type == 0) {
		var t = s1;
		s1 = s2;
		s2 = t;
	}
	return zpp_$nape_geom_ZPP_$Collide.testCollide(s1,s2);
};
zpp_$nape_geom_ZPP_$Collide.testCollide = function(s1,s2) {
	if(s2.type == 1) {
		if(s1.type == 1) {
			var cont = true;
			var cx_ite = s1.polygon.edges.head;
			while(cx_ite != null) {
				var ax = cx_ite.elt;
				var min = 1e100;
				var cx_ite1 = s2.polygon.gverts.next;
				while(cx_ite1 != null) {
					var v = cx_ite1;
					var k = ax.gnormx * v.x + ax.gnormy * v.y;
					if(k < min) {
						min = k;
					}
					cx_ite1 = cx_ite1.next;
				}
				min -= ax.gprojection;
				if(min > 0) {
					cont = false;
					break;
				}
				cx_ite = cx_ite.next;
			}
			if(cont) {
				var cx_ite2 = s2.polygon.edges.head;
				while(cx_ite2 != null) {
					var ax1 = cx_ite2.elt;
					var min1 = 1e100;
					var cx_ite3 = s1.polygon.gverts.next;
					while(cx_ite3 != null) {
						var v1 = cx_ite3;
						var k1 = ax1.gnormx * v1.x + ax1.gnormy * v1.y;
						if(k1 < min1) {
							min1 = k1;
						}
						cx_ite3 = cx_ite3.next;
					}
					min1 -= ax1.gprojection;
					if(min1 > 0) {
						cont = false;
						break;
					}
					cx_ite2 = cx_ite2.next;
				}
				return cont;
			} else {
				return false;
			}
		} else {
			var a0 = null;
			var vi = null;
			var cont1 = true;
			var max = -1e+100;
			var vite = s2.polygon.gverts.next;
			var cx_ite4 = s2.polygon.edges.head;
			while(cx_ite4 != null) {
				var a = cx_ite4.elt;
				var dist = a.gnormx * s1.circle.worldCOMx + a.gnormy * s1.circle.worldCOMy - a.gprojection - s1.circle.radius;
				if(dist > 0) {
					cont1 = false;
					break;
				}
				if(dist > max) {
					max = dist;
					a0 = a;
					vi = vite;
				}
				vite = vite.next;
				cx_ite4 = cx_ite4.next;
			}
			if(cont1) {
				var v0 = vi;
				var v11 = vi.next == null ? s2.polygon.gverts.next : vi.next;
				var dt = s1.circle.worldCOMy * a0.gnormx - s1.circle.worldCOMx * a0.gnormy;
				if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
					var minDist = s1.circle.radius;
					var px = 0.0;
					var py = 0.0;
					px = v0.x - s1.circle.worldCOMx;
					py = v0.y - s1.circle.worldCOMy;
					var distSqr = px * px + py * py;
					return distSqr <= minDist * minDist;
				} else if(dt >= v11.y * a0.gnormx - v11.x * a0.gnormy) {
					var minDist1 = s1.circle.radius;
					var px1 = 0.0;
					var py1 = 0.0;
					px1 = v11.x - s1.circle.worldCOMx;
					py1 = v11.y - s1.circle.worldCOMy;
					var distSqr1 = px1 * px1 + py1 * py1;
					return distSqr1 <= minDist1 * minDist1;
				} else {
					return true;
				}
			} else {
				return false;
			}
		}
	} else {
		var minDist2 = s1.circle.radius + s2.circle.radius;
		var px2 = 0.0;
		var py2 = 0.0;
		px2 = s2.circle.worldCOMx - s1.circle.worldCOMx;
		py2 = s2.circle.worldCOMy - s1.circle.worldCOMy;
		var distSqr2 = px2 * px2 + py2 * py2;
		return distSqr2 <= minDist2 * minDist2;
	}
};
zpp_$nape_geom_ZPP_$Collide.flowCollide = function(s1,s2,arb) {
	if(s2.type == 1) {
		if(s1.type == 1) {
			var out1 = [];
			var out2 = [];
			var cont = true;
			var total = true;
			var cx_ite = s1.polygon.edges.head;
			while(cx_ite != null) {
				var ax = cx_ite.elt;
				var min = 1e100;
				var ind = 0;
				var cx_ite1 = s2.polygon.gverts.next;
				while(cx_ite1 != null) {
					var v = cx_ite1;
					var k = ax.gnormx * v.x + ax.gnormy * v.y;
					if(k < min) {
						min = k;
					}
					if(k >= ax.gprojection + nape_Config.epsilon) {
						out2[ind] = true;
						total = false;
					}
					++ind;
					cx_ite1 = cx_ite1.next;
				}
				min -= ax.gprojection;
				if(min > 0) {
					cont = false;
					break;
				}
				cx_ite = cx_ite.next;
			}
			if(total) {
				var _this = s2.polygon;
				if(_this.zip_worldCOM) {
					if(_this.body != null) {
						_this.zip_worldCOM = false;
						if(_this.zip_localCOM) {
							_this.zip_localCOM = false;
							if(_this.type == 1) {
								var _this1 = _this.polygon;
								if(_this1.lverts.next == null) {
									throw new js__$Boot_HaxeError("Error: An empty polygon has no meaningful localCOM");
								}
								if(_this1.lverts.next.next == null) {
									_this1.localCOMx = _this1.lverts.next.x;
									_this1.localCOMy = _this1.lverts.next.y;
								} else if(_this1.lverts.next.next.next == null) {
									_this1.localCOMx = _this1.lverts.next.x;
									_this1.localCOMy = _this1.lverts.next.y;
									var t = 1.0;
									_this1.localCOMx += _this1.lverts.next.next.x * t;
									_this1.localCOMy += _this1.lverts.next.next.y * t;
									var t1 = 0.5;
									_this1.localCOMx *= t1;
									_this1.localCOMy *= t1;
								} else {
									_this1.localCOMx = 0;
									_this1.localCOMy = 0;
									var area = 0.0;
									var cx_ite2 = _this1.lverts.next;
									var u = cx_ite2;
									cx_ite2 = cx_ite2.next;
									var v1 = cx_ite2;
									cx_ite2 = cx_ite2.next;
									while(cx_ite2 != null) {
										var w = cx_ite2;
										area += v1.x * (w.y - u.y);
										var cf = w.y * v1.x - w.x * v1.y;
										_this1.localCOMx += (v1.x + w.x) * cf;
										_this1.localCOMy += (v1.y + w.y) * cf;
										u = v1;
										v1 = w;
										cx_ite2 = cx_ite2.next;
									}
									cx_ite2 = _this1.lverts.next;
									var w1 = cx_ite2;
									area += v1.x * (w1.y - u.y);
									var cf1 = w1.y * v1.x - w1.x * v1.y;
									_this1.localCOMx += (v1.x + w1.x) * cf1;
									_this1.localCOMy += (v1.y + w1.y) * cf1;
									u = v1;
									v1 = w1;
									cx_ite2 = cx_ite2.next;
									var w2 = cx_ite2;
									area += v1.x * (w2.y - u.y);
									var cf2 = w2.y * v1.x - w2.x * v1.y;
									_this1.localCOMx += (v1.x + w2.x) * cf2;
									_this1.localCOMy += (v1.y + w2.y) * cf2;
									area = 1 / (3 * area);
									var t2 = area;
									_this1.localCOMx *= t2;
									_this1.localCOMy *= t2;
								}
							}
							if(_this.wrap_localCOM != null) {
								_this.wrap_localCOM.zpp_inner.x = _this.localCOMx;
								_this.wrap_localCOM.zpp_inner.y = _this.localCOMy;
							}
						}
						var _this2 = _this.body;
						if(_this2.zip_axis) {
							_this2.zip_axis = false;
							_this2.axisx = Math.sin(_this2.rot);
							_this2.axisy = Math.cos(_this2.rot);
						}
						_this.worldCOMx = _this.body.posx + (_this.body.axisy * _this.localCOMx - _this.body.axisx * _this.localCOMy);
						_this.worldCOMy = _this.body.posy + (_this.localCOMx * _this.body.axisx + _this.localCOMy * _this.body.axisy);
					}
				}
				arb.overlap = s2.polygon.area;
				arb.centroidx = s2.polygon.worldCOMx;
				arb.centroidy = s2.polygon.worldCOMy;
				return true;
			} else if(cont) {
				total = true;
				var cx_ite3 = s2.polygon.edges.head;
				while(cx_ite3 != null) {
					var ax1 = cx_ite3.elt;
					var min1 = 1e100;
					var ind1 = 0;
					var cx_ite4 = s1.polygon.gverts.next;
					while(cx_ite4 != null) {
						var v2 = cx_ite4;
						var k1 = ax1.gnormx * v2.x + ax1.gnormy * v2.y;
						if(k1 < min1) {
							min1 = k1;
						}
						if(k1 >= ax1.gprojection + nape_Config.epsilon) {
							out1[ind1] = true;
							total = false;
						}
						++ind1;
						cx_ite4 = cx_ite4.next;
					}
					min1 -= ax1.gprojection;
					if(min1 > 0) {
						cont = false;
						break;
					}
					cx_ite3 = cx_ite3.next;
				}
				if(total) {
					var _this3 = s1.polygon;
					if(_this3.zip_worldCOM) {
						if(_this3.body != null) {
							_this3.zip_worldCOM = false;
							if(_this3.zip_localCOM) {
								_this3.zip_localCOM = false;
								if(_this3.type == 1) {
									var _this4 = _this3.polygon;
									if(_this4.lverts.next == null) {
										throw new js__$Boot_HaxeError("Error: An empty polygon has no meaningful localCOM");
									}
									if(_this4.lverts.next.next == null) {
										_this4.localCOMx = _this4.lverts.next.x;
										_this4.localCOMy = _this4.lverts.next.y;
									} else if(_this4.lverts.next.next.next == null) {
										_this4.localCOMx = _this4.lverts.next.x;
										_this4.localCOMy = _this4.lverts.next.y;
										var t3 = 1.0;
										_this4.localCOMx += _this4.lverts.next.next.x * t3;
										_this4.localCOMy += _this4.lverts.next.next.y * t3;
										var t4 = 0.5;
										_this4.localCOMx *= t4;
										_this4.localCOMy *= t4;
									} else {
										_this4.localCOMx = 0;
										_this4.localCOMy = 0;
										var area1 = 0.0;
										var cx_ite5 = _this4.lverts.next;
										var u1 = cx_ite5;
										cx_ite5 = cx_ite5.next;
										var v3 = cx_ite5;
										cx_ite5 = cx_ite5.next;
										while(cx_ite5 != null) {
											var w3 = cx_ite5;
											area1 += v3.x * (w3.y - u1.y);
											var cf3 = w3.y * v3.x - w3.x * v3.y;
											_this4.localCOMx += (v3.x + w3.x) * cf3;
											_this4.localCOMy += (v3.y + w3.y) * cf3;
											u1 = v3;
											v3 = w3;
											cx_ite5 = cx_ite5.next;
										}
										cx_ite5 = _this4.lverts.next;
										var w4 = cx_ite5;
										area1 += v3.x * (w4.y - u1.y);
										var cf4 = w4.y * v3.x - w4.x * v3.y;
										_this4.localCOMx += (v3.x + w4.x) * cf4;
										_this4.localCOMy += (v3.y + w4.y) * cf4;
										u1 = v3;
										v3 = w4;
										cx_ite5 = cx_ite5.next;
										var w5 = cx_ite5;
										area1 += v3.x * (w5.y - u1.y);
										var cf5 = w5.y * v3.x - w5.x * v3.y;
										_this4.localCOMx += (v3.x + w5.x) * cf5;
										_this4.localCOMy += (v3.y + w5.y) * cf5;
										area1 = 1 / (3 * area1);
										var t5 = area1;
										_this4.localCOMx *= t5;
										_this4.localCOMy *= t5;
									}
								}
								if(_this3.wrap_localCOM != null) {
									_this3.wrap_localCOM.zpp_inner.x = _this3.localCOMx;
									_this3.wrap_localCOM.zpp_inner.y = _this3.localCOMy;
								}
							}
							var _this5 = _this3.body;
							if(_this5.zip_axis) {
								_this5.zip_axis = false;
								_this5.axisx = Math.sin(_this5.rot);
								_this5.axisy = Math.cos(_this5.rot);
							}
							_this3.worldCOMx = _this3.body.posx + (_this3.body.axisy * _this3.localCOMx - _this3.body.axisx * _this3.localCOMy);
							_this3.worldCOMy = _this3.body.posy + (_this3.localCOMx * _this3.body.axisx + _this3.localCOMy * _this3.body.axisy);
						}
					}
					arb.overlap = s1.polygon.area;
					arb.centroidx = s1.polygon.worldCOMx;
					arb.centroidy = s1.polygon.worldCOMy;
					return true;
				} else if(cont) {
					while(zpp_$nape_geom_ZPP_$Collide.flowpoly.head != null) {
						var p = zpp_$nape_geom_ZPP_$Collide.flowpoly.pop_unsafe();
						if(!p._inuse) {
							var o = p;
							if(o.outer != null) {
								o.outer.zpp_inner = null;
								o.outer = null;
							}
							o._isimmutable = null;
							o._validate = null;
							o._invalidate = null;
							o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
							zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
						}
					}
					var fst_vert = null;
					var poly1 = false;
					var ite1 = s1.polygon.gverts.next;
					var ind11 = 0;
					var ite2 = s2.polygon.gverts.next;
					var ind2 = 0;
					var _g1 = 0;
					var _g = s2.polygon.edgeCnt;
					while(_g1 < _g) {
						var i = _g1++;
						if(!out2[i]) {
							ind2 = i;
							break;
						} else {
							ite2 = ite2.next;
						}
					}
					if(ite2 == null) {
						ite2 = s2.polygon.gverts.next;
						poly1 = true;
						var _g11 = 0;
						var _g2 = s1.polygon.edgeCnt;
						while(_g11 < _g2) {
							var i1 = _g11++;
							if(!out1[i1]) {
								ind11 = i1;
								break;
							} else {
								ite1 = ite1.next;
							}
						}
						if(ite1 == null) {
							ite1 = s1.polygon.gverts.next;
						} else {
							zpp_$nape_geom_ZPP_$Collide.flowpoly.add(ite1);
							fst_vert = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
						}
					} else {
						zpp_$nape_geom_ZPP_$Collide.flowpoly.add(ite2);
						fst_vert = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
					}
					var cnt = 1;
					if(zpp_$nape_geom_ZPP_$Collide.flowpoly.head == null) {
						var cx_cont = true;
						var cx_itei = s1.polygon.gverts.next;
						var u2 = cx_itei;
						var cx_itej = cx_itei.next;
						while(cx_itej != null) {
							var v4 = cx_itej;
							var min2 = 2.0;
							var cx_cont1 = true;
							var cx_itei1 = s2.polygon.gverts.next;
							var a = cx_itei1;
							var cx_itej1 = cx_itei1.next;
							while(cx_itej1 != null) {
								var b = cx_itej1;
								var t6 = 0.0;
								var _sx = 0.0;
								var _sy = 0.0;
								_sx = u2.x - a.x;
								_sy = u2.y - a.y;
								var _vx = 0.0;
								var _vy = 0.0;
								_vx = v4.x - u2.x;
								_vy = v4.y - u2.y;
								var _qx = 0.0;
								var _qy = 0.0;
								_qx = b.x - a.x;
								_qy = b.y - a.y;
								var den = _vy * _qx - _vx * _qy;
								var tmp;
								if(den * den > nape_Config.epsilon * nape_Config.epsilon) {
									den = 1 / den;
									var txx = (_qy * _sx - _qx * _sy) * den;
									if(txx > nape_Config.epsilon && txx < 1 - nape_Config.epsilon) {
										var sxx = (_vy * _sx - _vx * _sy) * den;
										if(sxx > nape_Config.epsilon && sxx < 1 - nape_Config.epsilon) {
											t6 = txx;
											tmp = true;
										} else {
											tmp = false;
										}
									} else {
										tmp = false;
									}
								} else {
									tmp = false;
								}
								if(tmp) {
									if(t6 < min2) {
										min2 = t6;
										ite2 = cx_itei1;
									}
								}
								cx_itei1 = cx_itej1;
								a = b;
								cx_itej1 = cx_itej1.next;
							}
							if(cx_cont1) {
								while(true) {
									cx_itej1 = s2.polygon.gverts.next;
									var b1 = cx_itej1;
									var t7 = 0.0;
									var _sx1 = 0.0;
									var _sy1 = 0.0;
									_sx1 = u2.x - a.x;
									_sy1 = u2.y - a.y;
									var _vx1 = 0.0;
									var _vy1 = 0.0;
									_vx1 = v4.x - u2.x;
									_vy1 = v4.y - u2.y;
									var _qx1 = 0.0;
									var _qy1 = 0.0;
									_qx1 = b1.x - a.x;
									_qy1 = b1.y - a.y;
									var den1 = _vy1 * _qx1 - _vx1 * _qy1;
									var tmp1;
									if(den1 * den1 > nape_Config.epsilon * nape_Config.epsilon) {
										den1 = 1 / den1;
										var txx1 = (_qy1 * _sx1 - _qx1 * _sy1) * den1;
										if(txx1 > nape_Config.epsilon && txx1 < 1 - nape_Config.epsilon) {
											var sxx1 = (_vy1 * _sx1 - _vx1 * _sy1) * den1;
											if(sxx1 > nape_Config.epsilon && sxx1 < 1 - nape_Config.epsilon) {
												t7 = txx1;
												tmp1 = true;
											} else {
												tmp1 = false;
											}
										} else {
											tmp1 = false;
										}
									} else {
										tmp1 = false;
									}
									if(tmp1) {
										if(t7 < min2) {
											min2 = t7;
											ite2 = cx_itei1;
										}
									}
									if(!false) {
										break;
									}
								}
							}
							if(min2 != 2.0) {
								var cx = 0.0;
								var cy = 0.0;
								var T = min2;
								cx = u2.x + (v4.x - u2.x) * T;
								cy = u2.y + (v4.y - u2.y) * T;
								var ret;
								if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
									ret = new zpp_$nape_geom_ZPP_$Vec2();
								} else {
									ret = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
									zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret.next;
									ret.next = null;
								}
								ret.weak = false;
								ret._immutable = false;
								ret.x = cx;
								ret.y = cy;
								fst_vert = ret;
								zpp_$nape_geom_ZPP_$Collide.flowpoly.add(fst_vert);
								poly1 = true;
								ite1 = cx_itei;
								cx_cont = false;
								break;
							}
							cx_itei = cx_itej;
							u2 = v4;
							cx_itej = cx_itej.next;
						}
						if(cx_cont) {
							while(true) {
								cx_itej = s1.polygon.gverts.next;
								var v5 = cx_itej;
								var min3 = 2.0;
								var cx_cont2 = true;
								var cx_itei2 = s2.polygon.gverts.next;
								var a1 = cx_itei2;
								var cx_itej2 = cx_itei2.next;
								while(cx_itej2 != null) {
									var b2 = cx_itej2;
									var t8 = 0.0;
									var _sx2 = 0.0;
									var _sy2 = 0.0;
									_sx2 = u2.x - a1.x;
									_sy2 = u2.y - a1.y;
									var _vx2 = 0.0;
									var _vy2 = 0.0;
									_vx2 = v5.x - u2.x;
									_vy2 = v5.y - u2.y;
									var _qx2 = 0.0;
									var _qy2 = 0.0;
									_qx2 = b2.x - a1.x;
									_qy2 = b2.y - a1.y;
									var den2 = _vy2 * _qx2 - _vx2 * _qy2;
									var tmp2;
									if(den2 * den2 > nape_Config.epsilon * nape_Config.epsilon) {
										den2 = 1 / den2;
										var txx2 = (_qy2 * _sx2 - _qx2 * _sy2) * den2;
										if(txx2 > nape_Config.epsilon && txx2 < 1 - nape_Config.epsilon) {
											var sxx2 = (_vy2 * _sx2 - _vx2 * _sy2) * den2;
											if(sxx2 > nape_Config.epsilon && sxx2 < 1 - nape_Config.epsilon) {
												t8 = txx2;
												tmp2 = true;
											} else {
												tmp2 = false;
											}
										} else {
											tmp2 = false;
										}
									} else {
										tmp2 = false;
									}
									if(tmp2) {
										if(t8 < min3) {
											min3 = t8;
											ite2 = cx_itei2;
										}
									}
									cx_itei2 = cx_itej2;
									a1 = b2;
									cx_itej2 = cx_itej2.next;
								}
								if(cx_cont2) {
									while(true) {
										cx_itej2 = s2.polygon.gverts.next;
										var b3 = cx_itej2;
										var t9 = 0.0;
										var _sx3 = 0.0;
										var _sy3 = 0.0;
										_sx3 = u2.x - a1.x;
										_sy3 = u2.y - a1.y;
										var _vx3 = 0.0;
										var _vy3 = 0.0;
										_vx3 = v5.x - u2.x;
										_vy3 = v5.y - u2.y;
										var _qx3 = 0.0;
										var _qy3 = 0.0;
										_qx3 = b3.x - a1.x;
										_qy3 = b3.y - a1.y;
										var den3 = _vy3 * _qx3 - _vx3 * _qy3;
										var tmp3;
										if(den3 * den3 > nape_Config.epsilon * nape_Config.epsilon) {
											den3 = 1 / den3;
											var txx3 = (_qy3 * _sx3 - _qx3 * _sy3) * den3;
											if(txx3 > nape_Config.epsilon && txx3 < 1 - nape_Config.epsilon) {
												var sxx3 = (_vy3 * _sx3 - _vx3 * _sy3) * den3;
												if(sxx3 > nape_Config.epsilon && sxx3 < 1 - nape_Config.epsilon) {
													t9 = txx3;
													tmp3 = true;
												} else {
													tmp3 = false;
												}
											} else {
												tmp3 = false;
											}
										} else {
											tmp3 = false;
										}
										if(tmp3) {
											if(t9 < min3) {
												min3 = t9;
												ite2 = cx_itei2;
											}
										}
										if(!false) {
											break;
										}
									}
								}
								if(min3 != 2.0) {
									var cx1 = 0.0;
									var cy1 = 0.0;
									var T1 = min3;
									cx1 = u2.x + (v5.x - u2.x) * T1;
									cy1 = u2.y + (v5.y - u2.y) * T1;
									var ret1;
									if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
										ret1 = new zpp_$nape_geom_ZPP_$Vec2();
									} else {
										ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
										zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
										ret1.next = null;
									}
									ret1.weak = false;
									ret1._immutable = false;
									ret1.x = cx1;
									ret1.y = cy1;
									fst_vert = ret1;
									zpp_$nape_geom_ZPP_$Collide.flowpoly.add(fst_vert);
									poly1 = true;
									ite1 = cx_itei;
									break;
								}
								if(!false) {
									break;
								}
							}
						}
						cnt = 2;
					}
					while(true) if(poly1) {
						ite1 = ite1.next;
						++ind11;
						if(ite1 == null) {
							ite1 = s1.polygon.gverts.next;
							ind11 = 0;
						}
						if(!out1[ind11]) {
							var ex = ite1;
							var tmp4;
							if(fst_vert != null) {
								var dx = 0.0;
								var dy = 0.0;
								dx = ex.x - fst_vert.x;
								dy = ex.y - fst_vert.y;
								tmp4 = dx * dx + dy * dy < nape_Config.epsilon;
							} else {
								tmp4 = false;
							}
							if(tmp4) {
								break;
							}
							zpp_$nape_geom_ZPP_$Collide.flowpoly.add(ex);
							if(fst_vert == null) {
								fst_vert = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
							}
							cnt = 1;
						} else {
							var a2 = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
							var b4 = ite1;
							var u3 = ite2;
							var itm = ite2.next;
							if(itm == null) {
								itm = s2.polygon.gverts.next;
							}
							var max = -1.0;
							var itmo = null;
							var indo = 0;
							var icnt = 0;
							var beg_ite = itm;
							var cx_ite6 = itm;
							while(true) {
								var v6 = cx_ite6;
								var t10 = 0.0;
								var _sx4 = 0.0;
								var _sy4 = 0.0;
								_sx4 = u3.x - a2.x;
								_sy4 = u3.y - a2.y;
								var _vx4 = 0.0;
								var _vy4 = 0.0;
								_vx4 = v6.x - u3.x;
								_vy4 = v6.y - u3.y;
								var _qx4 = 0.0;
								var _qy4 = 0.0;
								_qx4 = b4.x - a2.x;
								_qy4 = b4.y - a2.y;
								var den4 = _vy4 * _qx4 - _vx4 * _qy4;
								var tmp5;
								if(den4 * den4 > nape_Config.epsilon * nape_Config.epsilon) {
									den4 = 1 / den4;
									var txx4 = (_qy4 * _sx4 - _qx4 * _sy4) * den4;
									if(txx4 > nape_Config.epsilon && txx4 < 1 - nape_Config.epsilon) {
										var sxx4 = (_vy4 * _sx4 - _vx4 * _sy4) * den4;
										if(sxx4 > nape_Config.epsilon && sxx4 < 1 - nape_Config.epsilon) {
											t10 = txx4;
											tmp5 = true;
										} else {
											tmp5 = false;
										}
									} else {
										tmp5 = false;
									}
								} else {
									tmp5 = false;
								}
								if(tmp5) {
									if(t10 >= max) {
										itmo = ite2;
										indo = ind2;
										if(++icnt == cnt) {
											max = t10;
											cx_ite6 = beg_ite;
											break;
										} else {
											max = t10;
										}
									}
								}
								u3 = v6;
								ite2 = cx_ite6;
								++ind2;
								if(ind2 >= s2.polygon.edgeCnt) {
									ind2 = 0;
								}
								cx_ite6 = cx_ite6.next;
								if(cx_ite6 == null) {
									cx_ite6 = s2.polygon.gverts.next;
								}
								if(!false) {
									break;
								}
							}
							while(cx_ite6 != beg_ite) {
								var v7 = cx_ite6;
								var t11 = 0.0;
								var _sx5 = 0.0;
								var _sy5 = 0.0;
								_sx5 = u3.x - a2.x;
								_sy5 = u3.y - a2.y;
								var _vx5 = 0.0;
								var _vy5 = 0.0;
								_vx5 = v7.x - u3.x;
								_vy5 = v7.y - u3.y;
								var _qx5 = 0.0;
								var _qy5 = 0.0;
								_qx5 = b4.x - a2.x;
								_qy5 = b4.y - a2.y;
								var den5 = _vy5 * _qx5 - _vx5 * _qy5;
								var tmp6;
								if(den5 * den5 > nape_Config.epsilon * nape_Config.epsilon) {
									den5 = 1 / den5;
									var txx5 = (_qy5 * _sx5 - _qx5 * _sy5) * den5;
									if(txx5 > nape_Config.epsilon && txx5 < 1 - nape_Config.epsilon) {
										var sxx5 = (_vy5 * _sx5 - _vx5 * _sy5) * den5;
										if(sxx5 > nape_Config.epsilon && sxx5 < 1 - nape_Config.epsilon) {
											t11 = txx5;
											tmp6 = true;
										} else {
											tmp6 = false;
										}
									} else {
										tmp6 = false;
									}
								} else {
									tmp6 = false;
								}
								if(tmp6) {
									if(t11 >= max) {
										itmo = ite2;
										indo = ind2;
										if(++icnt == cnt) {
											max = t11;
											cx_ite6 = beg_ite;
											break;
										} else {
											max = t11;
										}
									}
								}
								u3 = v7;
								ite2 = cx_ite6;
								++ind2;
								if(ind2 >= s2.polygon.edgeCnt) {
									ind2 = 0;
								}
								cx_ite6 = cx_ite6.next;
								if(cx_ite6 == null) {
									cx_ite6 = s2.polygon.gverts.next;
								}
							}
							if(itmo == null) {
								break;
							}
							var u4 = itmo;
							var itm2 = itmo.next;
							if(itm2 == null) {
								itm2 = s2.polygon.gverts.next;
							}
							var v8 = itm2;
							var cx2 = 0.0;
							var cy2 = 0.0;
							var T2 = max;
							cx2 = u4.x + (v8.x - u4.x) * T2;
							cy2 = u4.y + (v8.y - u4.y) * T2;
							var tmp7;
							if(fst_vert != null) {
								var dx1 = 0.0;
								var dy1 = 0.0;
								dx1 = cx2 - fst_vert.x;
								dy1 = cy2 - fst_vert.y;
								tmp7 = dx1 * dx1 + dy1 * dy1 < nape_Config.epsilon;
							} else {
								tmp7 = false;
							}
							if(tmp7) {
								break;
							}
							var tmp8 = zpp_$nape_geom_ZPP_$Collide.flowpoly;
							var ret2;
							if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
								ret2 = new zpp_$nape_geom_ZPP_$Vec2();
							} else {
								ret2 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
								zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret2.next;
								ret2.next = null;
							}
							ret2.weak = false;
							ret2._immutable = false;
							ret2.x = cx2;
							ret2.y = cy2;
							tmp8.add(ret2);
							if(fst_vert == null) {
								fst_vert = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
							}
							ite2 = itmo;
							ind2 = indo;
							poly1 = !poly1;
							cnt = 2;
						}
					} else {
						ite2 = ite2.next;
						++ind2;
						if(ite2 == null) {
							ite2 = s2.polygon.gverts.next;
							ind2 = 0;
						}
						if(!out2[ind2]) {
							var ex1 = ite2;
							var tmp9;
							if(fst_vert != null) {
								var dx2 = 0.0;
								var dy2 = 0.0;
								dx2 = ex1.x - fst_vert.x;
								dy2 = ex1.y - fst_vert.y;
								tmp9 = dx2 * dx2 + dy2 * dy2 < nape_Config.epsilon;
							} else {
								tmp9 = false;
							}
							if(tmp9) {
								break;
							}
							zpp_$nape_geom_ZPP_$Collide.flowpoly.add(ex1);
							if(fst_vert == null) {
								fst_vert = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
							}
							cnt = 1;
						} else {
							var a3 = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
							var b5 = ite2;
							var u5 = ite1;
							var itm1 = ite1.next;
							if(itm1 == null) {
								itm1 = s1.polygon.gverts.next;
							}
							var max1 = -1.0;
							var itmo1 = null;
							var indo1 = 0;
							var icnt1 = 0;
							var beg_ite1 = itm1;
							var cx_ite7 = itm1;
							while(true) {
								var v9 = cx_ite7;
								var t12 = 0.0;
								var _sx6 = 0.0;
								var _sy6 = 0.0;
								_sx6 = u5.x - a3.x;
								_sy6 = u5.y - a3.y;
								var _vx6 = 0.0;
								var _vy6 = 0.0;
								_vx6 = v9.x - u5.x;
								_vy6 = v9.y - u5.y;
								var _qx6 = 0.0;
								var _qy6 = 0.0;
								_qx6 = b5.x - a3.x;
								_qy6 = b5.y - a3.y;
								var den6 = _vy6 * _qx6 - _vx6 * _qy6;
								var tmp10;
								if(den6 * den6 > nape_Config.epsilon * nape_Config.epsilon) {
									den6 = 1 / den6;
									var txx6 = (_qy6 * _sx6 - _qx6 * _sy6) * den6;
									if(txx6 > nape_Config.epsilon && txx6 < 1 - nape_Config.epsilon) {
										var sxx6 = (_vy6 * _sx6 - _vx6 * _sy6) * den6;
										if(sxx6 > nape_Config.epsilon && sxx6 < 1 - nape_Config.epsilon) {
											t12 = txx6;
											tmp10 = true;
										} else {
											tmp10 = false;
										}
									} else {
										tmp10 = false;
									}
								} else {
									tmp10 = false;
								}
								if(tmp10) {
									if(t12 >= max1) {
										itmo1 = ite1;
										indo1 = ind11;
										if(++icnt1 == cnt) {
											max1 = t12;
											cx_ite7 = beg_ite1;
											break;
										} else {
											max1 = t12;
										}
									}
								}
								u5 = v9;
								ite1 = cx_ite7;
								++ind11;
								if(ind11 >= s1.polygon.edgeCnt) {
									ind11 = 0;
								}
								cx_ite7 = cx_ite7.next;
								if(cx_ite7 == null) {
									cx_ite7 = s1.polygon.gverts.next;
								}
								if(!false) {
									break;
								}
							}
							while(cx_ite7 != beg_ite1) {
								var v10 = cx_ite7;
								var t13 = 0.0;
								var _sx7 = 0.0;
								var _sy7 = 0.0;
								_sx7 = u5.x - a3.x;
								_sy7 = u5.y - a3.y;
								var _vx7 = 0.0;
								var _vy7 = 0.0;
								_vx7 = v10.x - u5.x;
								_vy7 = v10.y - u5.y;
								var _qx7 = 0.0;
								var _qy7 = 0.0;
								_qx7 = b5.x - a3.x;
								_qy7 = b5.y - a3.y;
								var den7 = _vy7 * _qx7 - _vx7 * _qy7;
								var tmp11;
								if(den7 * den7 > nape_Config.epsilon * nape_Config.epsilon) {
									den7 = 1 / den7;
									var txx7 = (_qy7 * _sx7 - _qx7 * _sy7) * den7;
									if(txx7 > nape_Config.epsilon && txx7 < 1 - nape_Config.epsilon) {
										var sxx7 = (_vy7 * _sx7 - _vx7 * _sy7) * den7;
										if(sxx7 > nape_Config.epsilon && sxx7 < 1 - nape_Config.epsilon) {
											t13 = txx7;
											tmp11 = true;
										} else {
											tmp11 = false;
										}
									} else {
										tmp11 = false;
									}
								} else {
									tmp11 = false;
								}
								if(tmp11) {
									if(t13 >= max1) {
										itmo1 = ite1;
										indo1 = ind11;
										if(++icnt1 == cnt) {
											max1 = t13;
											cx_ite7 = beg_ite1;
											break;
										} else {
											max1 = t13;
										}
									}
								}
								u5 = v10;
								ite1 = cx_ite7;
								++ind11;
								if(ind11 >= s1.polygon.edgeCnt) {
									ind11 = 0;
								}
								cx_ite7 = cx_ite7.next;
								if(cx_ite7 == null) {
									cx_ite7 = s1.polygon.gverts.next;
								}
							}
							if(itmo1 == null) {
								break;
							}
							var u6 = itmo1;
							var itm21 = itmo1.next;
							if(itm21 == null) {
								itm21 = s1.polygon.gverts.next;
							}
							var v11 = itm21;
							var cx3 = 0.0;
							var cy3 = 0.0;
							var T3 = max1;
							cx3 = u6.x + (v11.x - u6.x) * T3;
							cy3 = u6.y + (v11.y - u6.y) * T3;
							var tmp12;
							if(fst_vert != null) {
								var dx3 = 0.0;
								var dy3 = 0.0;
								dx3 = cx3 - fst_vert.x;
								dy3 = cy3 - fst_vert.y;
								tmp12 = dx3 * dx3 + dy3 * dy3 < nape_Config.epsilon;
							} else {
								tmp12 = false;
							}
							if(tmp12) {
								break;
							}
							var tmp13 = zpp_$nape_geom_ZPP_$Collide.flowpoly;
							var ret3;
							if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
								ret3 = new zpp_$nape_geom_ZPP_$Vec2();
							} else {
								ret3 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
								zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret3.next;
								ret3.next = null;
							}
							ret3.weak = false;
							ret3._immutable = false;
							ret3.x = cx3;
							ret3.y = cy3;
							tmp13.add(ret3);
							if(fst_vert == null) {
								fst_vert = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
							}
							ite1 = itmo1;
							ind11 = indo1;
							poly1 = !poly1;
							cnt = 2;
						}
					}
					if(zpp_$nape_geom_ZPP_$Collide.flowpoly.head != null && zpp_$nape_geom_ZPP_$Collide.flowpoly.head.next != null && zpp_$nape_geom_ZPP_$Collide.flowpoly.head.next.next != null) {
						var area2 = 0.0;
						var COMx = 0.0;
						var COMy = 0.0;
						COMx = 0;
						COMy = 0;
						area2 = 0.0;
						var cx_ite8 = zpp_$nape_geom_ZPP_$Collide.flowpoly.head;
						var u7 = cx_ite8.elt;
						cx_ite8 = cx_ite8.next;
						var v12 = cx_ite8.elt;
						cx_ite8 = cx_ite8.next;
						while(cx_ite8 != null) {
							var w6 = cx_ite8.elt;
							area2 += v12.x * (w6.y - u7.y);
							var cf6 = w6.y * v12.x - w6.x * v12.y;
							COMx += (v12.x + w6.x) * cf6;
							COMy += (v12.y + w6.y) * cf6;
							u7 = v12;
							v12 = w6;
							cx_ite8 = cx_ite8.next;
						}
						cx_ite8 = zpp_$nape_geom_ZPP_$Collide.flowpoly.head;
						var w7 = cx_ite8.elt;
						area2 += v12.x * (w7.y - u7.y);
						var cf7 = w7.y * v12.x - w7.x * v12.y;
						COMx += (v12.x + w7.x) * cf7;
						COMy += (v12.y + w7.y) * cf7;
						u7 = v12;
						v12 = w7;
						cx_ite8 = cx_ite8.next;
						var w8 = cx_ite8.elt;
						area2 += v12.x * (w8.y - u7.y);
						var cf8 = w8.y * v12.x - w8.x * v12.y;
						COMx += (v12.x + w8.x) * cf8;
						COMy += (v12.y + w8.y) * cf8;
						area2 *= 0.5;
						var ia = 1 / (6 * area2);
						var t14 = ia;
						COMx *= t14;
						COMy *= t14;
						arb.overlap = -area2;
						arb.centroidx = COMx;
						arb.centroidy = COMy;
						return true;
					} else {
						return false;
					}
				} else {
					return false;
				}
			} else {
				return false;
			}
		} else {
			var inte = [];
			var total1 = true;
			var a0 = null;
			var vi = null;
			var max2 = -1e+100;
			var cont1 = true;
			var vite = s2.polygon.gverts.next;
			var ind3 = 0;
			var cx_ite9 = s2.polygon.edges.head;
			while(cx_ite9 != null) {
				var a4 = cx_ite9.elt;
				var dist = a4.gnormx * s1.circle.worldCOMx + a4.gnormy * s1.circle.worldCOMy;
				if(dist > a4.gprojection + s1.circle.radius) {
					cont1 = false;
					break;
				} else if(dist + s1.circle.radius > a4.gprojection + nape_Config.epsilon) {
					total1 = false;
					inte[ind3] = true;
				}
				dist -= a4.gprojection + s1.circle.radius;
				if(dist > max2) {
					max2 = dist;
					a0 = a4;
					vi = vite;
				}
				vite = vite.next;
				++ind3;
				cx_ite9 = cx_ite9.next;
			}
			if(cont1) {
				if(total1) {
					arb.overlap = s1.circle.area;
					arb.centroidx = s1.circle.worldCOMx;
					arb.centroidy = s1.circle.worldCOMy;
					return true;
				} else {
					var v0 = vi;
					var v13 = vi.next == null ? s2.polygon.gverts.next : vi.next;
					var dt = s1.circle.worldCOMy * a0.gnormx - s1.circle.worldCOMx * a0.gnormy;
					var tmp14;
					if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
						var minDist = s1.circle.radius;
						var px = 0.0;
						var py = 0.0;
						px = v0.x - s1.circle.worldCOMx;
						py = v0.y - s1.circle.worldCOMy;
						var distSqr = px * px + py * py;
						tmp14 = distSqr <= minDist * minDist;
					} else if(dt >= v13.y * a0.gnormx - v13.x * a0.gnormy) {
						var minDist1 = s1.circle.radius;
						var px1 = 0.0;
						var py1 = 0.0;
						px1 = v13.x - s1.circle.worldCOMx;
						py1 = v13.y - s1.circle.worldCOMy;
						var distSqr1 = px1 * px1 + py1 * py1;
						tmp14 = distSqr1 <= minDist1 * minDist1;
					} else {
						tmp14 = true;
					}
					if(tmp14) {
						var ins = [];
						var ind4 = 0;
						var total2 = true;
						var vi1 = null;
						var vind = 0;
						var cx_ite10 = s2.polygon.gverts.next;
						while(cx_ite10 != null) {
							var v14 = cx_ite10;
							var dx4 = 0.0;
							var dy4 = 0.0;
							dx4 = v14.x - s1.circle.worldCOMx;
							dy4 = v14.y - s1.circle.worldCOMy;
							var dist1 = dx4 * dx4 + dy4 * dy4;
							if(!(ins[ind4] = dist1 <= s1.circle.radius * s1.circle.radius)) {
								total2 = false;
							} else {
								vind = ind4;
								vi1 = cx_ite10;
							}
							++ind4;
							cx_ite10 = cx_ite10.next;
						}
						if(total2) {
							var _this6 = s2.polygon;
							if(_this6.zip_worldCOM) {
								if(_this6.body != null) {
									_this6.zip_worldCOM = false;
									if(_this6.zip_localCOM) {
										_this6.zip_localCOM = false;
										if(_this6.type == 1) {
											var _this7 = _this6.polygon;
											if(_this7.lverts.next == null) {
												throw new js__$Boot_HaxeError("Error: An empty polygon has no meaningful localCOM");
											}
											if(_this7.lverts.next.next == null) {
												_this7.localCOMx = _this7.lverts.next.x;
												_this7.localCOMy = _this7.lverts.next.y;
											} else if(_this7.lverts.next.next.next == null) {
												_this7.localCOMx = _this7.lverts.next.x;
												_this7.localCOMy = _this7.lverts.next.y;
												var t15 = 1.0;
												_this7.localCOMx += _this7.lverts.next.next.x * t15;
												_this7.localCOMy += _this7.lverts.next.next.y * t15;
												var t16 = 0.5;
												_this7.localCOMx *= t16;
												_this7.localCOMy *= t16;
											} else {
												_this7.localCOMx = 0;
												_this7.localCOMy = 0;
												var area3 = 0.0;
												var cx_ite11 = _this7.lverts.next;
												var u8 = cx_ite11;
												cx_ite11 = cx_ite11.next;
												var v15 = cx_ite11;
												cx_ite11 = cx_ite11.next;
												while(cx_ite11 != null) {
													var w9 = cx_ite11;
													area3 += v15.x * (w9.y - u8.y);
													var cf9 = w9.y * v15.x - w9.x * v15.y;
													_this7.localCOMx += (v15.x + w9.x) * cf9;
													_this7.localCOMy += (v15.y + w9.y) * cf9;
													u8 = v15;
													v15 = w9;
													cx_ite11 = cx_ite11.next;
												}
												cx_ite11 = _this7.lverts.next;
												var w10 = cx_ite11;
												area3 += v15.x * (w10.y - u8.y);
												var cf10 = w10.y * v15.x - w10.x * v15.y;
												_this7.localCOMx += (v15.x + w10.x) * cf10;
												_this7.localCOMy += (v15.y + w10.y) * cf10;
												u8 = v15;
												v15 = w10;
												cx_ite11 = cx_ite11.next;
												var w11 = cx_ite11;
												area3 += v15.x * (w11.y - u8.y);
												var cf11 = w11.y * v15.x - w11.x * v15.y;
												_this7.localCOMx += (v15.x + w11.x) * cf11;
												_this7.localCOMy += (v15.y + w11.y) * cf11;
												area3 = 1 / (3 * area3);
												var t17 = area3;
												_this7.localCOMx *= t17;
												_this7.localCOMy *= t17;
											}
										}
										if(_this6.wrap_localCOM != null) {
											_this6.wrap_localCOM.zpp_inner.x = _this6.localCOMx;
											_this6.wrap_localCOM.zpp_inner.y = _this6.localCOMy;
										}
									}
									var _this8 = _this6.body;
									if(_this8.zip_axis) {
										_this8.zip_axis = false;
										_this8.axisx = Math.sin(_this8.rot);
										_this8.axisy = Math.cos(_this8.rot);
									}
									_this6.worldCOMx = _this6.body.posx + (_this6.body.axisy * _this6.localCOMx - _this6.body.axisx * _this6.localCOMy);
									_this6.worldCOMy = _this6.body.posy + (_this6.localCOMx * _this6.body.axisx + _this6.localCOMy * _this6.body.axisy);
								}
							}
							arb.overlap = s2.polygon.area;
							arb.centroidx = s2.polygon.worldCOMx;
							arb.centroidy = s2.polygon.worldCOMy;
							return true;
						} else {
							while(zpp_$nape_geom_ZPP_$Collide.flowpoly.head != null) {
								var p1 = zpp_$nape_geom_ZPP_$Collide.flowpoly.pop_unsafe();
								if(!p1._inuse) {
									var o1 = p1;
									if(o1.outer != null) {
										o1.outer.zpp_inner = null;
										o1.outer = null;
									}
									o1._isimmutable = null;
									o1._validate = null;
									o1._invalidate = null;
									o1.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
									zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o1;
								}
							}
							zpp_$nape_geom_ZPP_$Collide.flowsegs.clear();
							var fst_vert1 = null;
							var state = 1;
							if(vi1 == null) {
								vi1 = s2.polygon.gverts.next;
								state = 2;
							} else {
								fst_vert1 = vi1;
								zpp_$nape_geom_ZPP_$Collide.flowpoly.add(fst_vert1);
							}
							while(state != 0) if(state == 1) {
								vi1 = vi1.next;
								if(vi1 == null) {
									vi1 = s2.polygon.gverts.next;
								}
								++vind;
								if(vind >= s2.polygon.edgeCnt) {
									vind = 0;
								}
								if(ins[vind]) {
									var dx5 = 0.0;
									var dy5 = 0.0;
									dx5 = fst_vert1.x - vi1.x;
									dy5 = fst_vert1.y - vi1.y;
									if(dx5 * dx5 + dy5 * dy5 < nape_Config.epsilon) {
										break;
									}
									zpp_$nape_geom_ZPP_$Collide.flowpoly.add(vi1);
								} else {
									var u9 = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
									var v16 = vi1;
									var vx = 0.0;
									var vy = 0.0;
									vx = v16.x - u9.x;
									vy = v16.y - u9.y;
									var qx = 0.0;
									var qy = 0.0;
									qx = u9.x - s1.circle.worldCOMx;
									qy = u9.y - s1.circle.worldCOMy;
									var A = vx * vx + vy * vy;
									var B = 2 * (qx * vx + qy * vy);
									var C = qx * qx + qy * qy - s1.circle.radius * s1.circle.radius;
									var D = Math.sqrt(B * B - 4 * A * C);
									A = 1 / (2 * A);
									var t18 = (-B - D) * A;
									var tval = t18 < nape_Config.epsilon ? (-B + D) * A : t18;
									var cx4 = 0.0;
									var cy4 = 0.0;
									var T4 = tval;
									cx4 = u9.x + (v16.x - u9.x) * T4;
									cy4 = u9.y + (v16.y - u9.y) * T4;
									var dx6 = 0.0;
									var dy6 = 0.0;
									dx6 = fst_vert1.x - cx4;
									dy6 = fst_vert1.y - cy4;
									if(dx6 * dx6 + dy6 * dy6 < nape_Config.epsilon) {
										break;
									}
									var tmp15 = zpp_$nape_geom_ZPP_$Collide.flowpoly;
									var ret4;
									if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
										ret4 = new zpp_$nape_geom_ZPP_$Vec2();
									} else {
										ret4 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
										zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret4.next;
										ret4.next = null;
									}
									ret4.weak = false;
									ret4._immutable = false;
									ret4.x = cx4;
									ret4.y = cy4;
									tmp15.add(ret4);
									state = 2;
								}
							} else if(state == 2) {
								var vi2 = vi1.next;
								if(vi2 == null) {
									vi2 = s2.polygon.gverts.next;
								}
								var u10 = vi1;
								state = 0;
								var beg_ite2 = vi2;
								var cx_ite12 = vi2;
								while(true) {
									var v17 = cx_ite12;
									var vind2 = vind + 1;
									if(vind2 == s2.polygon.edgeCnt) {
										vind2 = 0;
									}
									if(inte[vind]) {
										if(ins[vind2]) {
											var vx1 = 0.0;
											var vy1 = 0.0;
											vx1 = v17.x - u10.x;
											vy1 = v17.y - u10.y;
											var qx1 = 0.0;
											var qy1 = 0.0;
											qx1 = u10.x - s1.circle.worldCOMx;
											qy1 = u10.y - s1.circle.worldCOMy;
											var A1 = vx1 * vx1 + vy1 * vy1;
											var B1 = 2 * (qx1 * vx1 + qy1 * vy1);
											var C1 = qx1 * qx1 + qy1 * qy1 - s1.circle.radius * s1.circle.radius;
											var D1 = Math.sqrt(B1 * B1 - 4 * A1 * C1);
											A1 = 1 / (2 * A1);
											var t19 = (-B1 - D1) * A1;
											var tval1 = t19 < nape_Config.epsilon ? (-B1 + D1) * A1 : t19;
											var cx5 = 0.0;
											var cy5 = 0.0;
											var T5 = tval1;
											cx5 = u10.x + (v17.x - u10.x) * T5;
											cy5 = u10.y + (v17.y - u10.y) * T5;
											var dx7 = 0.0;
											var dy7 = 0.0;
											dx7 = fst_vert1.x - cx5;
											dy7 = fst_vert1.y - cy5;
											if(dx7 * dx7 + dy7 * dy7 < nape_Config.epsilon) {
												state = 0;
												cx_ite12 = beg_ite2;
												break;
											}
											var ret5;
											if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
												ret5 = new zpp_$nape_geom_ZPP_$Vec2();
											} else {
												ret5 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
												zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret5.next;
												ret5.next = null;
											}
											ret5.weak = false;
											ret5._immutable = false;
											ret5.x = cx5;
											ret5.y = cy5;
											var cp = ret5;
											zpp_$nape_geom_ZPP_$Collide.flowsegs.add(zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt);
											zpp_$nape_geom_ZPP_$Collide.flowsegs.add(cp);
											zpp_$nape_geom_ZPP_$Collide.flowpoly.add(cp);
											state = 1;
											cx_ite12 = beg_ite2;
											break;
										} else {
											var t0 = 0.0;
											var t110 = 0.0;
											var vx2 = 0.0;
											var vy2 = 0.0;
											vx2 = v17.x - u10.x;
											vy2 = v17.y - u10.y;
											var qx2 = 0.0;
											var qy2 = 0.0;
											qx2 = u10.x - s1.circle.worldCOMx;
											qy2 = u10.y - s1.circle.worldCOMy;
											var A2 = vx2 * vx2 + vy2 * vy2;
											var B2 = 2 * (qx2 * vx2 + qy2 * vy2);
											var C2 = qx2 * qx2 + qy2 * qy2 - s1.circle.radius * s1.circle.radius;
											var D2 = B2 * B2 - 4 * A2 * C2;
											var two;
											if(D2 * D2 < nape_Config.epsilon) {
												if(D2 < 0) {
													t0 = 10.0;
												} else {
													t110 = -B2 / (2 * A2);
													t0 = t110;
												}
												two = false;
											} else {
												D2 = Math.sqrt(D2);
												A2 = 1 / (2 * A2);
												t0 = (-B2 - D2) * A2;
												t110 = (-B2 + D2) * A2;
												two = true;
											}
											if(t0 < 1 - nape_Config.epsilon && t110 > nape_Config.epsilon) {
												var cx6 = 0.0;
												var cy6 = 0.0;
												var T6 = t0;
												cx6 = u10.x + (v17.x - u10.x) * T6;
												cy6 = u10.y + (v17.y - u10.y) * T6;
												var tmp16;
												if(fst_vert1 != null) {
													var dx8 = 0.0;
													var dy8 = 0.0;
													dx8 = fst_vert1.x - cx6;
													dy8 = fst_vert1.y - cy6;
													tmp16 = dx8 * dx8 + dy8 * dy8 < nape_Config.epsilon;
												} else {
													tmp16 = false;
												}
												if(tmp16) {
													state = 0;
													cx_ite12 = beg_ite2;
													break;
												}
												var ret6;
												if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
													ret6 = new zpp_$nape_geom_ZPP_$Vec2();
												} else {
													ret6 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
													zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret6.next;
													ret6.next = null;
												}
												ret6.weak = false;
												ret6._immutable = false;
												ret6.x = cx6;
												ret6.y = cy6;
												var cp1 = ret6;
												if(zpp_$nape_geom_ZPP_$Collide.flowpoly.head != null) {
													zpp_$nape_geom_ZPP_$Collide.flowsegs.add(zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt);
													zpp_$nape_geom_ZPP_$Collide.flowsegs.add(cp1);
												}
												zpp_$nape_geom_ZPP_$Collide.flowpoly.add(cp1);
												if(fst_vert1 == null) {
													fst_vert1 = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
												}
												if(two) {
													var cx7 = 0.0;
													var cy7 = 0.0;
													var T7 = t110;
													cx7 = u10.x + (v17.x - u10.x) * T7;
													cy7 = u10.y + (v17.y - u10.y) * T7;
													var tmp17 = zpp_$nape_geom_ZPP_$Collide.flowpoly;
													var ret7;
													if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
														ret7 = new zpp_$nape_geom_ZPP_$Vec2();
													} else {
														ret7 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
														zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret7.next;
														ret7.next = null;
													}
													ret7.weak = false;
													ret7._immutable = false;
													ret7.x = cx7;
													ret7.y = cy7;
													tmp17.add(ret7);
												}
											}
										}
									}
									u10 = v17;
									vi1 = cx_ite12;
									vind = vind2;
									cx_ite12 = cx_ite12.next;
									if(cx_ite12 == null) {
										cx_ite12 = s2.polygon.gverts.next;
									}
									if(!false) {
										break;
									}
								}
								while(cx_ite12 != beg_ite2) {
									var v18 = cx_ite12;
									var vind21 = vind + 1;
									if(vind21 == s2.polygon.edgeCnt) {
										vind21 = 0;
									}
									if(inte[vind]) {
										if(ins[vind21]) {
											var vx3 = 0.0;
											var vy3 = 0.0;
											vx3 = v18.x - u10.x;
											vy3 = v18.y - u10.y;
											var qx3 = 0.0;
											var qy3 = 0.0;
											qx3 = u10.x - s1.circle.worldCOMx;
											qy3 = u10.y - s1.circle.worldCOMy;
											var A3 = vx3 * vx3 + vy3 * vy3;
											var B3 = 2 * (qx3 * vx3 + qy3 * vy3);
											var C3 = qx3 * qx3 + qy3 * qy3 - s1.circle.radius * s1.circle.radius;
											var D3 = Math.sqrt(B3 * B3 - 4 * A3 * C3);
											A3 = 1 / (2 * A3);
											var t20 = (-B3 - D3) * A3;
											var tval2 = t20 < nape_Config.epsilon ? (-B3 + D3) * A3 : t20;
											var cx8 = 0.0;
											var cy8 = 0.0;
											var T8 = tval2;
											cx8 = u10.x + (v18.x - u10.x) * T8;
											cy8 = u10.y + (v18.y - u10.y) * T8;
											var dx9 = 0.0;
											var dy9 = 0.0;
											dx9 = fst_vert1.x - cx8;
											dy9 = fst_vert1.y - cy8;
											if(dx9 * dx9 + dy9 * dy9 < nape_Config.epsilon) {
												state = 0;
												cx_ite12 = beg_ite2;
												break;
											}
											var ret8;
											if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
												ret8 = new zpp_$nape_geom_ZPP_$Vec2();
											} else {
												ret8 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
												zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret8.next;
												ret8.next = null;
											}
											ret8.weak = false;
											ret8._immutable = false;
											ret8.x = cx8;
											ret8.y = cy8;
											var cp2 = ret8;
											zpp_$nape_geom_ZPP_$Collide.flowsegs.add(zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt);
											zpp_$nape_geom_ZPP_$Collide.flowsegs.add(cp2);
											zpp_$nape_geom_ZPP_$Collide.flowpoly.add(cp2);
											state = 1;
											cx_ite12 = beg_ite2;
											break;
										} else {
											var t01 = 0.0;
											var t111 = 0.0;
											var vx4 = 0.0;
											var vy4 = 0.0;
											vx4 = v18.x - u10.x;
											vy4 = v18.y - u10.y;
											var qx4 = 0.0;
											var qy4 = 0.0;
											qx4 = u10.x - s1.circle.worldCOMx;
											qy4 = u10.y - s1.circle.worldCOMy;
											var A4 = vx4 * vx4 + vy4 * vy4;
											var B4 = 2 * (qx4 * vx4 + qy4 * vy4);
											var C4 = qx4 * qx4 + qy4 * qy4 - s1.circle.radius * s1.circle.radius;
											var D4 = B4 * B4 - 4 * A4 * C4;
											var two1;
											if(D4 * D4 < nape_Config.epsilon) {
												if(D4 < 0) {
													t01 = 10.0;
												} else {
													t111 = -B4 / (2 * A4);
													t01 = t111;
												}
												two1 = false;
											} else {
												D4 = Math.sqrt(D4);
												A4 = 1 / (2 * A4);
												t01 = (-B4 - D4) * A4;
												t111 = (-B4 + D4) * A4;
												two1 = true;
											}
											if(t01 < 1 - nape_Config.epsilon && t111 > nape_Config.epsilon) {
												var cx9 = 0.0;
												var cy9 = 0.0;
												var T9 = t01;
												cx9 = u10.x + (v18.x - u10.x) * T9;
												cy9 = u10.y + (v18.y - u10.y) * T9;
												var tmp18;
												if(fst_vert1 != null) {
													var dx10 = 0.0;
													var dy10 = 0.0;
													dx10 = fst_vert1.x - cx9;
													dy10 = fst_vert1.y - cy9;
													tmp18 = dx10 * dx10 + dy10 * dy10 < nape_Config.epsilon;
												} else {
													tmp18 = false;
												}
												if(tmp18) {
													state = 0;
													cx_ite12 = beg_ite2;
													break;
												}
												var ret9;
												if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
													ret9 = new zpp_$nape_geom_ZPP_$Vec2();
												} else {
													ret9 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
													zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret9.next;
													ret9.next = null;
												}
												ret9.weak = false;
												ret9._immutable = false;
												ret9.x = cx9;
												ret9.y = cy9;
												var cp3 = ret9;
												if(zpp_$nape_geom_ZPP_$Collide.flowpoly.head != null) {
													zpp_$nape_geom_ZPP_$Collide.flowsegs.add(zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt);
													zpp_$nape_geom_ZPP_$Collide.flowsegs.add(cp3);
												}
												zpp_$nape_geom_ZPP_$Collide.flowpoly.add(cp3);
												if(fst_vert1 == null) {
													fst_vert1 = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
												}
												if(two1) {
													var cx10 = 0.0;
													var cy10 = 0.0;
													var T10 = t111;
													cx10 = u10.x + (v18.x - u10.x) * T10;
													cy10 = u10.y + (v18.y - u10.y) * T10;
													var tmp19 = zpp_$nape_geom_ZPP_$Collide.flowpoly;
													var ret10;
													if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
														ret10 = new zpp_$nape_geom_ZPP_$Vec2();
													} else {
														ret10 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
														zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret10.next;
														ret10.next = null;
													}
													ret10.weak = false;
													ret10._immutable = false;
													ret10.x = cx10;
													ret10.y = cy10;
													tmp19.add(ret10);
												}
											}
										}
									}
									u10 = v18;
									vi1 = cx_ite12;
									vind = vind21;
									cx_ite12 = cx_ite12.next;
									if(cx_ite12 == null) {
										cx_ite12 = s2.polygon.gverts.next;
									}
								}
							}
							if(zpp_$nape_geom_ZPP_$Collide.flowpoly.head == null) {
								return false;
							} else if(zpp_$nape_geom_ZPP_$Collide.flowpoly.head.next == null) {
								var all = true;
								var cx_ite13 = s2.polygon.edges.head;
								while(cx_ite13 != null) {
									var e = cx_ite13.elt;
									var dist2 = e.gnormx * s1.circle.worldCOMx + e.gnormy * s1.circle.worldCOMy;
									if(dist2 > e.gprojection) {
										all = false;
										break;
									}
									cx_ite13 = cx_ite13.next;
								}
								if(all) {
									arb.overlap = s1.circle.area;
									arb.centroidx = s1.circle.worldCOMx;
									arb.centroidy = s1.circle.worldCOMy;
									return true;
								} else {
									return false;
								}
							} else {
								var COMx1 = 0;
								var COMy1 = 0;
								var area4 = 0.0;
								if(zpp_$nape_geom_ZPP_$Collide.flowpoly.head.next.next != null) {
									var parea = 0.0;
									var pCOMx = 0.0;
									var pCOMy = 0.0;
									pCOMx = 0;
									pCOMy = 0;
									parea = 0.0;
									var cx_ite14 = zpp_$nape_geom_ZPP_$Collide.flowpoly.head;
									var u11 = cx_ite14.elt;
									cx_ite14 = cx_ite14.next;
									var v19 = cx_ite14.elt;
									cx_ite14 = cx_ite14.next;
									while(cx_ite14 != null) {
										var w12 = cx_ite14.elt;
										parea += v19.x * (w12.y - u11.y);
										var cf12 = w12.y * v19.x - w12.x * v19.y;
										pCOMx += (v19.x + w12.x) * cf12;
										pCOMy += (v19.y + w12.y) * cf12;
										u11 = v19;
										v19 = w12;
										cx_ite14 = cx_ite14.next;
									}
									cx_ite14 = zpp_$nape_geom_ZPP_$Collide.flowpoly.head;
									var w13 = cx_ite14.elt;
									parea += v19.x * (w13.y - u11.y);
									var cf13 = w13.y * v19.x - w13.x * v19.y;
									pCOMx += (v19.x + w13.x) * cf13;
									pCOMy += (v19.y + w13.y) * cf13;
									u11 = v19;
									v19 = w13;
									cx_ite14 = cx_ite14.next;
									var w14 = cx_ite14.elt;
									parea += v19.x * (w14.y - u11.y);
									var cf14 = w14.y * v19.x - w14.x * v19.y;
									pCOMx += (v19.x + w14.x) * cf14;
									pCOMy += (v19.y + w14.y) * cf14;
									parea *= 0.5;
									var ia1 = 1 / (6 * parea);
									var t21 = ia1;
									pCOMx *= t21;
									pCOMy *= t21;
									var t22 = -parea;
									COMx1 += pCOMx * t22;
									COMy1 += pCOMy * t22;
									area4 -= parea;
								} else {
									zpp_$nape_geom_ZPP_$Collide.flowsegs.add(zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt);
									zpp_$nape_geom_ZPP_$Collide.flowsegs.add(zpp_$nape_geom_ZPP_$Collide.flowpoly.head.next.elt);
								}
								while(zpp_$nape_geom_ZPP_$Collide.flowsegs.head != null) {
									var u12 = zpp_$nape_geom_ZPP_$Collide.flowsegs.pop_unsafe();
									var v20 = zpp_$nape_geom_ZPP_$Collide.flowsegs.pop_unsafe();
									var dx11 = 0.0;
									var dy11 = 0.0;
									dx11 = v20.x - u12.x;
									dy11 = v20.y - u12.y;
									var nx = 0.0;
									var ny = 0.0;
									nx = dx11;
									ny = dy11;
									var d = nx * nx + ny * ny;
									var imag = 1.0 / Math.sqrt(d);
									var t23 = imag;
									nx *= t23;
									ny *= t23;
									var t24 = nx;
									nx = -ny;
									ny = t24;
									var cx11 = 0.0;
									var cy11 = 0.0;
									cx11 = u12.x + v20.x;
									cy11 = u12.y + v20.y;
									var t25 = 0.5;
									cx11 *= t25;
									cy11 *= t25;
									var t26 = 1.0;
									cx11 -= s1.circle.worldCOMx * t26;
									cy11 -= s1.circle.worldCOMy * t26;
									var xd = nx * cx11 + ny * cy11;
									var carea = 0.0;
									var ccom = 0.0;
									var X = xd;
									var cos = X / s1.circle.radius;
									var sin = Math.sqrt(1 - cos * cos);
									var theta = Math.acos(cos);
									carea = s1.circle.radius * (s1.circle.radius * theta - X * sin);
									ccom = 0.66666666666666663 * s1.circle.radius * sin * sin * sin / (theta - cos * sin);
									cx11 = s1.circle.worldCOMx;
									cy11 = s1.circle.worldCOMy;
									var t27 = ccom;
									cx11 += nx * t27;
									cy11 += ny * t27;
									var t28 = carea;
									COMx1 += cx11 * t28;
									COMy1 += cy11 * t28;
									area4 += carea;
								}
								var t29 = 1.0 / area4;
								COMx1 *= t29;
								COMy1 *= t29;
								arb.overlap = area4;
								arb.centroidx = COMx1;
								arb.centroidy = COMy1;
								return true;
							}
						}
					} else {
						return false;
					}
				}
			} else {
				return false;
			}
		}
	} else {
		var c1 = s1.circle;
		var c2 = s2.circle;
		var deltax = 0.0;
		var deltay = 0.0;
		deltax = c2.worldCOMx - c1.worldCOMx;
		deltay = c2.worldCOMy - c1.worldCOMy;
		var cr = c1.radius + c2.radius;
		var ds = deltax * deltax + deltay * deltay;
		if(ds > cr * cr) {
			return false;
		} else if(ds < nape_Config.epsilon * nape_Config.epsilon) {
			if(c1.radius < c2.radius) {
				arb.overlap = c1.area;
				arb.centroidx = c1.worldCOMx;
				arb.centroidy = c1.worldCOMy;
			} else {
				arb.overlap = c2.area;
				arb.centroidx = c2.worldCOMx;
				arb.centroidy = c2.worldCOMy;
			}
			return true;
		} else {
			var d1 = Math.sqrt(ds);
			var id = 1 / d1;
			var x1 = 0.5 * (d1 - (c2.radius * c2.radius - c1.radius * c1.radius) * id);
			if(x1 <= -c1.radius) {
				arb.overlap = c1.area;
				arb.centroidx = c1.worldCOMx;
				arb.centroidy = c1.worldCOMy;
			} else {
				var x2 = d1 - x1;
				if(x2 <= -c2.radius) {
					arb.overlap = c2.area;
					arb.centroidx = c2.worldCOMx;
					arb.centroidy = c2.worldCOMy;
				} else {
					var area11 = 0.0;
					var y1 = 0.0;
					var area21 = 0.0;
					var y2 = 0.0;
					var X1 = x1;
					var cos1 = X1 / c1.radius;
					var sin1 = Math.sqrt(1 - cos1 * cos1);
					var theta1 = Math.acos(cos1);
					area11 = c1.radius * (c1.radius * theta1 - X1 * sin1);
					y1 = 0.66666666666666663 * c1.radius * sin1 * sin1 * sin1 / (theta1 - cos1 * sin1);
					var X2 = x2;
					var cos2 = X2 / c2.radius;
					var sin2 = Math.sqrt(1 - cos2 * cos2);
					var theta2 = Math.acos(cos2);
					area21 = c2.radius * (c2.radius * theta2 - X2 * sin2);
					y2 = 0.66666666666666663 * c2.radius * sin2 * sin2 * sin2 / (theta2 - cos2 * sin2);
					var tarea = area11 + area21;
					var ya = (y1 * area11 + (d1 - y2) * area21) / tarea * id;
					arb.overlap = tarea;
					arb.centroidx = c1.worldCOMx + deltax * ya;
					arb.centroidy = c1.worldCOMy + deltay * ya;
				}
			}
			return true;
		}
	}
};
var zpp_$nape_geom_ZPP_$ConvexRayResult = function() {
	this.toiDistance = 0.0;
	this.next = null;
	this.inner = false;
	this.shape = null;
};
zpp_$nape_geom_ZPP_$ConvexRayResult.__name__ = true;
zpp_$nape_geom_ZPP_$ConvexRayResult.prototype = {
	__class__: zpp_$nape_geom_ZPP_$ConvexRayResult
};
var zpp_$nape_geom_ZPP_$GeomVert = function() {
	this.forced = false;
	this.next = null;
	this.prev = null;
	this.y = 0.0;
	this.x = 0.0;
};
zpp_$nape_geom_ZPP_$GeomVert.__name__ = true;
zpp_$nape_geom_ZPP_$GeomVert.prototype = {
	__class__: zpp_$nape_geom_ZPP_$GeomVert
};
var zpp_$nape_geom_ZPP_$GeomPoly = function(outer) {
	this.vertices = null;
	this.outer = null;
	this.outer = outer;
};
zpp_$nape_geom_ZPP_$GeomPoly.__name__ = true;
zpp_$nape_geom_ZPP_$GeomPoly.prototype = {
	__class__: zpp_$nape_geom_ZPP_$GeomPoly
};
var zpp_$nape_geom_ZPP_$Mat23 = function() {
	this.next = null;
	this._invalidate = null;
	this.ty = 0.0;
	this.tx = 0.0;
	this.d = 0.0;
	this.c = 0.0;
	this.b = 0.0;
	this.a = 0.0;
	this.outer = null;
};
zpp_$nape_geom_ZPP_$Mat23.__name__ = true;
zpp_$nape_geom_ZPP_$Mat23.get = function() {
	var ret;
	if(zpp_$nape_geom_ZPP_$Mat23.zpp_pool == null) {
		ret = new zpp_$nape_geom_ZPP_$Mat23();
	} else {
		ret = zpp_$nape_geom_ZPP_$Mat23.zpp_pool;
		zpp_$nape_geom_ZPP_$Mat23.zpp_pool = ret.next;
		ret.next = null;
	}
	return ret;
};
zpp_$nape_geom_ZPP_$Mat23.prototype = {
	__class__: zpp_$nape_geom_ZPP_$Mat23
};
var zpp_$nape_geom_ZPP_$MatMN = function(m,n) {
	this.x = null;
	this.n = 0;
	this.m = 0;
	this.outer = null;
	this.m = m;
	this.n = n;
	this.x = [];
	var _g1 = 0;
	var _g = m * n;
	while(_g1 < _g) {
		var i = _g1++;
		this.x.push(0.0);
	}
};
zpp_$nape_geom_ZPP_$MatMN.__name__ = true;
zpp_$nape_geom_ZPP_$MatMN.prototype = {
	__class__: zpp_$nape_geom_ZPP_$MatMN
};
var zpp_$nape_geom_ZPP_$ToiEvent = function() {
	this.kinematic = false;
	this.failed = false;
	this.slipped = false;
	this.axis = null;
	this.c2 = null;
	this.c1 = null;
	this.frozen2 = false;
	this.frozen1 = false;
	this.arbiter = null;
	this.s2 = null;
	this.s1 = null;
	this.toi = 0.0;
	this.next = null;
	this.c1 = new zpp_$nape_geom_ZPP_$Vec2();
	this.c2 = new zpp_$nape_geom_ZPP_$Vec2();
	this.axis = new zpp_$nape_geom_ZPP_$Vec2();
};
zpp_$nape_geom_ZPP_$ToiEvent.__name__ = true;
zpp_$nape_geom_ZPP_$ToiEvent.prototype = {
	__class__: zpp_$nape_geom_ZPP_$ToiEvent
};
var zpp_$nape_geom_ZPP_$SweepDistance = function() { };
zpp_$nape_geom_ZPP_$SweepDistance.__name__ = true;
zpp_$nape_geom_ZPP_$SweepDistance.dynamicSweep = function(toi,timeStep,lowerBound,negRadius,userAPI) {
	if(userAPI == null) {
		userAPI = false;
	}
	var s1 = toi.s1;
	var s2 = toi.s2;
	var b1 = s1.body;
	var b2 = s2.body;
	var deltax = 0.0;
	var deltay = 0.0;
	deltax = b2.velx - b1.velx;
	deltay = b2.vely - b1.vely;
	var ang1 = b1.angvel;
	if(ang1 < 0) {
		ang1 = -ang1;
	}
	var ang2 = b2.angvel;
	if(ang2 < 0) {
		ang2 = -ang2;
	}
	var angBias = s1.sweepCoef * ang1 + s2.sweepCoef * ang2;
	if(!userAPI && !toi.kinematic && deltax * deltax + deltay * deltay < nape_Config.dynamicSweepLinearThreshold * nape_Config.dynamicSweepLinearThreshold && angBias < nape_Config.dynamicSweepAngularThreshold) {
		toi.toi = -1;
		toi.failed = true;
		return;
	}
	var c1 = toi.c1;
	var c2 = toi.c2;
	var axis = toi.axis;
	var curTOI = lowerBound;
	var curIter = 0;
	while(true) {
		var dt = curTOI * timeStep;
		var delta = dt - b1.sweepTime;
		if(delta != 0) {
			b1.sweepTime = dt;
			var t = delta;
			b1.posx += b1.velx * t;
			b1.posy += b1.vely * t;
			if(b1.angvel != 0) {
				var dr = b1.sweep_angvel * delta;
				b1.rot += dr;
				if(dr * dr > 0.0001) {
					b1.axisx = Math.sin(b1.rot);
					b1.axisy = Math.cos(b1.rot);
				} else {
					var d2 = dr * dr;
					var p = 1 - 0.5 * d2;
					var m = 1 - d2 * d2 / 8;
					var nx = (p * b1.axisx + dr * b1.axisy) * m;
					b1.axisy = (p * b1.axisy - dr * b1.axisx) * m;
					b1.axisx = nx;
				}
			}
		}
		if(s1.type == 0) {
			s1.worldCOMx = b1.posx + (b1.axisy * s1.localCOMx - b1.axisx * s1.localCOMy);
			s1.worldCOMy = b1.posy + (s1.localCOMx * b1.axisx + s1.localCOMy * b1.axisy);
		} else {
			var p1 = s1.polygon;
			var li = p1.lverts.next;
			var cx_ite = p1.gverts.next;
			while(cx_ite != null) {
				var g = cx_ite;
				var l = li;
				li = li.next;
				g.x = b1.posx + (b1.axisy * l.x - b1.axisx * l.y);
				g.y = b1.posy + (l.x * b1.axisx + l.y * b1.axisy);
				cx_ite = cx_ite.next;
			}
			var ite = p1.edges.head;
			var cx_ite1 = p1.gverts.next;
			var u = cx_ite1;
			cx_ite1 = cx_ite1.next;
			while(cx_ite1 != null) {
				var v = cx_ite1;
				var e = ite.elt;
				ite = ite.next;
				e.gnormx = b1.axisy * e.lnormx - b1.axisx * e.lnormy;
				e.gnormy = e.lnormx * b1.axisx + e.lnormy * b1.axisy;
				e.gprojection = b1.posx * e.gnormx + b1.posy * e.gnormy + e.lprojection;
				e.tp0 = u.y * e.gnormx - u.x * e.gnormy;
				e.tp1 = v.y * e.gnormx - v.x * e.gnormy;
				u = v;
				cx_ite1 = cx_ite1.next;
			}
			var v1 = p1.gverts.next;
			var e1 = ite.elt;
			ite = ite.next;
			e1.gnormx = b1.axisy * e1.lnormx - b1.axisx * e1.lnormy;
			e1.gnormy = e1.lnormx * b1.axisx + e1.lnormy * b1.axisy;
			e1.gprojection = b1.posx * e1.gnormx + b1.posy * e1.gnormy + e1.lprojection;
			e1.tp0 = u.y * e1.gnormx - u.x * e1.gnormy;
			e1.tp1 = v1.y * e1.gnormx - v1.x * e1.gnormy;
		}
		var dt1 = curTOI * timeStep;
		var delta1 = dt1 - b2.sweepTime;
		if(delta1 != 0) {
			b2.sweepTime = dt1;
			var t1 = delta1;
			b2.posx += b2.velx * t1;
			b2.posy += b2.vely * t1;
			if(b2.angvel != 0) {
				var dr1 = b2.sweep_angvel * delta1;
				b2.rot += dr1;
				if(dr1 * dr1 > 0.0001) {
					b2.axisx = Math.sin(b2.rot);
					b2.axisy = Math.cos(b2.rot);
				} else {
					var d21 = dr1 * dr1;
					var p2 = 1 - 0.5 * d21;
					var m1 = 1 - d21 * d21 / 8;
					var nx1 = (p2 * b2.axisx + dr1 * b2.axisy) * m1;
					b2.axisy = (p2 * b2.axisy - dr1 * b2.axisx) * m1;
					b2.axisx = nx1;
				}
			}
		}
		if(s2.type == 0) {
			s2.worldCOMx = b2.posx + (b2.axisy * s2.localCOMx - b2.axisx * s2.localCOMy);
			s2.worldCOMy = b2.posy + (s2.localCOMx * b2.axisx + s2.localCOMy * b2.axisy);
		} else {
			var p3 = s2.polygon;
			var li1 = p3.lverts.next;
			var cx_ite2 = p3.gverts.next;
			while(cx_ite2 != null) {
				var g1 = cx_ite2;
				var l1 = li1;
				li1 = li1.next;
				g1.x = b2.posx + (b2.axisy * l1.x - b2.axisx * l1.y);
				g1.y = b2.posy + (l1.x * b2.axisx + l1.y * b2.axisy);
				cx_ite2 = cx_ite2.next;
			}
			var ite1 = p3.edges.head;
			var cx_ite3 = p3.gverts.next;
			var u1 = cx_ite3;
			cx_ite3 = cx_ite3.next;
			while(cx_ite3 != null) {
				var v2 = cx_ite3;
				var e2 = ite1.elt;
				ite1 = ite1.next;
				e2.gnormx = b2.axisy * e2.lnormx - b2.axisx * e2.lnormy;
				e2.gnormy = e2.lnormx * b2.axisx + e2.lnormy * b2.axisy;
				e2.gprojection = b2.posx * e2.gnormx + b2.posy * e2.gnormy + e2.lprojection;
				e2.tp0 = u1.y * e2.gnormx - u1.x * e2.gnormy;
				e2.tp1 = v2.y * e2.gnormx - v2.x * e2.gnormy;
				u1 = v2;
				cx_ite3 = cx_ite3.next;
			}
			var v3 = p3.gverts.next;
			var e3 = ite1.elt;
			ite1 = ite1.next;
			e3.gnormx = b2.axisy * e3.lnormx - b2.axisx * e3.lnormy;
			e3.gnormy = e3.lnormx * b2.axisx + e3.lnormy * b2.axisy;
			e3.gprojection = b2.posx * e3.gnormx + b2.posy * e3.gnormy + e3.lprojection;
			e3.tp0 = u1.y * e3.gnormx - u1.x * e3.gnormy;
			e3.tp1 = v3.y * e3.gnormx - v3.x * e3.gnormy;
		}
		var s11 = s1;
		var s21 = s2;
		var w1 = c1;
		var w2 = c2;
		var sep;
		if(s11.type == 0 && s21.type == 0) {
			var c11 = s11.circle;
			var c21 = s21.circle;
			var dist;
			var nx2 = 0.0;
			var ny = 0.0;
			nx2 = c21.worldCOMx - c11.worldCOMx;
			ny = c21.worldCOMy - c11.worldCOMy;
			var len = Math.sqrt(nx2 * nx2 + ny * ny);
			dist = len - (c11.radius + c21.radius);
			if(dist < 1e100) {
				if(len == 0) {
					nx2 = 1;
					ny = 0;
				} else {
					var t2 = 1.0 / len;
					nx2 *= t2;
					ny *= t2;
				}
				var t3 = c11.radius;
				w1.x = c11.worldCOMx + nx2 * t3;
				w1.y = c11.worldCOMy + ny * t3;
				var t4 = -c21.radius;
				w2.x = c21.worldCOMx + nx2 * t4;
				w2.y = c21.worldCOMy + ny * t4;
				axis.x = nx2;
				axis.y = ny;
			}
			sep = dist;
		} else {
			var swapped = false;
			if(s11.type == 0 && s21.type == 1) {
				var tmp = s11;
				s11 = s21;
				s21 = tmp;
				var tmp2 = w1;
				w1 = w2;
				w2 = tmp2;
				swapped = true;
			}
			if(s11.type == 1 && s21.type == 0) {
				var poly = s11.polygon;
				var circle = s21.circle;
				var best = -1e+100;
				var a0 = null;
				var cx_ite4 = poly.edges.head;
				while(cx_ite4 != null) {
					var a = cx_ite4.elt;
					var dist1 = a.gnormx * circle.worldCOMx + a.gnormy * circle.worldCOMy - a.gprojection - circle.radius;
					if(dist1 > 1e100) {
						best = dist1;
						break;
					}
					if(dist1 > 0) {
						if(dist1 > best) {
							best = dist1;
							a0 = a;
						}
					} else if(best < 0 && dist1 > best) {
						best = dist1;
						a0 = a;
					}
					cx_ite4 = cx_ite4.next;
				}
				if(best < 1e100) {
					var v0 = a0.gp0;
					var v11 = a0.gp1;
					var dt2 = circle.worldCOMy * a0.gnormx - circle.worldCOMx * a0.gnormy;
					if(dt2 <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
						var nx3 = 0.0;
						var ny1 = 0.0;
						nx3 = circle.worldCOMx - v0.x;
						ny1 = circle.worldCOMy - v0.y;
						var len1 = Math.sqrt(nx3 * nx3 + ny1 * ny1);
						best = len1 - circle.radius;
						if(best < 1e100) {
							if(len1 == 0) {
								nx3 = 1;
								ny1 = 0;
							} else {
								var t5 = 1.0 / len1;
								nx3 *= t5;
								ny1 *= t5;
							}
							var t6 = 0;
							w1.x = v0.x + nx3 * t6;
							w1.y = v0.y + ny1 * t6;
							var t7 = -circle.radius;
							w2.x = circle.worldCOMx + nx3 * t7;
							w2.y = circle.worldCOMy + ny1 * t7;
							axis.x = nx3;
							axis.y = ny1;
						}
					} else if(dt2 >= v11.y * a0.gnormx - v11.x * a0.gnormy) {
						var nx4 = 0.0;
						var ny2 = 0.0;
						nx4 = circle.worldCOMx - v11.x;
						ny2 = circle.worldCOMy - v11.y;
						var len2 = Math.sqrt(nx4 * nx4 + ny2 * ny2);
						best = len2 - circle.radius;
						if(best < 1e100) {
							if(len2 == 0) {
								nx4 = 1;
								ny2 = 0;
							} else {
								var t8 = 1.0 / len2;
								nx4 *= t8;
								ny2 *= t8;
							}
							var t9 = 0;
							w1.x = v11.x + nx4 * t9;
							w1.y = v11.y + ny2 * t9;
							var t10 = -circle.radius;
							w2.x = circle.worldCOMx + nx4 * t10;
							w2.y = circle.worldCOMy + ny2 * t10;
							axis.x = nx4;
							axis.y = ny2;
						}
					} else {
						var t11 = -circle.radius;
						w2.x = circle.worldCOMx + a0.gnormx * t11;
						w2.y = circle.worldCOMy + a0.gnormy * t11;
						var t12 = -best;
						w1.x = w2.x + a0.gnormx * t12;
						w1.y = w2.y + a0.gnormy * t12;
						axis.x = a0.gnormx;
						axis.y = a0.gnormy;
					}
				}
				if(swapped) {
					axis.x = -axis.x;
					axis.y = -axis.y;
				}
				sep = best;
			} else {
				var p11 = s11.polygon;
				var p21 = s21.polygon;
				var best1 = -1e+100;
				var a1 = null;
				var a2 = null;
				var besti = 0;
				var cx_ite5 = p11.edges.head;
				while(cx_ite5 != null) {
					var a3 = cx_ite5.elt;
					var min = 1e100;
					var cx_ite6 = p21.gverts.next;
					while(cx_ite6 != null) {
						var v4 = cx_ite6;
						var k = a3.gnormx * v4.x + a3.gnormy * v4.y;
						if(k < min) {
							min = k;
						}
						cx_ite6 = cx_ite6.next;
					}
					min -= a3.gprojection;
					if(min > 1e100) {
						best1 = min;
						break;
					}
					if(min > 0) {
						if(min > best1) {
							best1 = min;
							a1 = a3;
							besti = 1;
						}
					} else if(best1 < 0 && min > best1) {
						best1 = min;
						a1 = a3;
						besti = 1;
					}
					cx_ite5 = cx_ite5.next;
				}
				if(best1 < 1e100) {
					var cx_ite7 = p21.edges.head;
					while(cx_ite7 != null) {
						var a4 = cx_ite7.elt;
						var min1 = 1e100;
						var cx_ite8 = p11.gverts.next;
						while(cx_ite8 != null) {
							var v5 = cx_ite8;
							var k1 = a4.gnormx * v5.x + a4.gnormy * v5.y;
							if(k1 < min1) {
								min1 = k1;
							}
							cx_ite8 = cx_ite8.next;
						}
						min1 -= a4.gprojection;
						if(min1 > 1e100) {
							best1 = min1;
							break;
						}
						if(min1 > 0) {
							if(min1 > best1) {
								best1 = min1;
								a2 = a4;
								besti = 2;
							}
						} else if(best1 < 0 && min1 > best1) {
							best1 = min1;
							a2 = a4;
							besti = 2;
						}
						cx_ite7 = cx_ite7.next;
					}
					if(best1 < 1e100) {
						var q1;
						var q2;
						var ax;
						if(besti == 1) {
							q1 = p11;
							q2 = p21;
							ax = a1;
						} else {
							q1 = p21;
							q2 = p11;
							ax = a2;
							var tmp1 = w1;
							w1 = w2;
							w2 = tmp1;
							swapped = !swapped;
						}
						var ay = null;
						var min2 = 1e100;
						var cx_ite9 = q2.edges.head;
						while(cx_ite9 != null) {
							var a5 = cx_ite9.elt;
							var k2 = ax.gnormx * a5.gnormx + ax.gnormy * a5.gnormy;
							if(k2 < min2) {
								min2 = k2;
								ay = a5;
							}
							cx_ite9 = cx_ite9.next;
						}
						if(swapped) {
							axis.x = -ax.gnormx;
							axis.y = -ax.gnormy;
						} else {
							axis.x = ax.gnormx;
							axis.y = ax.gnormy;
						}
						if(best1 >= 0) {
							var v01 = ax.gp0;
							var v12 = ax.gp1;
							var q0 = ay.gp0;
							var q11 = ay.gp1;
							var vx = 0.0;
							var vy = 0.0;
							var qx = 0.0;
							var qy = 0.0;
							vx = v12.x - v01.x;
							vy = v12.y - v01.y;
							qx = q11.x - q0.x;
							qy = q11.y - q0.y;
							var vdot = 1 / (vx * vx + vy * vy);
							var qdot = 1 / (qx * qx + qy * qy);
							var t13 = -(vx * (v01.x - q0.x) + vy * (v01.y - q0.y)) * vdot;
							var t21 = -(vx * (v01.x - q11.x) + vy * (v01.y - q11.y)) * vdot;
							var s12 = -(qx * (q0.x - v01.x) + qy * (q0.y - v01.y)) * qdot;
							var s22 = -(qx * (q0.x - v12.x) + qy * (q0.y - v12.y)) * qdot;
							if(t13 < 0) {
								t13 = 0;
							} else if(t13 > 1) {
								t13 = 1;
							}
							if(t21 < 0) {
								t21 = 0;
							} else if(t21 > 1) {
								t21 = 1;
							}
							if(s12 < 0) {
								s12 = 0;
							} else if(s12 > 1) {
								s12 = 1;
							}
							if(s22 < 0) {
								s22 = 0;
							} else if(s22 > 1) {
								s22 = 1;
							}
							var f1x = 0.0;
							var f1y = 0.0;
							var t14 = t13;
							f1x = v01.x + vx * t14;
							f1y = v01.y + vy * t14;
							var f2x = 0.0;
							var f2y = 0.0;
							var t15 = t21;
							f2x = v01.x + vx * t15;
							f2y = v01.y + vy * t15;
							var g1x = 0.0;
							var g1y = 0.0;
							var t16 = s12;
							g1x = q0.x + qx * t16;
							g1y = q0.y + qy * t16;
							var g2x = 0.0;
							var g2y = 0.0;
							var t17 = s22;
							g2x = q0.x + qx * t17;
							g2y = q0.y + qy * t17;
							var dx = 0.0;
							var dy = 0.0;
							dx = f1x - q0.x;
							dy = f1y - q0.y;
							var d1 = dx * dx + dy * dy;
							var dx1 = 0.0;
							var dy1 = 0.0;
							dx1 = f2x - q11.x;
							dy1 = f2y - q11.y;
							var d22 = dx1 * dx1 + dy1 * dy1;
							var dx2 = 0.0;
							var dy2 = 0.0;
							dx2 = g1x - v01.x;
							dy2 = g1y - v01.y;
							var e11 = dx2 * dx2 + dy2 * dy2;
							var dx3 = 0.0;
							var dy3 = 0.0;
							dx3 = g2x - v12.x;
							dy3 = g2y - v12.y;
							var e21 = dx3 * dx3 + dy3 * dy3;
							var minfx = 0.0;
							var minfy = 0.0;
							var minq = null;
							if(d1 < d22) {
								minfx = f1x;
								minfy = f1y;
								minq = q0;
							} else {
								minfx = f2x;
								minfy = f2y;
								minq = q11;
								d1 = d22;
							}
							var mingx = 0.0;
							var mingy = 0.0;
							var minv = null;
							if(e11 < e21) {
								mingx = g1x;
								mingy = g1y;
								minv = v01;
							} else {
								mingx = g2x;
								mingy = g2y;
								minv = v12;
								e11 = e21;
							}
							if(d1 < e11) {
								w1.x = minfx;
								w1.y = minfy;
								w2.x = minq.x;
								w2.y = minq.y;
								best1 = Math.sqrt(d1);
							} else {
								w2.x = mingx;
								w2.y = mingy;
								w1.x = minv.x;
								w1.y = minv.y;
								best1 = Math.sqrt(e11);
							}
							if(best1 != 0) {
								axis.x = w2.x - w1.x;
								axis.y = w2.y - w1.y;
								var t18 = 1.0 / best1;
								axis.x *= t18;
								axis.y *= t18;
								if(swapped) {
									axis.x = -axis.x;
									axis.y = -axis.y;
								}
							}
							sep = best1;
						} else {
							var c0x = 0.0;
							var c0y = 0.0;
							c0x = ay.gp0.x;
							c0y = ay.gp0.y;
							var c1x = 0.0;
							var c1y = 0.0;
							c1x = ay.gp1.x;
							c1y = ay.gp1.y;
							var dvx = 0.0;
							var dvy = 0.0;
							dvx = c1x - c0x;
							dvy = c1y - c0y;
							var d0 = ax.gnormy * c0x - ax.gnormx * c0y;
							var d11 = ax.gnormy * c1x - ax.gnormx * c1y;
							var den = 1 / (d11 - d0);
							var t19 = (-ax.tp1 - d0) * den;
							if(t19 > nape_Config.epsilon) {
								var t20 = t19;
								c0x += dvx * t20;
								c0y += dvy * t20;
							}
							var t22 = (-ax.tp0 - d11) * den;
							if(t22 < -nape_Config.epsilon) {
								var t23 = t22;
								c1x += dvx * t23;
								c1y += dvy * t23;
							}
							var c0d = c0x * ax.gnormx + c0y * ax.gnormy - ax.gprojection;
							var c1d = c1x * ax.gnormx + c1y * ax.gnormy - ax.gprojection;
							if(c0d < c1d) {
								w2.x = c0x;
								w2.y = c0y;
								var t24 = -c0d;
								w1.x = w2.x + ax.gnormx * t24;
								w1.y = w2.y + ax.gnormy * t24;
								sep = c0d;
							} else {
								w2.x = c1x;
								w2.y = c1y;
								var t25 = -c1d;
								w1.x = w2.x + ax.gnormx * t25;
								w1.y = w2.y + ax.gnormy * t25;
								sep = c1d;
							}
						}
					} else {
						sep = 1e100;
					}
				} else {
					sep = 1e100;
				}
			}
		}
		var sep1 = sep + negRadius;
		var dot = deltax * axis.x + deltay * axis.y;
		if(sep1 < nape_Config.distanceThresholdCCD) {
			if(userAPI) {
				break;
			}
			var d1x = 0.0;
			var d1y = 0.0;
			d1x = c1.x - b1.posx;
			d1y = c1.y - b1.posy;
			var d2x = 0.0;
			var d2y = 0.0;
			d2x = c2.x - b2.posx;
			d2y = c2.y - b2.posy;
			var proj = dot - b1.sweep_angvel * (axis.y * d1x - axis.x * d1y) + b2.sweep_angvel * (axis.y * d2x - axis.x * d2y);
			if(proj > 0) {
				toi.slipped = true;
			}
			if(proj <= 0 || sep1 < nape_Config.distanceThresholdCCD * 0.5) {
				break;
			}
		}
		var denom = (angBias - dot) * timeStep;
		if(denom <= 0) {
			curTOI = -1;
			break;
		}
		var delta2 = sep1 / denom;
		if(delta2 < 1e-6) {
			delta2 = 1e-6;
		}
		curTOI += delta2;
		if(curTOI >= 1) {
			curTOI = 1;
			var dt3 = curTOI * timeStep;
			var delta3 = dt3 - b1.sweepTime;
			if(delta3 != 0) {
				b1.sweepTime = dt3;
				var t26 = delta3;
				b1.posx += b1.velx * t26;
				b1.posy += b1.vely * t26;
				if(b1.angvel != 0) {
					var dr2 = b1.sweep_angvel * delta3;
					b1.rot += dr2;
					if(dr2 * dr2 > 0.0001) {
						b1.axisx = Math.sin(b1.rot);
						b1.axisy = Math.cos(b1.rot);
					} else {
						var d23 = dr2 * dr2;
						var p4 = 1 - 0.5 * d23;
						var m2 = 1 - d23 * d23 / 8;
						var nx5 = (p4 * b1.axisx + dr2 * b1.axisy) * m2;
						b1.axisy = (p4 * b1.axisy - dr2 * b1.axisx) * m2;
						b1.axisx = nx5;
					}
				}
			}
			if(s1.type == 0) {
				s1.worldCOMx = b1.posx + (b1.axisy * s1.localCOMx - b1.axisx * s1.localCOMy);
				s1.worldCOMy = b1.posy + (s1.localCOMx * b1.axisx + s1.localCOMy * b1.axisy);
			} else {
				var p5 = s1.polygon;
				var li2 = p5.lverts.next;
				var cx_ite10 = p5.gverts.next;
				while(cx_ite10 != null) {
					var g2 = cx_ite10;
					var l2 = li2;
					li2 = li2.next;
					g2.x = b1.posx + (b1.axisy * l2.x - b1.axisx * l2.y);
					g2.y = b1.posy + (l2.x * b1.axisx + l2.y * b1.axisy);
					cx_ite10 = cx_ite10.next;
				}
				var ite2 = p5.edges.head;
				var cx_ite11 = p5.gverts.next;
				var u2 = cx_ite11;
				cx_ite11 = cx_ite11.next;
				while(cx_ite11 != null) {
					var v6 = cx_ite11;
					var e4 = ite2.elt;
					ite2 = ite2.next;
					e4.gnormx = b1.axisy * e4.lnormx - b1.axisx * e4.lnormy;
					e4.gnormy = e4.lnormx * b1.axisx + e4.lnormy * b1.axisy;
					e4.gprojection = b1.posx * e4.gnormx + b1.posy * e4.gnormy + e4.lprojection;
					e4.tp0 = u2.y * e4.gnormx - u2.x * e4.gnormy;
					e4.tp1 = v6.y * e4.gnormx - v6.x * e4.gnormy;
					u2 = v6;
					cx_ite11 = cx_ite11.next;
				}
				var v7 = p5.gverts.next;
				var e5 = ite2.elt;
				ite2 = ite2.next;
				e5.gnormx = b1.axisy * e5.lnormx - b1.axisx * e5.lnormy;
				e5.gnormy = e5.lnormx * b1.axisx + e5.lnormy * b1.axisy;
				e5.gprojection = b1.posx * e5.gnormx + b1.posy * e5.gnormy + e5.lprojection;
				e5.tp0 = u2.y * e5.gnormx - u2.x * e5.gnormy;
				e5.tp1 = v7.y * e5.gnormx - v7.x * e5.gnormy;
			}
			var dt4 = curTOI * timeStep;
			var delta4 = dt4 - b2.sweepTime;
			if(delta4 != 0) {
				b2.sweepTime = dt4;
				var t27 = delta4;
				b2.posx += b2.velx * t27;
				b2.posy += b2.vely * t27;
				if(b2.angvel != 0) {
					var dr3 = b2.sweep_angvel * delta4;
					b2.rot += dr3;
					if(dr3 * dr3 > 0.0001) {
						b2.axisx = Math.sin(b2.rot);
						b2.axisy = Math.cos(b2.rot);
					} else {
						var d24 = dr3 * dr3;
						var p6 = 1 - 0.5 * d24;
						var m3 = 1 - d24 * d24 / 8;
						var nx6 = (p6 * b2.axisx + dr3 * b2.axisy) * m3;
						b2.axisy = (p6 * b2.axisy - dr3 * b2.axisx) * m3;
						b2.axisx = nx6;
					}
				}
			}
			if(s2.type == 0) {
				s2.worldCOMx = b2.posx + (b2.axisy * s2.localCOMx - b2.axisx * s2.localCOMy);
				s2.worldCOMy = b2.posy + (s2.localCOMx * b2.axisx + s2.localCOMy * b2.axisy);
			} else {
				var p7 = s2.polygon;
				var li3 = p7.lverts.next;
				var cx_ite12 = p7.gverts.next;
				while(cx_ite12 != null) {
					var g3 = cx_ite12;
					var l3 = li3;
					li3 = li3.next;
					g3.x = b2.posx + (b2.axisy * l3.x - b2.axisx * l3.y);
					g3.y = b2.posy + (l3.x * b2.axisx + l3.y * b2.axisy);
					cx_ite12 = cx_ite12.next;
				}
				var ite3 = p7.edges.head;
				var cx_ite13 = p7.gverts.next;
				var u3 = cx_ite13;
				cx_ite13 = cx_ite13.next;
				while(cx_ite13 != null) {
					var v8 = cx_ite13;
					var e6 = ite3.elt;
					ite3 = ite3.next;
					e6.gnormx = b2.axisy * e6.lnormx - b2.axisx * e6.lnormy;
					e6.gnormy = e6.lnormx * b2.axisx + e6.lnormy * b2.axisy;
					e6.gprojection = b2.posx * e6.gnormx + b2.posy * e6.gnormy + e6.lprojection;
					e6.tp0 = u3.y * e6.gnormx - u3.x * e6.gnormy;
					e6.tp1 = v8.y * e6.gnormx - v8.x * e6.gnormy;
					u3 = v8;
					cx_ite13 = cx_ite13.next;
				}
				var v9 = p7.gverts.next;
				var e7 = ite3.elt;
				ite3 = ite3.next;
				e7.gnormx = b2.axisy * e7.lnormx - b2.axisx * e7.lnormy;
				e7.gnormy = e7.lnormx * b2.axisx + e7.lnormy * b2.axisy;
				e7.gprojection = b2.posx * e7.gnormx + b2.posy * e7.gnormy + e7.lprojection;
				e7.tp0 = u3.y * e7.gnormx - u3.x * e7.gnormy;
				e7.tp1 = v9.y * e7.gnormx - v9.x * e7.gnormy;
			}
			var s13 = s1;
			var s23 = s2;
			var w11 = c1;
			var w21 = c2;
			var sep2;
			if(s13.type == 0 && s23.type == 0) {
				var c12 = s13.circle;
				var c22 = s23.circle;
				var dist2;
				var nx7 = 0.0;
				var ny3 = 0.0;
				nx7 = c22.worldCOMx - c12.worldCOMx;
				ny3 = c22.worldCOMy - c12.worldCOMy;
				var len3 = Math.sqrt(nx7 * nx7 + ny3 * ny3);
				dist2 = len3 - (c12.radius + c22.radius);
				if(dist2 < 1e100) {
					if(len3 == 0) {
						nx7 = 1;
						ny3 = 0;
					} else {
						var t28 = 1.0 / len3;
						nx7 *= t28;
						ny3 *= t28;
					}
					var t29 = c12.radius;
					w11.x = c12.worldCOMx + nx7 * t29;
					w11.y = c12.worldCOMy + ny3 * t29;
					var t30 = -c22.radius;
					w21.x = c22.worldCOMx + nx7 * t30;
					w21.y = c22.worldCOMy + ny3 * t30;
					axis.x = nx7;
					axis.y = ny3;
				}
				sep2 = dist2;
			} else {
				var swapped1 = false;
				if(s13.type == 0 && s23.type == 1) {
					var tmp3 = s13;
					s13 = s23;
					s23 = tmp3;
					var tmp21 = w11;
					w11 = w21;
					w21 = tmp21;
					swapped1 = true;
				}
				if(s13.type == 1 && s23.type == 0) {
					var poly1 = s13.polygon;
					var circle1 = s23.circle;
					var best2 = -1e+100;
					var a01 = null;
					var cx_ite14 = poly1.edges.head;
					while(cx_ite14 != null) {
						var a6 = cx_ite14.elt;
						var dist3 = a6.gnormx * circle1.worldCOMx + a6.gnormy * circle1.worldCOMy - a6.gprojection - circle1.radius;
						if(dist3 > 1e100) {
							best2 = dist3;
							break;
						}
						if(dist3 > 0) {
							if(dist3 > best2) {
								best2 = dist3;
								a01 = a6;
							}
						} else if(best2 < 0 && dist3 > best2) {
							best2 = dist3;
							a01 = a6;
						}
						cx_ite14 = cx_ite14.next;
					}
					if(best2 < 1e100) {
						var v02 = a01.gp0;
						var v13 = a01.gp1;
						var dt5 = circle1.worldCOMy * a01.gnormx - circle1.worldCOMx * a01.gnormy;
						if(dt5 <= v02.y * a01.gnormx - v02.x * a01.gnormy) {
							var nx8 = 0.0;
							var ny4 = 0.0;
							nx8 = circle1.worldCOMx - v02.x;
							ny4 = circle1.worldCOMy - v02.y;
							var len4 = Math.sqrt(nx8 * nx8 + ny4 * ny4);
							best2 = len4 - circle1.radius;
							if(best2 < 1e100) {
								if(len4 == 0) {
									nx8 = 1;
									ny4 = 0;
								} else {
									var t31 = 1.0 / len4;
									nx8 *= t31;
									ny4 *= t31;
								}
								var t32 = 0;
								w11.x = v02.x + nx8 * t32;
								w11.y = v02.y + ny4 * t32;
								var t33 = -circle1.radius;
								w21.x = circle1.worldCOMx + nx8 * t33;
								w21.y = circle1.worldCOMy + ny4 * t33;
								axis.x = nx8;
								axis.y = ny4;
							}
						} else if(dt5 >= v13.y * a01.gnormx - v13.x * a01.gnormy) {
							var nx9 = 0.0;
							var ny5 = 0.0;
							nx9 = circle1.worldCOMx - v13.x;
							ny5 = circle1.worldCOMy - v13.y;
							var len5 = Math.sqrt(nx9 * nx9 + ny5 * ny5);
							best2 = len5 - circle1.radius;
							if(best2 < 1e100) {
								if(len5 == 0) {
									nx9 = 1;
									ny5 = 0;
								} else {
									var t34 = 1.0 / len5;
									nx9 *= t34;
									ny5 *= t34;
								}
								var t35 = 0;
								w11.x = v13.x + nx9 * t35;
								w11.y = v13.y + ny5 * t35;
								var t36 = -circle1.radius;
								w21.x = circle1.worldCOMx + nx9 * t36;
								w21.y = circle1.worldCOMy + ny5 * t36;
								axis.x = nx9;
								axis.y = ny5;
							}
						} else {
							var t37 = -circle1.radius;
							w21.x = circle1.worldCOMx + a01.gnormx * t37;
							w21.y = circle1.worldCOMy + a01.gnormy * t37;
							var t38 = -best2;
							w11.x = w21.x + a01.gnormx * t38;
							w11.y = w21.y + a01.gnormy * t38;
							axis.x = a01.gnormx;
							axis.y = a01.gnormy;
						}
					}
					if(swapped1) {
						axis.x = -axis.x;
						axis.y = -axis.y;
					}
					sep2 = best2;
				} else {
					var p12 = s13.polygon;
					var p22 = s23.polygon;
					var best3 = -1e+100;
					var a11 = null;
					var a21 = null;
					var besti1 = 0;
					var cx_ite15 = p12.edges.head;
					while(cx_ite15 != null) {
						var a7 = cx_ite15.elt;
						var min3 = 1e100;
						var cx_ite16 = p22.gverts.next;
						while(cx_ite16 != null) {
							var v10 = cx_ite16;
							var k3 = a7.gnormx * v10.x + a7.gnormy * v10.y;
							if(k3 < min3) {
								min3 = k3;
							}
							cx_ite16 = cx_ite16.next;
						}
						min3 -= a7.gprojection;
						if(min3 > 1e100) {
							best3 = min3;
							break;
						}
						if(min3 > 0) {
							if(min3 > best3) {
								best3 = min3;
								a11 = a7;
								besti1 = 1;
							}
						} else if(best3 < 0 && min3 > best3) {
							best3 = min3;
							a11 = a7;
							besti1 = 1;
						}
						cx_ite15 = cx_ite15.next;
					}
					if(best3 < 1e100) {
						var cx_ite17 = p22.edges.head;
						while(cx_ite17 != null) {
							var a8 = cx_ite17.elt;
							var min4 = 1e100;
							var cx_ite18 = p12.gverts.next;
							while(cx_ite18 != null) {
								var v14 = cx_ite18;
								var k4 = a8.gnormx * v14.x + a8.gnormy * v14.y;
								if(k4 < min4) {
									min4 = k4;
								}
								cx_ite18 = cx_ite18.next;
							}
							min4 -= a8.gprojection;
							if(min4 > 1e100) {
								best3 = min4;
								break;
							}
							if(min4 > 0) {
								if(min4 > best3) {
									best3 = min4;
									a21 = a8;
									besti1 = 2;
								}
							} else if(best3 < 0 && min4 > best3) {
								best3 = min4;
								a21 = a8;
								besti1 = 2;
							}
							cx_ite17 = cx_ite17.next;
						}
						if(best3 < 1e100) {
							var q12;
							var q21;
							var ax1;
							if(besti1 == 1) {
								q12 = p12;
								q21 = p22;
								ax1 = a11;
							} else {
								q12 = p22;
								q21 = p12;
								ax1 = a21;
								var tmp4 = w11;
								w11 = w21;
								w21 = tmp4;
								swapped1 = !swapped1;
							}
							var ay1 = null;
							var min5 = 1e100;
							var cx_ite19 = q21.edges.head;
							while(cx_ite19 != null) {
								var a9 = cx_ite19.elt;
								var k5 = ax1.gnormx * a9.gnormx + ax1.gnormy * a9.gnormy;
								if(k5 < min5) {
									min5 = k5;
									ay1 = a9;
								}
								cx_ite19 = cx_ite19.next;
							}
							if(swapped1) {
								axis.x = -ax1.gnormx;
								axis.y = -ax1.gnormy;
							} else {
								axis.x = ax1.gnormx;
								axis.y = ax1.gnormy;
							}
							if(best3 >= 0) {
								var v03 = ax1.gp0;
								var v15 = ax1.gp1;
								var q01 = ay1.gp0;
								var q13 = ay1.gp1;
								var vx1 = 0.0;
								var vy1 = 0.0;
								var qx1 = 0.0;
								var qy1 = 0.0;
								vx1 = v15.x - v03.x;
								vy1 = v15.y - v03.y;
								qx1 = q13.x - q01.x;
								qy1 = q13.y - q01.y;
								var vdot1 = 1 / (vx1 * vx1 + vy1 * vy1);
								var qdot1 = 1 / (qx1 * qx1 + qy1 * qy1);
								var t110 = -(vx1 * (v03.x - q01.x) + vy1 * (v03.y - q01.y)) * vdot1;
								var t210 = -(vx1 * (v03.x - q13.x) + vy1 * (v03.y - q13.y)) * vdot1;
								var s14 = -(qx1 * (q01.x - v03.x) + qy1 * (q01.y - v03.y)) * qdot1;
								var s24 = -(qx1 * (q01.x - v15.x) + qy1 * (q01.y - v15.y)) * qdot1;
								if(t110 < 0) {
									t110 = 0;
								} else if(t110 > 1) {
									t110 = 1;
								}
								if(t210 < 0) {
									t210 = 0;
								} else if(t210 > 1) {
									t210 = 1;
								}
								if(s14 < 0) {
									s14 = 0;
								} else if(s14 > 1) {
									s14 = 1;
								}
								if(s24 < 0) {
									s24 = 0;
								} else if(s24 > 1) {
									s24 = 1;
								}
								var f1x1 = 0.0;
								var f1y1 = 0.0;
								var t39 = t110;
								f1x1 = v03.x + vx1 * t39;
								f1y1 = v03.y + vy1 * t39;
								var f2x1 = 0.0;
								var f2y1 = 0.0;
								var t40 = t210;
								f2x1 = v03.x + vx1 * t40;
								f2y1 = v03.y + vy1 * t40;
								var g1x1 = 0.0;
								var g1y1 = 0.0;
								var t41 = s14;
								g1x1 = q01.x + qx1 * t41;
								g1y1 = q01.y + qy1 * t41;
								var g2x1 = 0.0;
								var g2y1 = 0.0;
								var t42 = s24;
								g2x1 = q01.x + qx1 * t42;
								g2y1 = q01.y + qy1 * t42;
								var dx4 = 0.0;
								var dy4 = 0.0;
								dx4 = f1x1 - q01.x;
								dy4 = f1y1 - q01.y;
								var d12 = dx4 * dx4 + dy4 * dy4;
								var dx5 = 0.0;
								var dy5 = 0.0;
								dx5 = f2x1 - q13.x;
								dy5 = f2y1 - q13.y;
								var d25 = dx5 * dx5 + dy5 * dy5;
								var dx6 = 0.0;
								var dy6 = 0.0;
								dx6 = g1x1 - v03.x;
								dy6 = g1y1 - v03.y;
								var e12 = dx6 * dx6 + dy6 * dy6;
								var dx7 = 0.0;
								var dy7 = 0.0;
								dx7 = g2x1 - v15.x;
								dy7 = g2y1 - v15.y;
								var e22 = dx7 * dx7 + dy7 * dy7;
								var minfx1 = 0.0;
								var minfy1 = 0.0;
								var minq1 = null;
								if(d12 < d25) {
									minfx1 = f1x1;
									minfy1 = f1y1;
									minq1 = q01;
								} else {
									minfx1 = f2x1;
									minfy1 = f2y1;
									minq1 = q13;
									d12 = d25;
								}
								var mingx1 = 0.0;
								var mingy1 = 0.0;
								var minv1 = null;
								if(e12 < e22) {
									mingx1 = g1x1;
									mingy1 = g1y1;
									minv1 = v03;
								} else {
									mingx1 = g2x1;
									mingy1 = g2y1;
									minv1 = v15;
									e12 = e22;
								}
								if(d12 < e12) {
									w11.x = minfx1;
									w11.y = minfy1;
									w21.x = minq1.x;
									w21.y = minq1.y;
									best3 = Math.sqrt(d12);
								} else {
									w21.x = mingx1;
									w21.y = mingy1;
									w11.x = minv1.x;
									w11.y = minv1.y;
									best3 = Math.sqrt(e12);
								}
								if(best3 != 0) {
									axis.x = w21.x - w11.x;
									axis.y = w21.y - w11.y;
									var t43 = 1.0 / best3;
									axis.x *= t43;
									axis.y *= t43;
									if(swapped1) {
										axis.x = -axis.x;
										axis.y = -axis.y;
									}
								}
								sep2 = best3;
							} else {
								var c0x1 = 0.0;
								var c0y1 = 0.0;
								c0x1 = ay1.gp0.x;
								c0y1 = ay1.gp0.y;
								var c1x1 = 0.0;
								var c1y1 = 0.0;
								c1x1 = ay1.gp1.x;
								c1y1 = ay1.gp1.y;
								var dvx1 = 0.0;
								var dvy1 = 0.0;
								dvx1 = c1x1 - c0x1;
								dvy1 = c1y1 - c0y1;
								var d01 = ax1.gnormy * c0x1 - ax1.gnormx * c0y1;
								var d13 = ax1.gnormy * c1x1 - ax1.gnormx * c1y1;
								var den1 = 1 / (d13 - d01);
								var t44 = (-ax1.tp1 - d01) * den1;
								if(t44 > nape_Config.epsilon) {
									var t45 = t44;
									c0x1 += dvx1 * t45;
									c0y1 += dvy1 * t45;
								}
								var t46 = (-ax1.tp0 - d13) * den1;
								if(t46 < -nape_Config.epsilon) {
									var t47 = t46;
									c1x1 += dvx1 * t47;
									c1y1 += dvy1 * t47;
								}
								var c0d1 = c0x1 * ax1.gnormx + c0y1 * ax1.gnormy - ax1.gprojection;
								var c1d1 = c1x1 * ax1.gnormx + c1y1 * ax1.gnormy - ax1.gprojection;
								if(c0d1 < c1d1) {
									w21.x = c0x1;
									w21.y = c0y1;
									var t48 = -c0d1;
									w11.x = w21.x + ax1.gnormx * t48;
									w11.y = w21.y + ax1.gnormy * t48;
									sep2 = c0d1;
								} else {
									w21.x = c1x1;
									w21.y = c1y1;
									var t49 = -c1d1;
									w11.x = w21.x + ax1.gnormx * t49;
									w11.y = w21.y + ax1.gnormy * t49;
									sep2 = c1d1;
								}
							}
						} else {
							sep2 = 1e100;
						}
					} else {
						sep2 = 1e100;
					}
				}
			}
			var sep3 = sep2 + negRadius;
			var dot1 = deltax * axis.x + deltay * axis.y;
			if(sep3 < nape_Config.distanceThresholdCCD) {
				if(userAPI) {
					break;
				}
				var d1x1 = 0.0;
				var d1y1 = 0.0;
				d1x1 = c1.x - b1.posx;
				d1y1 = c1.y - b1.posy;
				var d2x1 = 0.0;
				var d2y1 = 0.0;
				d2x1 = c2.x - b2.posx;
				d2y1 = c2.y - b2.posy;
				var proj1 = dot1 - b1.sweep_angvel * (axis.y * d1x1 - axis.x * d1y1) + b2.sweep_angvel * (axis.y * d2x1 - axis.x * d2y1);
				if(proj1 > 0) {
					toi.slipped = true;
				}
				if(proj1 <= 0 || sep3 < nape_Config.distanceThresholdCCD * 0.5) {
					break;
				}
			}
			curTOI = -1;
			break;
		}
		if(++curIter >= 40) {
			if(sep1 > negRadius) {
				toi.failed = true;
			}
			break;
		}
	}
	toi.toi = curTOI;
};
zpp_$nape_geom_ZPP_$SweepDistance.staticSweep = function(toi,timeStep,lowerBound,negRadius) {
	var s1 = toi.s1;
	var s2 = toi.s2;
	var b1 = s1.body;
	var b2 = s2.body;
	var deltax = 0.0;
	var deltay = 0.0;
	deltax = -b1.velx;
	deltay = -b1.vely;
	var ang1 = b1.sweep_angvel;
	if(ang1 < 0) {
		ang1 = -ang1;
	}
	var angBias = s1.sweepCoef * ang1;
	var c1 = toi.c1;
	var c2 = toi.c2;
	var axis = toi.axis;
	var curTOI = lowerBound;
	var curIter = 0;
	while(true) {
		var dt = curTOI * timeStep;
		var delta = dt - b1.sweepTime;
		if(delta != 0) {
			b1.sweepTime = dt;
			var t = delta;
			b1.posx += b1.velx * t;
			b1.posy += b1.vely * t;
			if(b1.angvel != 0) {
				var dr = b1.sweep_angvel * delta;
				b1.rot += dr;
				if(dr * dr > 0.0001) {
					b1.axisx = Math.sin(b1.rot);
					b1.axisy = Math.cos(b1.rot);
				} else {
					var d2 = dr * dr;
					var p = 1 - 0.5 * d2;
					var m = 1 - d2 * d2 / 8;
					var nx = (p * b1.axisx + dr * b1.axisy) * m;
					b1.axisy = (p * b1.axisy - dr * b1.axisx) * m;
					b1.axisx = nx;
				}
			}
		}
		if(s1.type == 0) {
			s1.worldCOMx = b1.posx + (b1.axisy * s1.localCOMx - b1.axisx * s1.localCOMy);
			s1.worldCOMy = b1.posy + (s1.localCOMx * b1.axisx + s1.localCOMy * b1.axisy);
		} else {
			var p1 = s1.polygon;
			var li = p1.lverts.next;
			var cx_ite = p1.gverts.next;
			while(cx_ite != null) {
				var g = cx_ite;
				var l = li;
				li = li.next;
				g.x = b1.posx + (b1.axisy * l.x - b1.axisx * l.y);
				g.y = b1.posy + (l.x * b1.axisx + l.y * b1.axisy);
				cx_ite = cx_ite.next;
			}
			var ite = p1.edges.head;
			var cx_ite1 = p1.gverts.next;
			var u = cx_ite1;
			cx_ite1 = cx_ite1.next;
			while(cx_ite1 != null) {
				var v = cx_ite1;
				var e = ite.elt;
				ite = ite.next;
				e.gnormx = b1.axisy * e.lnormx - b1.axisx * e.lnormy;
				e.gnormy = e.lnormx * b1.axisx + e.lnormy * b1.axisy;
				e.gprojection = b1.posx * e.gnormx + b1.posy * e.gnormy + e.lprojection;
				e.tp0 = u.y * e.gnormx - u.x * e.gnormy;
				e.tp1 = v.y * e.gnormx - v.x * e.gnormy;
				u = v;
				cx_ite1 = cx_ite1.next;
			}
			var v1 = p1.gverts.next;
			var e1 = ite.elt;
			ite = ite.next;
			e1.gnormx = b1.axisy * e1.lnormx - b1.axisx * e1.lnormy;
			e1.gnormy = e1.lnormx * b1.axisx + e1.lnormy * b1.axisy;
			e1.gprojection = b1.posx * e1.gnormx + b1.posy * e1.gnormy + e1.lprojection;
			e1.tp0 = u.y * e1.gnormx - u.x * e1.gnormy;
			e1.tp1 = v1.y * e1.gnormx - v1.x * e1.gnormy;
		}
		var s11 = s1;
		var s21 = s2;
		var w1 = c1;
		var w2 = c2;
		var sep;
		if(s11.type == 0 && s21.type == 0) {
			var c11 = s11.circle;
			var c21 = s21.circle;
			var dist;
			var nx1 = 0.0;
			var ny = 0.0;
			nx1 = c21.worldCOMx - c11.worldCOMx;
			ny = c21.worldCOMy - c11.worldCOMy;
			var len = Math.sqrt(nx1 * nx1 + ny * ny);
			dist = len - (c11.radius + c21.radius);
			if(dist < 1e100) {
				if(len == 0) {
					nx1 = 1;
					ny = 0;
				} else {
					var t1 = 1.0 / len;
					nx1 *= t1;
					ny *= t1;
				}
				var t2 = c11.radius;
				w1.x = c11.worldCOMx + nx1 * t2;
				w1.y = c11.worldCOMy + ny * t2;
				var t3 = -c21.radius;
				w2.x = c21.worldCOMx + nx1 * t3;
				w2.y = c21.worldCOMy + ny * t3;
				axis.x = nx1;
				axis.y = ny;
			}
			sep = dist;
		} else {
			var swapped = false;
			if(s11.type == 0 && s21.type == 1) {
				var tmp = s11;
				s11 = s21;
				s21 = tmp;
				var tmp2 = w1;
				w1 = w2;
				w2 = tmp2;
				swapped = true;
			}
			if(s11.type == 1 && s21.type == 0) {
				var poly = s11.polygon;
				var circle = s21.circle;
				var best = -1e+100;
				var a0 = null;
				var cx_ite2 = poly.edges.head;
				while(cx_ite2 != null) {
					var a = cx_ite2.elt;
					var dist1 = a.gnormx * circle.worldCOMx + a.gnormy * circle.worldCOMy - a.gprojection - circle.radius;
					if(dist1 > 1e100) {
						best = dist1;
						break;
					}
					if(dist1 > 0) {
						if(dist1 > best) {
							best = dist1;
							a0 = a;
						}
					} else if(best < 0 && dist1 > best) {
						best = dist1;
						a0 = a;
					}
					cx_ite2 = cx_ite2.next;
				}
				if(best < 1e100) {
					var v0 = a0.gp0;
					var v11 = a0.gp1;
					var dt1 = circle.worldCOMy * a0.gnormx - circle.worldCOMx * a0.gnormy;
					if(dt1 <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
						var nx2 = 0.0;
						var ny1 = 0.0;
						nx2 = circle.worldCOMx - v0.x;
						ny1 = circle.worldCOMy - v0.y;
						var len1 = Math.sqrt(nx2 * nx2 + ny1 * ny1);
						best = len1 - circle.radius;
						if(best < 1e100) {
							if(len1 == 0) {
								nx2 = 1;
								ny1 = 0;
							} else {
								var t4 = 1.0 / len1;
								nx2 *= t4;
								ny1 *= t4;
							}
							var t5 = 0;
							w1.x = v0.x + nx2 * t5;
							w1.y = v0.y + ny1 * t5;
							var t6 = -circle.radius;
							w2.x = circle.worldCOMx + nx2 * t6;
							w2.y = circle.worldCOMy + ny1 * t6;
							axis.x = nx2;
							axis.y = ny1;
						}
					} else if(dt1 >= v11.y * a0.gnormx - v11.x * a0.gnormy) {
						var nx3 = 0.0;
						var ny2 = 0.0;
						nx3 = circle.worldCOMx - v11.x;
						ny2 = circle.worldCOMy - v11.y;
						var len2 = Math.sqrt(nx3 * nx3 + ny2 * ny2);
						best = len2 - circle.radius;
						if(best < 1e100) {
							if(len2 == 0) {
								nx3 = 1;
								ny2 = 0;
							} else {
								var t7 = 1.0 / len2;
								nx3 *= t7;
								ny2 *= t7;
							}
							var t8 = 0;
							w1.x = v11.x + nx3 * t8;
							w1.y = v11.y + ny2 * t8;
							var t9 = -circle.radius;
							w2.x = circle.worldCOMx + nx3 * t9;
							w2.y = circle.worldCOMy + ny2 * t9;
							axis.x = nx3;
							axis.y = ny2;
						}
					} else {
						var t10 = -circle.radius;
						w2.x = circle.worldCOMx + a0.gnormx * t10;
						w2.y = circle.worldCOMy + a0.gnormy * t10;
						var t11 = -best;
						w1.x = w2.x + a0.gnormx * t11;
						w1.y = w2.y + a0.gnormy * t11;
						axis.x = a0.gnormx;
						axis.y = a0.gnormy;
					}
				}
				if(swapped) {
					axis.x = -axis.x;
					axis.y = -axis.y;
				}
				sep = best;
			} else {
				var p11 = s11.polygon;
				var p2 = s21.polygon;
				var best1 = -1e+100;
				var a1 = null;
				var a2 = null;
				var besti = 0;
				var cx_ite3 = p11.edges.head;
				while(cx_ite3 != null) {
					var a3 = cx_ite3.elt;
					var min = 1e100;
					var cx_ite4 = p2.gverts.next;
					while(cx_ite4 != null) {
						var v2 = cx_ite4;
						var k = a3.gnormx * v2.x + a3.gnormy * v2.y;
						if(k < min) {
							min = k;
						}
						cx_ite4 = cx_ite4.next;
					}
					min -= a3.gprojection;
					if(min > 1e100) {
						best1 = min;
						break;
					}
					if(min > 0) {
						if(min > best1) {
							best1 = min;
							a1 = a3;
							besti = 1;
						}
					} else if(best1 < 0 && min > best1) {
						best1 = min;
						a1 = a3;
						besti = 1;
					}
					cx_ite3 = cx_ite3.next;
				}
				if(best1 < 1e100) {
					var cx_ite5 = p2.edges.head;
					while(cx_ite5 != null) {
						var a4 = cx_ite5.elt;
						var min1 = 1e100;
						var cx_ite6 = p11.gverts.next;
						while(cx_ite6 != null) {
							var v3 = cx_ite6;
							var k1 = a4.gnormx * v3.x + a4.gnormy * v3.y;
							if(k1 < min1) {
								min1 = k1;
							}
							cx_ite6 = cx_ite6.next;
						}
						min1 -= a4.gprojection;
						if(min1 > 1e100) {
							best1 = min1;
							break;
						}
						if(min1 > 0) {
							if(min1 > best1) {
								best1 = min1;
								a2 = a4;
								besti = 2;
							}
						} else if(best1 < 0 && min1 > best1) {
							best1 = min1;
							a2 = a4;
							besti = 2;
						}
						cx_ite5 = cx_ite5.next;
					}
					if(best1 < 1e100) {
						var q1;
						var q2;
						var ax;
						if(besti == 1) {
							q1 = p11;
							q2 = p2;
							ax = a1;
						} else {
							q1 = p2;
							q2 = p11;
							ax = a2;
							var tmp1 = w1;
							w1 = w2;
							w2 = tmp1;
							swapped = !swapped;
						}
						var ay = null;
						var min2 = 1e100;
						var cx_ite7 = q2.edges.head;
						while(cx_ite7 != null) {
							var a5 = cx_ite7.elt;
							var k2 = ax.gnormx * a5.gnormx + ax.gnormy * a5.gnormy;
							if(k2 < min2) {
								min2 = k2;
								ay = a5;
							}
							cx_ite7 = cx_ite7.next;
						}
						if(swapped) {
							axis.x = -ax.gnormx;
							axis.y = -ax.gnormy;
						} else {
							axis.x = ax.gnormx;
							axis.y = ax.gnormy;
						}
						if(best1 >= 0) {
							var v01 = ax.gp0;
							var v12 = ax.gp1;
							var q0 = ay.gp0;
							var q11 = ay.gp1;
							var vx = 0.0;
							var vy = 0.0;
							var qx = 0.0;
							var qy = 0.0;
							vx = v12.x - v01.x;
							vy = v12.y - v01.y;
							qx = q11.x - q0.x;
							qy = q11.y - q0.y;
							var vdot = 1 / (vx * vx + vy * vy);
							var qdot = 1 / (qx * qx + qy * qy);
							var t12 = -(vx * (v01.x - q0.x) + vy * (v01.y - q0.y)) * vdot;
							var t21 = -(vx * (v01.x - q11.x) + vy * (v01.y - q11.y)) * vdot;
							var s12 = -(qx * (q0.x - v01.x) + qy * (q0.y - v01.y)) * qdot;
							var s22 = -(qx * (q0.x - v12.x) + qy * (q0.y - v12.y)) * qdot;
							if(t12 < 0) {
								t12 = 0;
							} else if(t12 > 1) {
								t12 = 1;
							}
							if(t21 < 0) {
								t21 = 0;
							} else if(t21 > 1) {
								t21 = 1;
							}
							if(s12 < 0) {
								s12 = 0;
							} else if(s12 > 1) {
								s12 = 1;
							}
							if(s22 < 0) {
								s22 = 0;
							} else if(s22 > 1) {
								s22 = 1;
							}
							var f1x = 0.0;
							var f1y = 0.0;
							var t13 = t12;
							f1x = v01.x + vx * t13;
							f1y = v01.y + vy * t13;
							var f2x = 0.0;
							var f2y = 0.0;
							var t14 = t21;
							f2x = v01.x + vx * t14;
							f2y = v01.y + vy * t14;
							var g1x = 0.0;
							var g1y = 0.0;
							var t15 = s12;
							g1x = q0.x + qx * t15;
							g1y = q0.y + qy * t15;
							var g2x = 0.0;
							var g2y = 0.0;
							var t16 = s22;
							g2x = q0.x + qx * t16;
							g2y = q0.y + qy * t16;
							var dx = 0.0;
							var dy = 0.0;
							dx = f1x - q0.x;
							dy = f1y - q0.y;
							var d1 = dx * dx + dy * dy;
							var dx1 = 0.0;
							var dy1 = 0.0;
							dx1 = f2x - q11.x;
							dy1 = f2y - q11.y;
							var d21 = dx1 * dx1 + dy1 * dy1;
							var dx2 = 0.0;
							var dy2 = 0.0;
							dx2 = g1x - v01.x;
							dy2 = g1y - v01.y;
							var e11 = dx2 * dx2 + dy2 * dy2;
							var dx3 = 0.0;
							var dy3 = 0.0;
							dx3 = g2x - v12.x;
							dy3 = g2y - v12.y;
							var e2 = dx3 * dx3 + dy3 * dy3;
							var minfx = 0.0;
							var minfy = 0.0;
							var minq = null;
							if(d1 < d21) {
								minfx = f1x;
								minfy = f1y;
								minq = q0;
							} else {
								minfx = f2x;
								minfy = f2y;
								minq = q11;
								d1 = d21;
							}
							var mingx = 0.0;
							var mingy = 0.0;
							var minv = null;
							if(e11 < e2) {
								mingx = g1x;
								mingy = g1y;
								minv = v01;
							} else {
								mingx = g2x;
								mingy = g2y;
								minv = v12;
								e11 = e2;
							}
							if(d1 < e11) {
								w1.x = minfx;
								w1.y = minfy;
								w2.x = minq.x;
								w2.y = minq.y;
								best1 = Math.sqrt(d1);
							} else {
								w2.x = mingx;
								w2.y = mingy;
								w1.x = minv.x;
								w1.y = minv.y;
								best1 = Math.sqrt(e11);
							}
							if(best1 != 0) {
								axis.x = w2.x - w1.x;
								axis.y = w2.y - w1.y;
								var t17 = 1.0 / best1;
								axis.x *= t17;
								axis.y *= t17;
								if(swapped) {
									axis.x = -axis.x;
									axis.y = -axis.y;
								}
							}
							sep = best1;
						} else {
							var c0x = 0.0;
							var c0y = 0.0;
							c0x = ay.gp0.x;
							c0y = ay.gp0.y;
							var c1x = 0.0;
							var c1y = 0.0;
							c1x = ay.gp1.x;
							c1y = ay.gp1.y;
							var dvx = 0.0;
							var dvy = 0.0;
							dvx = c1x - c0x;
							dvy = c1y - c0y;
							var d0 = ax.gnormy * c0x - ax.gnormx * c0y;
							var d11 = ax.gnormy * c1x - ax.gnormx * c1y;
							var den = 1 / (d11 - d0);
							var t18 = (-ax.tp1 - d0) * den;
							if(t18 > nape_Config.epsilon) {
								var t19 = t18;
								c0x += dvx * t19;
								c0y += dvy * t19;
							}
							var t20 = (-ax.tp0 - d11) * den;
							if(t20 < -nape_Config.epsilon) {
								var t22 = t20;
								c1x += dvx * t22;
								c1y += dvy * t22;
							}
							var c0d = c0x * ax.gnormx + c0y * ax.gnormy - ax.gprojection;
							var c1d = c1x * ax.gnormx + c1y * ax.gnormy - ax.gprojection;
							if(c0d < c1d) {
								w2.x = c0x;
								w2.y = c0y;
								var t23 = -c0d;
								w1.x = w2.x + ax.gnormx * t23;
								w1.y = w2.y + ax.gnormy * t23;
								sep = c0d;
							} else {
								w2.x = c1x;
								w2.y = c1y;
								var t24 = -c1d;
								w1.x = w2.x + ax.gnormx * t24;
								w1.y = w2.y + ax.gnormy * t24;
								sep = c1d;
							}
						}
					} else {
						sep = 1e100;
					}
				} else {
					sep = 1e100;
				}
			}
		}
		var sep1 = sep + negRadius;
		var dot = deltax * axis.x + deltay * axis.y;
		if(sep1 < nape_Config.distanceThresholdCCD) {
			var d1x = 0.0;
			var d1y = 0.0;
			d1x = c1.x - b1.posx;
			d1y = c1.y - b1.posy;
			var proj = dot - b1.sweep_angvel * (axis.y * d1x - axis.x * d1y);
			if(proj > 0) {
				toi.slipped = true;
			}
			if(proj <= 0 || sep1 < nape_Config.distanceThresholdCCD * 0.5) {
				break;
			}
		}
		var denom = (angBias - dot) * timeStep;
		if(denom <= 0) {
			curTOI = -1;
			break;
		}
		var delta1 = sep1 / denom;
		if(delta1 < 1e-6) {
			delta1 = 1e-6;
		}
		curTOI += delta1;
		if(curTOI >= 1) {
			curTOI = 1;
			var dt2 = curTOI * timeStep;
			var delta2 = dt2 - b1.sweepTime;
			if(delta2 != 0) {
				b1.sweepTime = dt2;
				var t25 = delta2;
				b1.posx += b1.velx * t25;
				b1.posy += b1.vely * t25;
				if(b1.angvel != 0) {
					var dr1 = b1.sweep_angvel * delta2;
					b1.rot += dr1;
					if(dr1 * dr1 > 0.0001) {
						b1.axisx = Math.sin(b1.rot);
						b1.axisy = Math.cos(b1.rot);
					} else {
						var d22 = dr1 * dr1;
						var p3 = 1 - 0.5 * d22;
						var m1 = 1 - d22 * d22 / 8;
						var nx4 = (p3 * b1.axisx + dr1 * b1.axisy) * m1;
						b1.axisy = (p3 * b1.axisy - dr1 * b1.axisx) * m1;
						b1.axisx = nx4;
					}
				}
			}
			if(s1.type == 0) {
				s1.worldCOMx = b1.posx + (b1.axisy * s1.localCOMx - b1.axisx * s1.localCOMy);
				s1.worldCOMy = b1.posy + (s1.localCOMx * b1.axisx + s1.localCOMy * b1.axisy);
			} else {
				var p4 = s1.polygon;
				var li1 = p4.lverts.next;
				var cx_ite8 = p4.gverts.next;
				while(cx_ite8 != null) {
					var g1 = cx_ite8;
					var l1 = li1;
					li1 = li1.next;
					g1.x = b1.posx + (b1.axisy * l1.x - b1.axisx * l1.y);
					g1.y = b1.posy + (l1.x * b1.axisx + l1.y * b1.axisy);
					cx_ite8 = cx_ite8.next;
				}
				var ite1 = p4.edges.head;
				var cx_ite9 = p4.gverts.next;
				var u1 = cx_ite9;
				cx_ite9 = cx_ite9.next;
				while(cx_ite9 != null) {
					var v4 = cx_ite9;
					var e3 = ite1.elt;
					ite1 = ite1.next;
					e3.gnormx = b1.axisy * e3.lnormx - b1.axisx * e3.lnormy;
					e3.gnormy = e3.lnormx * b1.axisx + e3.lnormy * b1.axisy;
					e3.gprojection = b1.posx * e3.gnormx + b1.posy * e3.gnormy + e3.lprojection;
					e3.tp0 = u1.y * e3.gnormx - u1.x * e3.gnormy;
					e3.tp1 = v4.y * e3.gnormx - v4.x * e3.gnormy;
					u1 = v4;
					cx_ite9 = cx_ite9.next;
				}
				var v5 = p4.gverts.next;
				var e4 = ite1.elt;
				ite1 = ite1.next;
				e4.gnormx = b1.axisy * e4.lnormx - b1.axisx * e4.lnormy;
				e4.gnormy = e4.lnormx * b1.axisx + e4.lnormy * b1.axisy;
				e4.gprojection = b1.posx * e4.gnormx + b1.posy * e4.gnormy + e4.lprojection;
				e4.tp0 = u1.y * e4.gnormx - u1.x * e4.gnormy;
				e4.tp1 = v5.y * e4.gnormx - v5.x * e4.gnormy;
			}
			var s13 = s1;
			var s23 = s2;
			var w11 = c1;
			var w21 = c2;
			var sep2;
			if(s13.type == 0 && s23.type == 0) {
				var c12 = s13.circle;
				var c22 = s23.circle;
				var dist2;
				var nx5 = 0.0;
				var ny3 = 0.0;
				nx5 = c22.worldCOMx - c12.worldCOMx;
				ny3 = c22.worldCOMy - c12.worldCOMy;
				var len3 = Math.sqrt(nx5 * nx5 + ny3 * ny3);
				dist2 = len3 - (c12.radius + c22.radius);
				if(dist2 < 1e100) {
					if(len3 == 0) {
						nx5 = 1;
						ny3 = 0;
					} else {
						var t26 = 1.0 / len3;
						nx5 *= t26;
						ny3 *= t26;
					}
					var t27 = c12.radius;
					w11.x = c12.worldCOMx + nx5 * t27;
					w11.y = c12.worldCOMy + ny3 * t27;
					var t28 = -c22.radius;
					w21.x = c22.worldCOMx + nx5 * t28;
					w21.y = c22.worldCOMy + ny3 * t28;
					axis.x = nx5;
					axis.y = ny3;
				}
				sep2 = dist2;
			} else {
				var swapped1 = false;
				if(s13.type == 0 && s23.type == 1) {
					var tmp3 = s13;
					s13 = s23;
					s23 = tmp3;
					var tmp21 = w11;
					w11 = w21;
					w21 = tmp21;
					swapped1 = true;
				}
				if(s13.type == 1 && s23.type == 0) {
					var poly1 = s13.polygon;
					var circle1 = s23.circle;
					var best2 = -1e+100;
					var a01 = null;
					var cx_ite10 = poly1.edges.head;
					while(cx_ite10 != null) {
						var a6 = cx_ite10.elt;
						var dist3 = a6.gnormx * circle1.worldCOMx + a6.gnormy * circle1.worldCOMy - a6.gprojection - circle1.radius;
						if(dist3 > 1e100) {
							best2 = dist3;
							break;
						}
						if(dist3 > 0) {
							if(dist3 > best2) {
								best2 = dist3;
								a01 = a6;
							}
						} else if(best2 < 0 && dist3 > best2) {
							best2 = dist3;
							a01 = a6;
						}
						cx_ite10 = cx_ite10.next;
					}
					if(best2 < 1e100) {
						var v02 = a01.gp0;
						var v13 = a01.gp1;
						var dt3 = circle1.worldCOMy * a01.gnormx - circle1.worldCOMx * a01.gnormy;
						if(dt3 <= v02.y * a01.gnormx - v02.x * a01.gnormy) {
							var nx6 = 0.0;
							var ny4 = 0.0;
							nx6 = circle1.worldCOMx - v02.x;
							ny4 = circle1.worldCOMy - v02.y;
							var len4 = Math.sqrt(nx6 * nx6 + ny4 * ny4);
							best2 = len4 - circle1.radius;
							if(best2 < 1e100) {
								if(len4 == 0) {
									nx6 = 1;
									ny4 = 0;
								} else {
									var t29 = 1.0 / len4;
									nx6 *= t29;
									ny4 *= t29;
								}
								var t30 = 0;
								w11.x = v02.x + nx6 * t30;
								w11.y = v02.y + ny4 * t30;
								var t31 = -circle1.radius;
								w21.x = circle1.worldCOMx + nx6 * t31;
								w21.y = circle1.worldCOMy + ny4 * t31;
								axis.x = nx6;
								axis.y = ny4;
							}
						} else if(dt3 >= v13.y * a01.gnormx - v13.x * a01.gnormy) {
							var nx7 = 0.0;
							var ny5 = 0.0;
							nx7 = circle1.worldCOMx - v13.x;
							ny5 = circle1.worldCOMy - v13.y;
							var len5 = Math.sqrt(nx7 * nx7 + ny5 * ny5);
							best2 = len5 - circle1.radius;
							if(best2 < 1e100) {
								if(len5 == 0) {
									nx7 = 1;
									ny5 = 0;
								} else {
									var t32 = 1.0 / len5;
									nx7 *= t32;
									ny5 *= t32;
								}
								var t33 = 0;
								w11.x = v13.x + nx7 * t33;
								w11.y = v13.y + ny5 * t33;
								var t34 = -circle1.radius;
								w21.x = circle1.worldCOMx + nx7 * t34;
								w21.y = circle1.worldCOMy + ny5 * t34;
								axis.x = nx7;
								axis.y = ny5;
							}
						} else {
							var t35 = -circle1.radius;
							w21.x = circle1.worldCOMx + a01.gnormx * t35;
							w21.y = circle1.worldCOMy + a01.gnormy * t35;
							var t36 = -best2;
							w11.x = w21.x + a01.gnormx * t36;
							w11.y = w21.y + a01.gnormy * t36;
							axis.x = a01.gnormx;
							axis.y = a01.gnormy;
						}
					}
					if(swapped1) {
						axis.x = -axis.x;
						axis.y = -axis.y;
					}
					sep2 = best2;
				} else {
					var p12 = s13.polygon;
					var p21 = s23.polygon;
					var best3 = -1e+100;
					var a11 = null;
					var a21 = null;
					var besti1 = 0;
					var cx_ite11 = p12.edges.head;
					while(cx_ite11 != null) {
						var a7 = cx_ite11.elt;
						var min3 = 1e100;
						var cx_ite12 = p21.gverts.next;
						while(cx_ite12 != null) {
							var v6 = cx_ite12;
							var k3 = a7.gnormx * v6.x + a7.gnormy * v6.y;
							if(k3 < min3) {
								min3 = k3;
							}
							cx_ite12 = cx_ite12.next;
						}
						min3 -= a7.gprojection;
						if(min3 > 1e100) {
							best3 = min3;
							break;
						}
						if(min3 > 0) {
							if(min3 > best3) {
								best3 = min3;
								a11 = a7;
								besti1 = 1;
							}
						} else if(best3 < 0 && min3 > best3) {
							best3 = min3;
							a11 = a7;
							besti1 = 1;
						}
						cx_ite11 = cx_ite11.next;
					}
					if(best3 < 1e100) {
						var cx_ite13 = p21.edges.head;
						while(cx_ite13 != null) {
							var a8 = cx_ite13.elt;
							var min4 = 1e100;
							var cx_ite14 = p12.gverts.next;
							while(cx_ite14 != null) {
								var v7 = cx_ite14;
								var k4 = a8.gnormx * v7.x + a8.gnormy * v7.y;
								if(k4 < min4) {
									min4 = k4;
								}
								cx_ite14 = cx_ite14.next;
							}
							min4 -= a8.gprojection;
							if(min4 > 1e100) {
								best3 = min4;
								break;
							}
							if(min4 > 0) {
								if(min4 > best3) {
									best3 = min4;
									a21 = a8;
									besti1 = 2;
								}
							} else if(best3 < 0 && min4 > best3) {
								best3 = min4;
								a21 = a8;
								besti1 = 2;
							}
							cx_ite13 = cx_ite13.next;
						}
						if(best3 < 1e100) {
							var q12;
							var q21;
							var ax1;
							if(besti1 == 1) {
								q12 = p12;
								q21 = p21;
								ax1 = a11;
							} else {
								q12 = p21;
								q21 = p12;
								ax1 = a21;
								var tmp4 = w11;
								w11 = w21;
								w21 = tmp4;
								swapped1 = !swapped1;
							}
							var ay1 = null;
							var min5 = 1e100;
							var cx_ite15 = q21.edges.head;
							while(cx_ite15 != null) {
								var a9 = cx_ite15.elt;
								var k5 = ax1.gnormx * a9.gnormx + ax1.gnormy * a9.gnormy;
								if(k5 < min5) {
									min5 = k5;
									ay1 = a9;
								}
								cx_ite15 = cx_ite15.next;
							}
							if(swapped1) {
								axis.x = -ax1.gnormx;
								axis.y = -ax1.gnormy;
							} else {
								axis.x = ax1.gnormx;
								axis.y = ax1.gnormy;
							}
							if(best3 >= 0) {
								var v03 = ax1.gp0;
								var v14 = ax1.gp1;
								var q01 = ay1.gp0;
								var q13 = ay1.gp1;
								var vx1 = 0.0;
								var vy1 = 0.0;
								var qx1 = 0.0;
								var qy1 = 0.0;
								vx1 = v14.x - v03.x;
								vy1 = v14.y - v03.y;
								qx1 = q13.x - q01.x;
								qy1 = q13.y - q01.y;
								var vdot1 = 1 / (vx1 * vx1 + vy1 * vy1);
								var qdot1 = 1 / (qx1 * qx1 + qy1 * qy1);
								var t110 = -(vx1 * (v03.x - q01.x) + vy1 * (v03.y - q01.y)) * vdot1;
								var t210 = -(vx1 * (v03.x - q13.x) + vy1 * (v03.y - q13.y)) * vdot1;
								var s14 = -(qx1 * (q01.x - v03.x) + qy1 * (q01.y - v03.y)) * qdot1;
								var s24 = -(qx1 * (q01.x - v14.x) + qy1 * (q01.y - v14.y)) * qdot1;
								if(t110 < 0) {
									t110 = 0;
								} else if(t110 > 1) {
									t110 = 1;
								}
								if(t210 < 0) {
									t210 = 0;
								} else if(t210 > 1) {
									t210 = 1;
								}
								if(s14 < 0) {
									s14 = 0;
								} else if(s14 > 1) {
									s14 = 1;
								}
								if(s24 < 0) {
									s24 = 0;
								} else if(s24 > 1) {
									s24 = 1;
								}
								var f1x1 = 0.0;
								var f1y1 = 0.0;
								var t37 = t110;
								f1x1 = v03.x + vx1 * t37;
								f1y1 = v03.y + vy1 * t37;
								var f2x1 = 0.0;
								var f2y1 = 0.0;
								var t38 = t210;
								f2x1 = v03.x + vx1 * t38;
								f2y1 = v03.y + vy1 * t38;
								var g1x1 = 0.0;
								var g1y1 = 0.0;
								var t39 = s14;
								g1x1 = q01.x + qx1 * t39;
								g1y1 = q01.y + qy1 * t39;
								var g2x1 = 0.0;
								var g2y1 = 0.0;
								var t40 = s24;
								g2x1 = q01.x + qx1 * t40;
								g2y1 = q01.y + qy1 * t40;
								var dx4 = 0.0;
								var dy4 = 0.0;
								dx4 = f1x1 - q01.x;
								dy4 = f1y1 - q01.y;
								var d12 = dx4 * dx4 + dy4 * dy4;
								var dx5 = 0.0;
								var dy5 = 0.0;
								dx5 = f2x1 - q13.x;
								dy5 = f2y1 - q13.y;
								var d23 = dx5 * dx5 + dy5 * dy5;
								var dx6 = 0.0;
								var dy6 = 0.0;
								dx6 = g1x1 - v03.x;
								dy6 = g1y1 - v03.y;
								var e12 = dx6 * dx6 + dy6 * dy6;
								var dx7 = 0.0;
								var dy7 = 0.0;
								dx7 = g2x1 - v14.x;
								dy7 = g2y1 - v14.y;
								var e21 = dx7 * dx7 + dy7 * dy7;
								var minfx1 = 0.0;
								var minfy1 = 0.0;
								var minq1 = null;
								if(d12 < d23) {
									minfx1 = f1x1;
									minfy1 = f1y1;
									minq1 = q01;
								} else {
									minfx1 = f2x1;
									minfy1 = f2y1;
									minq1 = q13;
									d12 = d23;
								}
								var mingx1 = 0.0;
								var mingy1 = 0.0;
								var minv1 = null;
								if(e12 < e21) {
									mingx1 = g1x1;
									mingy1 = g1y1;
									minv1 = v03;
								} else {
									mingx1 = g2x1;
									mingy1 = g2y1;
									minv1 = v14;
									e12 = e21;
								}
								if(d12 < e12) {
									w11.x = minfx1;
									w11.y = minfy1;
									w21.x = minq1.x;
									w21.y = minq1.y;
									best3 = Math.sqrt(d12);
								} else {
									w21.x = mingx1;
									w21.y = mingy1;
									w11.x = minv1.x;
									w11.y = minv1.y;
									best3 = Math.sqrt(e12);
								}
								if(best3 != 0) {
									axis.x = w21.x - w11.x;
									axis.y = w21.y - w11.y;
									var t41 = 1.0 / best3;
									axis.x *= t41;
									axis.y *= t41;
									if(swapped1) {
										axis.x = -axis.x;
										axis.y = -axis.y;
									}
								}
								sep2 = best3;
							} else {
								var c0x1 = 0.0;
								var c0y1 = 0.0;
								c0x1 = ay1.gp0.x;
								c0y1 = ay1.gp0.y;
								var c1x1 = 0.0;
								var c1y1 = 0.0;
								c1x1 = ay1.gp1.x;
								c1y1 = ay1.gp1.y;
								var dvx1 = 0.0;
								var dvy1 = 0.0;
								dvx1 = c1x1 - c0x1;
								dvy1 = c1y1 - c0y1;
								var d01 = ax1.gnormy * c0x1 - ax1.gnormx * c0y1;
								var d13 = ax1.gnormy * c1x1 - ax1.gnormx * c1y1;
								var den1 = 1 / (d13 - d01);
								var t42 = (-ax1.tp1 - d01) * den1;
								if(t42 > nape_Config.epsilon) {
									var t43 = t42;
									c0x1 += dvx1 * t43;
									c0y1 += dvy1 * t43;
								}
								var t44 = (-ax1.tp0 - d13) * den1;
								if(t44 < -nape_Config.epsilon) {
									var t45 = t44;
									c1x1 += dvx1 * t45;
									c1y1 += dvy1 * t45;
								}
								var c0d1 = c0x1 * ax1.gnormx + c0y1 * ax1.gnormy - ax1.gprojection;
								var c1d1 = c1x1 * ax1.gnormx + c1y1 * ax1.gnormy - ax1.gprojection;
								if(c0d1 < c1d1) {
									w21.x = c0x1;
									w21.y = c0y1;
									var t46 = -c0d1;
									w11.x = w21.x + ax1.gnormx * t46;
									w11.y = w21.y + ax1.gnormy * t46;
									sep2 = c0d1;
								} else {
									w21.x = c1x1;
									w21.y = c1y1;
									var t47 = -c1d1;
									w11.x = w21.x + ax1.gnormx * t47;
									w11.y = w21.y + ax1.gnormy * t47;
									sep2 = c1d1;
								}
							}
						} else {
							sep2 = 1e100;
						}
					} else {
						sep2 = 1e100;
					}
				}
			}
			var sep3 = sep2 + negRadius;
			var dot1 = deltax * axis.x + deltay * axis.y;
			if(sep3 < nape_Config.distanceThresholdCCD) {
				var d1x1 = 0.0;
				var d1y1 = 0.0;
				d1x1 = c1.x - b1.posx;
				d1y1 = c1.y - b1.posy;
				var proj1 = dot1 - b1.sweep_angvel * (axis.y * d1x1 - axis.x * d1y1);
				if(proj1 > 0) {
					toi.slipped = true;
				}
				if(proj1 <= 0 || sep3 < nape_Config.distanceThresholdCCD * 0.5) {
					break;
				}
			}
			curTOI = -1;
			break;
		}
		if(++curIter >= 40) {
			if(sep1 > negRadius) {
				toi.failed = true;
			}
			break;
		}
	}
	toi.toi = curTOI;
};
var zpp_$nape_geom_ZPP_$Vec2 = function() {
	this.y = 0.0;
	this.x = 0.0;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.weak = false;
	this.outer = null;
	this._isimmutable = null;
	this._immutable = false;
	this._validate = null;
	this._invalidate = null;
};
zpp_$nape_geom_ZPP_$Vec2.__name__ = true;
zpp_$nape_geom_ZPP_$Vec2.prototype = {
	add: function(o) {
		o._inuse = true;
		var temp = o;
		temp.next = this.next;
		this.next = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,insert: function(cur,o) {
		o._inuse = true;
		var temp = o;
		if(cur == null) {
			temp.next = this.next;
			this.next = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.next;
			ret = old.next;
			this.next = ret;
			if(this.next == null) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		old._inuse = false;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,reverse: function() {
		var cur = this.next;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.next = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,iterator_at: function(ind) {
		var ret = this.next;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,toString: function() {
		return "{ x: " + this.x + " y: " + this.y + " }";
	}
	,__class__: zpp_$nape_geom_ZPP_$Vec2
};
var zpp_$nape_geom_ZPP_$Vec3 = function() {
	this._validate = null;
	this.immutable = false;
	this.z = 0.0;
	this.y = 0.0;
	this.x = 0.0;
	this.outer = null;
	this.immutable = false;
	this._validate = null;
};
zpp_$nape_geom_ZPP_$Vec3.__name__ = true;
zpp_$nape_geom_ZPP_$Vec3.prototype = {
	__class__: zpp_$nape_geom_ZPP_$Vec3
};
var zpp_$nape_phys_ZPP_$Interactor = function() {
	this.cbSet = null;
	this.cbTypes = null;
	this.group = null;
	this.cbsets = null;
	this.icompound = null;
	this.ibody = null;
	this.ishape = null;
	this.id = 0;
	this.outer_i = null;
	this.id = zpp_$nape_ZPP_$ID.Interactor();
	this.cbsets = new zpp_$nape_util_ZNPList_$ZPP_$CallbackSet();
	this.cbTypes = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
};
zpp_$nape_phys_ZPP_$Interactor.__name__ = true;
zpp_$nape_phys_ZPP_$Interactor.get = function(i1,i2) {
	var id = i1.id < i2.id ? i1.id : i2.id;
	var di = i1.id < i2.id ? i2.id : i1.id;
	var xs = i1.cbsets.length < i2.cbsets.length ? i1.cbsets : i2.cbsets;
	var ret = null;
	var cx_ite = xs.head;
	while(cx_ite != null) {
		var x = cx_ite.elt;
		if(x.id == id && x.di == di) {
			ret = x;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_$nape_phys_ZPP_$Interactor.prototype = {
	__iaddedToSpace: function() {
		if(this.group != null) {
			this.group.interactors.add(this);
		}
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.interactors.add(this);
			cx_ite = cx_ite.next;
		}
		this.alloc_cbSet();
	}
	,__iremovedFromSpace: function() {
		if(this.group != null) {
			this.group.interactors.remove(this);
		}
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.interactors.remove(this);
			cx_ite = cx_ite.next;
		}
		this.dealloc_cbSet();
	}
	,wake: function() {
		if(this.ishape != null) {
			var body = this.ishape.body;
			if(body != null && body.space != null) {
				body.space.non_inlined_wake(body);
			}
		} else if(this.ibody != null) {
			if(this.ibody.space != null) {
				this.ibody.space.non_inlined_wake(this.ibody);
			}
		} else if(this.icompound.space != null) {
			this.icompound.space.wakeCompound(this.icompound);
		}
	}
	,insert_cbtype: function(cb) {
		if(!this.cbTypes.has(cb)) {
			var space = this.ishape != null ? this.ishape.body == null ? null : this.ishape.body.space : this.ibody != null ? this.ibody.space : this.icompound.space;
			if(space != null) {
				this.dealloc_cbSet();
				cb.interactors.add(this);
			}
			var pre = null;
			var cx_ite = this.cbTypes.head;
			while(cx_ite != null) {
				var j = cx_ite.elt;
				if(cb.id < j.id) {
					break;
				}
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			var _this = this.cbTypes;
			var ret;
			if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
				ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
			} else {
				ret = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret.next;
				ret.next = null;
			}
			ret.elt = cb;
			var temp = ret;
			if(pre == null) {
				temp.next = _this.head;
				_this.head = temp;
			} else {
				temp.next = pre.next;
				pre.next = temp;
			}
			_this.pushmod = _this.modified = true;
			_this.length++;
			if(space != null) {
				this.alloc_cbSet();
				this.wake();
			}
		}
	}
	,alloc_cbSet: function() {
		var space = this.ishape != null ? this.ishape.body == null ? null : this.ishape.body.space : this.ibody != null ? this.ibody.space : this.icompound.space;
		if((this.cbSet = space.cbsets.get(this.cbTypes)) != null) {
			this.cbSet.count++;
			this.cbSet.interactors.add(this);
			this.cbSet.validate();
			space.freshInteractorType(this);
		}
	}
	,dealloc_cbSet: function() {
		var space = this.ishape != null ? this.ishape.body == null ? null : this.ishape.body.space : this.ibody != null ? this.ibody.space : this.icompound.space;
		if(this.cbSet != null) {
			this.cbSet.interactors.remove(this);
			space.nullInteractorType(this);
			if(--this.cbSet.count == 0) {
				space.cbsets.remove(this.cbSet);
				var o = this.cbSet;
				o.listeners.clear();
				o.zip_listeners = true;
				o.bodylisteners.clear();
				o.zip_bodylisteners = true;
				o.conlisteners.clear();
				o.zip_conlisteners = true;
				while(o.cbTypes.head != null) {
					var cb = o.cbTypes.pop_unsafe();
					cb.cbsets.remove(o);
				}
				o.next = zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool;
				zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool = o;
			}
			this.cbSet = null;
		}
	}
	,immutable_midstep: function(n) {
		if(this.ibody != null) {
			var _this = this.ibody;
			if(_this.space != null && _this.space.midstep) {
				throw new js__$Boot_HaxeError("Error: " + n + " cannot be set during a space step()");
			}
		} else if(this.ishape != null) {
			this.ishape.__immutable_midstep(n);
		} else {
			this.icompound.__imutable_midstep(n);
		}
	}
	,__class__: zpp_$nape_phys_ZPP_$Interactor
};
var zpp_$nape_phys_ZPP_$Body = function() {
	this.wrap_worldCOM = null;
	this.wrap_localCOM = null;
	this.zip_worldCOM = false;
	this.worldCOMy = 0.0;
	this.worldCOMx = 0.0;
	this.zip_localCOM = false;
	this.localCOMy = 0.0;
	this.localCOMx = 0.0;
	this.zip_aabb = false;
	this.aabb = null;
	this.norotate = false;
	this.sinertia = 0.0;
	this.iinertia = 0.0;
	this.cinertia = 0.0;
	this.zip_inertia = false;
	this.inertia = 0.0;
	this.inertiaMode = 0;
	this.zip_gravMassScale = false;
	this.gravMassScale = 0.0;
	this.gravMassMode = 0;
	this.zip_gravMass = false;
	this.gravMass = 0.0;
	this.nomove = false;
	this.cmass = 0.0;
	this.smass = 0.0;
	this.imass = 0.0;
	this.massMode = 0;
	this.zip_mass = false;
	this.mass = 0.0;
	this.zip_axis = false;
	this.axisy = 0.0;
	this.axisx = 0.0;
	this.rot = 0.0;
	this.pre_rot = 0.0;
	this.kinangvel = 0.0;
	this.torque = 0.0;
	this.angvel = 0.0;
	this.svely = 0.0;
	this.svelx = 0.0;
	this.kinvely = 0.0;
	this.kinvelx = 0.0;
	this.forcey = 0.0;
	this.forcex = 0.0;
	this.vely = 0.0;
	this.velx = 0.0;
	this.wrap_pos = null;
	this.posy = 0.0;
	this.posx = 0.0;
	this.pre_posy = 0.0;
	this.pre_posx = 0.0;
	this.disableCCD = false;
	this.bulletEnabled = false;
	this.bullet = false;
	this.sweepRadius = 0.0;
	this.sweepFrozen = false;
	this.sweep_angvel = 0.0;
	this.sweepTime = 0.0;
	this.component = null;
	this.constraints = null;
	this.arbiters = null;
	this.space = null;
	this.wrap_shapes = null;
	this.shapes = null;
	this.compound = null;
	this.type = 0;
	this.world = false;
	this.outer = null;
	zpp_$nape_phys_ZPP_$Interactor.call(this);
	this.ibody = this;
	this.world = false;
	this.bulletEnabled = false;
	this.sweepTime = 0;
	this.sweep_angvel = 0;
	this.norotate = this.nomove = false;
	this.disableCCD = false;
	this.posx = 0;
	this.posy = 0;
	this.rot = 0;
	this.axisx = 0;
	this.axisy = 1;
	this.svelx = 0;
	this.svely = 0;
	this.velx = 0;
	this.vely = 0;
	this.kinvelx = 0;
	this.kinvely = 0;
	this.forcex = 0;
	this.forcey = 0;
	this.torque = this.angvel = this.kinangvel = 0;
	this.pre_posx = Infinity;
	this.pre_posy = Infinity;
	this.pre_rot = Infinity;
	this.localCOMx = 0;
	this.localCOMy = 0;
	this.worldCOMx = 0;
	this.worldCOMy = 0;
	this.zip_aabb = true;
	var ret;
	if(zpp_$nape_geom_ZPP_$AABB.zpp_pool == null) {
		ret = new zpp_$nape_geom_ZPP_$AABB();
	} else {
		ret = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
		zpp_$nape_geom_ZPP_$AABB.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.minx = 0;
	ret.miny = 0;
	ret.maxx = 0;
	ret.maxy = 0;
	this.aabb = ret;
	this.aabb._immutable = true;
	var me = this;
	this.aabb._validate = $bind(this,this.aabb_validate);
	this.massMode = 0;
	this.gravMassMode = 0;
	this.gravMassScale = 1.0;
	this.inertiaMode = 0;
	this.arbiters = new zpp_$nape_util_ZNPList_$ZPP_$Arbiter();
	this.constraints = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this.shapes = new zpp_$nape_util_ZNPList_$ZPP_$Shape();
	this.wrap_shapes = zpp_$nape_util_ZPP_$ShapeList.get(this.shapes);
	this.wrap_shapes.zpp_inner.adder = $bind(this,this.shapes_adder);
	this.wrap_shapes.zpp_inner.subber = $bind(this,this.shapes_subber);
	this.wrap_shapes.zpp_inner._invalidate = $bind(this,this.shapes_invalidate);
	this.wrap_shapes.zpp_inner._modifiable = $bind(this,this.shapes_modifiable);
	this.kinematicDelaySleep = false;
};
zpp_$nape_phys_ZPP_$Body.__name__ = true;
zpp_$nape_phys_ZPP_$Body.__static = function() {
	if(zpp_$nape_util_ZPP_$Flags.BodyType_STATIC == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.BodyType_STATIC = new nape_phys_BodyType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	var ret = new nape_phys_Body(zpp_$nape_util_ZPP_$Flags.BodyType_STATIC);
	var si = ret.zpp_inner;
	si.world = true;
	si.wrap_shapes.zpp_inner.immutable = true;
	si.smass = si.imass = si.cmass = si.mass = si.gravMass = 0.0;
	si.sinertia = si.iinertia = si.cinertia = si.inertia = 0.0;
	si.cbTypes.clear();
	return ret;
};
zpp_$nape_phys_ZPP_$Body.__super__ = zpp_$nape_phys_ZPP_$Interactor;
zpp_$nape_phys_ZPP_$Body.prototype = $extend(zpp_$nape_phys_ZPP_$Interactor.prototype,{
	invalidate_type: function() {
		this.invalidate_mass();
		this.invalidate_inertia();
	}
	,invalidate_shapes: function() {
		this.zip_aabb = true;
		this.zip_localCOM = true;
		this.zip_worldCOM = true;
		this.invalidate_mass();
		this.invalidate_inertia();
	}
	,atRest: function(dt) {
		if(this.type != 2) {
			return this.component.sleeping;
		} else {
			var linSq = nape_Config.linearSleepThreshold;
			linSq *= linSq;
			var cansleep;
			if(this.velx * this.velx + this.vely * this.vely > linSq) {
				cansleep = false;
			} else {
				var dx = 0.0;
				var dy = 0.0;
				dx = this.posx - this.pre_posx;
				dy = this.posy - this.pre_posy;
				if(dx * dx + dy * dy > 0.25 * linSq * dt * dt) {
					cansleep = false;
				} else {
					var dx1 = 0.0;
					var dy1 = 0.0;
					dx1 = this.aabb.maxx - this.aabb.minx;
					dy1 = this.aabb.maxy - this.aabb.miny;
					var idl = dx1 * dx1 + dy1 * dy1;
					var angSq = nape_Config.angularSleepThreshold;
					angSq *= angSq;
					if(4 * this.angvel * this.angvel * idl > angSq) {
						cansleep = false;
					} else {
						var dr = this.rot - this.pre_rot;
						if(dr * dr * idl > angSq * dt * dt) {
							cansleep = false;
						} else {
							cansleep = true;
						}
					}
				}
			}
			if(!cansleep) {
				this.component.waket = this.space.stamp;
			}
			return this.component.waket + nape_Config.sleepDelay < this.space.stamp;
		}
	}
	,refreshArbiters: function() {
		var cx_ite = this.arbiters.head;
		while(cx_ite != null) {
			var arb = cx_ite.elt;
			arb.invalidated = true;
			cx_ite = cx_ite.next;
		}
	}
	,pos_invalidate: function(pos) {
		this.immutable_midstep("Body::position");
		if(this.type == 1 && this.space != null) {
			throw new js__$Boot_HaxeError("Error: Cannot move a static object once inside a Space");
		}
		if(!(this.posx == pos.x && this.posy == pos.y)) {
			this.posx = pos.x;
			this.posy = pos.y;
			var cx_ite = this.shapes.head;
			while(cx_ite != null) {
				var s = cx_ite.elt;
				if(s.type == 1) {
					s.polygon.invalidate_gverts();
					s.polygon.invalidate_gaxi();
				}
				s.invalidate_worldCOM();
				cx_ite = cx_ite.next;
			}
			this.zip_worldCOM = true;
			this.wake();
		}
	}
	,pos_validate: function() {
		this.wrap_pos.zpp_inner.x = this.posx;
		this.wrap_pos.zpp_inner.y = this.posy;
	}
	,setupPosition: function() {
		var x = this.posx;
		var y = this.posy;
		if(x != x || y != y) {
			throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
			ret = new nape_geom_Vec2();
		} else {
			ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
				ret1 = new zpp_$nape_geom_ZPP_$Vec2();
			} else {
				ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = ret.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = ret.zpp_inner;
				if(_this2._validate != null) {
					_this2._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this3 = ret.zpp_inner;
				if(_this3._invalidate != null) {
					_this3._invalidate(_this3);
				}
			}
		}
		ret.zpp_inner.weak = false;
		this.wrap_pos = ret;
		this.wrap_pos.zpp_inner._inuse = true;
		if(this.world) {
			this.wrap_pos.zpp_inner._immutable = true;
		} else {
			this.wrap_pos.zpp_inner._invalidate = $bind(this,this.pos_invalidate);
			this.wrap_pos.zpp_inner._validate = $bind(this,this.pos_validate);
		}
	}
	,invalidate_mass: function() {
		this.zip_mass = true;
		this.invalidate_gravMass();
	}
	,validate_mass: function() {
		var exist = false;
		if(this.zip_mass || this.massMode == 0 && exist) {
			this.zip_mass = false;
			if(this.massMode == 0) {
				this.cmass = 0;
				var cx_ite = this.shapes.head;
				while(cx_ite != null) {
					var s = cx_ite.elt;
					s.refmaterial.density = s.material.density;
					s.validate_area_inertia();
					this.cmass += s.area * s.material.density;
					cx_ite = cx_ite.next;
				}
			}
			if(this.type == 2 && !this.nomove) {
				this.mass = this.cmass;
				this.imass = this.smass = 1.0 / this.mass;
			} else {
				this.mass = Infinity;
				this.imass = this.smass = 0.0;
			}
			if(exist) {
				this.invalidate_inertia();
			}
		}
	}
	,invalidate_gravMass: function() {
		if(this.gravMassMode != 1) {
			this.zip_gravMass = true;
		}
		if(this.gravMassMode != 2) {
			this.zip_gravMassScale = true;
		}
		this.wake();
	}
	,validate_gravMass: function() {
		if(this.zip_gravMass) {
			this.zip_gravMass = false;
			this.validate_mass();
			if(this.gravMassMode == 0) {
				this.validate_mass();
				this.gravMass = this.cmass;
			} else if(this.gravMassMode == 2) {
				this.validate_mass();
				this.gravMass = this.cmass * this.gravMassScale;
			}
		}
	}
	,invalidate_inertia: function() {
		this.zip_inertia = true;
		this.wake();
	}
	,validate_inertia: function() {
		var exist = false;
		if(this.zip_inertia || this.inertiaMode == 0 && exist) {
			this.zip_inertia = false;
			if(this.inertiaMode == 0) {
				this.cinertia = 0;
				var cx_ite = this.shapes.head;
				while(cx_ite != null) {
					var s = cx_ite.elt;
					s.refmaterial.density = s.material.density;
					s.validate_area_inertia();
					this.cinertia += s.inertia * s.area * s.material.density;
					cx_ite = cx_ite.next;
				}
			}
			if(this.type == 2 && !this.norotate) {
				this.inertia = this.cinertia;
				this.sinertia = this.iinertia = 1.0 / this.inertia;
			} else {
				this.inertia = Infinity;
				this.sinertia = this.iinertia = 0;
			}
			if(exist) {
				this.invalidate_inertia();
			}
		}
	}
	,validate_localCOM: function() {
		if(this.zip_localCOM) {
			this.zip_localCOM = false;
			var tempx = 0;
			var tempy = 0;
			var msum = 0.0;
			var cx_ite = this.shapes.head;
			while(cx_ite != null) {
				var s = cx_ite.elt;
				if(s.zip_localCOM) {
					s.zip_localCOM = false;
					if(s.type == 1) {
						var _this = s.polygon;
						if(_this.lverts.next == null) {
							throw new js__$Boot_HaxeError("Error: An empty polygon has no meaningful localCOM");
						}
						if(_this.lverts.next.next == null) {
							_this.localCOMx = _this.lverts.next.x;
							_this.localCOMy = _this.lverts.next.y;
						} else if(_this.lverts.next.next.next == null) {
							_this.localCOMx = _this.lverts.next.x;
							_this.localCOMy = _this.lverts.next.y;
							var t = 1.0;
							_this.localCOMx += _this.lverts.next.next.x * t;
							_this.localCOMy += _this.lverts.next.next.y * t;
							var t1 = 0.5;
							_this.localCOMx *= t1;
							_this.localCOMy *= t1;
						} else {
							_this.localCOMx = 0;
							_this.localCOMy = 0;
							var area = 0.0;
							var cx_ite1 = _this.lverts.next;
							var u = cx_ite1;
							cx_ite1 = cx_ite1.next;
							var v = cx_ite1;
							cx_ite1 = cx_ite1.next;
							while(cx_ite1 != null) {
								var w = cx_ite1;
								area += v.x * (w.y - u.y);
								var cf = w.y * v.x - w.x * v.y;
								_this.localCOMx += (v.x + w.x) * cf;
								_this.localCOMy += (v.y + w.y) * cf;
								u = v;
								v = w;
								cx_ite1 = cx_ite1.next;
							}
							cx_ite1 = _this.lverts.next;
							var w1 = cx_ite1;
							area += v.x * (w1.y - u.y);
							var cf1 = w1.y * v.x - w1.x * v.y;
							_this.localCOMx += (v.x + w1.x) * cf1;
							_this.localCOMy += (v.y + w1.y) * cf1;
							u = v;
							v = w1;
							cx_ite1 = cx_ite1.next;
							var w2 = cx_ite1;
							area += v.x * (w2.y - u.y);
							var cf2 = w2.y * v.x - w2.x * v.y;
							_this.localCOMx += (v.x + w2.x) * cf2;
							_this.localCOMy += (v.y + w2.y) * cf2;
							area = 1 / (3 * area);
							var t2 = area;
							_this.localCOMx *= t2;
							_this.localCOMy *= t2;
						}
					}
					if(s.wrap_localCOM != null) {
						s.wrap_localCOM.zpp_inner.x = s.localCOMx;
						s.wrap_localCOM.zpp_inner.y = s.localCOMy;
					}
				}
				s.validate_area_inertia();
				var t3 = s.area * s.material.density;
				tempx += s.localCOMx * t3;
				tempy += s.localCOMy * t3;
				msum += s.area * s.material.density;
				cx_ite = cx_ite.next;
			}
			if(msum != 0) {
				var t4 = 1.0 / msum;
				this.localCOMx = tempx * t4;
				this.localCOMy = tempy * t4;
			}
			if(this.wrap_localCOM != null) {
				this.wrap_localCOM.zpp_inner.x = this.localCOMx;
				this.wrap_localCOM.zpp_inner.y = this.localCOMy;
			}
			if(this.zip_mass && this.massMode == 0) {
				this.zip_mass = false;
				this.cmass = msum;
				if(this.type == 2) {
					this.mass = this.cmass;
					this.imass = this.smass = 1.0 / this.mass;
				} else {
					this.mass = Infinity;
					this.imass = this.smass = 0.0;
				}
			}
		}
	}
	,validate_worldCOM: function() {
		if(this.zip_worldCOM) {
			this.zip_worldCOM = false;
			this.validate_localCOM();
			if(this.zip_axis) {
				this.zip_axis = false;
				this.axisx = Math.sin(this.rot);
				this.axisy = Math.cos(this.rot);
			}
			this.worldCOMx = this.posx + (this.axisy * this.localCOMx - this.axisx * this.localCOMy);
			this.worldCOMy = this.posy + (this.localCOMx * this.axisx + this.localCOMy * this.axisy);
			if(this.wrap_worldCOM != null) {
				this.wrap_worldCOM.zpp_inner.x = this.worldCOMx;
				this.wrap_worldCOM.zpp_inner.y = this.worldCOMy;
			}
		}
	}
	,aabb_validate: function() {
		if(this.shapes.head == null) {
			throw new js__$Boot_HaxeError("Error: bounds only makes sense when Body has shapes");
		}
		if(this.shapes.head == null) {
			throw new js__$Boot_HaxeError("Error: Body bounds only makes sense if it contains shapes");
		}
		if(this.zip_aabb) {
			this.zip_aabb = false;
			this.aabb.minx = Infinity;
			this.aabb.miny = Infinity;
			this.aabb.maxx = -Infinity;
			this.aabb.maxy = -Infinity;
			var cx_ite = this.shapes.head;
			while(cx_ite != null) {
				var s = cx_ite.elt;
				if(s.zip_aabb) {
					if(s.body != null) {
						s.zip_aabb = false;
						if(s.type == 0) {
							var _this = s.circle;
							if(_this.zip_worldCOM) {
								if(_this.body != null) {
									_this.zip_worldCOM = false;
									if(_this.zip_localCOM) {
										_this.zip_localCOM = false;
										if(_this.type == 1) {
											var _this1 = _this.polygon;
											if(_this1.lverts.next == null) {
												throw new js__$Boot_HaxeError("Error: An empty polygon has no meaningful localCOM");
											}
											if(_this1.lverts.next.next == null) {
												_this1.localCOMx = _this1.lverts.next.x;
												_this1.localCOMy = _this1.lverts.next.y;
											} else if(_this1.lverts.next.next.next == null) {
												_this1.localCOMx = _this1.lverts.next.x;
												_this1.localCOMy = _this1.lverts.next.y;
												var t = 1.0;
												_this1.localCOMx += _this1.lverts.next.next.x * t;
												_this1.localCOMy += _this1.lverts.next.next.y * t;
												var t1 = 0.5;
												_this1.localCOMx *= t1;
												_this1.localCOMy *= t1;
											} else {
												_this1.localCOMx = 0;
												_this1.localCOMy = 0;
												var area = 0.0;
												var cx_ite1 = _this1.lverts.next;
												var u = cx_ite1;
												cx_ite1 = cx_ite1.next;
												var v = cx_ite1;
												cx_ite1 = cx_ite1.next;
												while(cx_ite1 != null) {
													var w = cx_ite1;
													area += v.x * (w.y - u.y);
													var cf = w.y * v.x - w.x * v.y;
													_this1.localCOMx += (v.x + w.x) * cf;
													_this1.localCOMy += (v.y + w.y) * cf;
													u = v;
													v = w;
													cx_ite1 = cx_ite1.next;
												}
												cx_ite1 = _this1.lverts.next;
												var w1 = cx_ite1;
												area += v.x * (w1.y - u.y);
												var cf1 = w1.y * v.x - w1.x * v.y;
												_this1.localCOMx += (v.x + w1.x) * cf1;
												_this1.localCOMy += (v.y + w1.y) * cf1;
												u = v;
												v = w1;
												cx_ite1 = cx_ite1.next;
												var w2 = cx_ite1;
												area += v.x * (w2.y - u.y);
												var cf2 = w2.y * v.x - w2.x * v.y;
												_this1.localCOMx += (v.x + w2.x) * cf2;
												_this1.localCOMy += (v.y + w2.y) * cf2;
												area = 1 / (3 * area);
												var t2 = area;
												_this1.localCOMx *= t2;
												_this1.localCOMy *= t2;
											}
										}
										if(_this.wrap_localCOM != null) {
											_this.wrap_localCOM.zpp_inner.x = _this.localCOMx;
											_this.wrap_localCOM.zpp_inner.y = _this.localCOMy;
										}
									}
									var _this2 = _this.body;
									if(_this2.zip_axis) {
										_this2.zip_axis = false;
										_this2.axisx = Math.sin(_this2.rot);
										_this2.axisy = Math.cos(_this2.rot);
									}
									_this.worldCOMx = _this.body.posx + (_this.body.axisy * _this.localCOMx - _this.body.axisx * _this.localCOMy);
									_this.worldCOMy = _this.body.posy + (_this.localCOMx * _this.body.axisx + _this.localCOMy * _this.body.axisy);
								}
							}
							var rx = _this.radius;
							var ry = _this.radius;
							_this.aabb.minx = _this.worldCOMx - rx;
							_this.aabb.miny = _this.worldCOMy - ry;
							_this.aabb.maxx = _this.worldCOMx + rx;
							_this.aabb.maxy = _this.worldCOMy + ry;
						} else {
							var _this3 = s.polygon;
							if(_this3.zip_gverts) {
								if(_this3.body != null) {
									_this3.zip_gverts = false;
									_this3.validate_lverts();
									var _this4 = _this3.body;
									if(_this4.zip_axis) {
										_this4.zip_axis = false;
										_this4.axisx = Math.sin(_this4.rot);
										_this4.axisy = Math.cos(_this4.rot);
									}
									var li = _this3.lverts.next;
									var cx_ite2 = _this3.gverts.next;
									while(cx_ite2 != null) {
										var g = cx_ite2;
										var l = li;
										li = li.next;
										g.x = _this3.body.posx + (_this3.body.axisy * l.x - _this3.body.axisx * l.y);
										g.y = _this3.body.posy + (l.x * _this3.body.axisx + l.y * _this3.body.axisy);
										cx_ite2 = cx_ite2.next;
									}
								}
							}
							if(_this3.lverts.next == null) {
								throw new js__$Boot_HaxeError("Error: An empty polygon has no meaningful bounds");
							}
							var p0 = _this3.gverts.next;
							_this3.aabb.minx = p0.x;
							_this3.aabb.miny = p0.y;
							_this3.aabb.maxx = p0.x;
							_this3.aabb.maxy = p0.y;
							var cx_ite3 = _this3.gverts.next.next;
							while(cx_ite3 != null) {
								var p = cx_ite3;
								if(p.x < _this3.aabb.minx) {
									_this3.aabb.minx = p.x;
								}
								if(p.x > _this3.aabb.maxx) {
									_this3.aabb.maxx = p.x;
								}
								if(p.y < _this3.aabb.miny) {
									_this3.aabb.miny = p.y;
								}
								if(p.y > _this3.aabb.maxy) {
									_this3.aabb.maxy = p.y;
								}
								cx_ite3 = cx_ite3.next;
							}
						}
					}
				}
				var _this5 = this.aabb;
				var x = s.aabb;
				if(x.minx < _this5.minx) {
					_this5.minx = x.minx;
				}
				if(x.maxx > _this5.maxx) {
					_this5.maxx = x.maxx;
				}
				if(x.miny < _this5.miny) {
					_this5.miny = x.miny;
				}
				if(x.maxy > _this5.maxy) {
					_this5.maxy = x.maxy;
				}
				cx_ite = cx_ite.next;
			}
		}
	}
	,shapes_adder: function(s) {
		if(s.zpp_inner.body != this) {
			if(s.zpp_inner.body != null) {
				s.zpp_inner.body.wrap_shapes.remove(s);
			}
			s.zpp_inner.body = this;
			s.zpp_inner.addedToBody();
			if(this.space != null) {
				var _this = this.space;
				var s1 = s.zpp_inner;
				var o = s1.body;
				if(!o.world) {
					o.component.waket = _this.stamp + (_this.midstep ? 0 : 1);
					if(o.type == 3) {
						o.kinematicDelaySleep = true;
					}
					if(o.component.sleeping) {
						_this.really_wake(o,false);
					}
				}
				_this.bphase.insert(s1);
				s1.addedToSpace();
			}
			if(s.zpp_inner.type == 1) {
				s.zpp_inner.polygon.invalidate_gaxi();
				s.zpp_inner.polygon.invalidate_gverts();
			}
			return true;
		} else {
			return false;
		}
	}
	,shapes_subber: function(s) {
		if(this.space != null) {
			this.space.removed_shape(s.zpp_inner);
		}
		s.zpp_inner.body = null;
		s.zpp_inner.removedFromBody();
	}
	,shapes_invalidate: function(_) {
		this.invalidate_shapes();
	}
	,shapes_modifiable: function() {
		this.immutable_midstep("Body::shapes");
		if(this.type == 1 && this.space != null) {
			throw new js__$Boot_HaxeError("Error: Cannot modifiy shapes of static object once added to Space");
		}
	}
	,addedToSpace: function() {
		if(zpp_$nape_space_ZPP_$Component.zpp_pool == null) {
			this.component = new zpp_$nape_space_ZPP_$Component();
		} else {
			this.component = zpp_$nape_space_ZPP_$Component.zpp_pool;
			zpp_$nape_space_ZPP_$Component.zpp_pool = this.component.next;
			this.component.next = null;
		}
		var _this = this.component;
		this.component.isBody = true;
		this.component.body = this;
		this.__iaddedToSpace();
	}
	,removedFromSpace: function() {
		while(this.arbiters.head != null) {
			var arb = this.arbiters.pop_unsafe();
			var s = this.space;
			arb.cleared = true;
			if(arb.b2 == this) {
				var _this = arb.b1.arbiters;
				var pre = null;
				var cur = _this.head;
				var ret = false;
				while(cur != null) {
					if(cur.elt == arb) {
						var old;
						var ret1;
						if(pre == null) {
							old = _this.head;
							ret1 = old.next;
							_this.head = ret1;
							if(_this.head == null) {
								_this.pushmod = true;
							}
						} else {
							old = pre.next;
							ret1 = old.next;
							pre.next = ret1;
							if(ret1 == null) {
								_this.pushmod = true;
							}
						}
						var o = old;
						o.elt = null;
						o.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o;
						_this.modified = true;
						_this.length--;
						_this.pushmod = true;
						ret = true;
						break;
					}
					pre = cur;
					cur = cur.next;
				}
			}
			if(arb.b1 == this) {
				var _this1 = arb.b2.arbiters;
				var pre1 = null;
				var cur1 = _this1.head;
				var ret2 = false;
				while(cur1 != null) {
					if(cur1.elt == arb) {
						var old1;
						var ret3;
						if(pre1 == null) {
							old1 = _this1.head;
							ret3 = old1.next;
							_this1.head = ret3;
							if(_this1.head == null) {
								_this1.pushmod = true;
							}
						} else {
							old1 = pre1.next;
							ret3 = old1.next;
							pre1.next = ret3;
							if(ret3 == null) {
								_this1.pushmod = true;
							}
						}
						var o1 = old1;
						o1.elt = null;
						o1.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o1;
						_this1.modified = true;
						_this1.length--;
						_this1.pushmod = true;
						ret2 = true;
						break;
					}
					pre1 = cur1;
					cur1 = cur1.next;
				}
			}
			if(arb.pair != null) {
				arb.pair.arb = null;
				arb.pair = null;
			}
			arb.active = false;
			s.f_arbiters.modified = true;
		}
		var o2 = this.component;
		o2.body = null;
		o2.constraint = null;
		o2.next = zpp_$nape_space_ZPP_$Component.zpp_pool;
		zpp_$nape_space_ZPP_$Component.zpp_pool = o2;
		this.component = null;
		this.__iremovedFromSpace();
	}
	,__class__: zpp_$nape_phys_ZPP_$Body
});
var zpp_$nape_phys_ZPP_$Compound = function() {
	this.space = null;
	this.compound = null;
	this.depth = 0;
	this.wrap_compounds = null;
	this.wrap_constraints = null;
	this.wrap_bodies = null;
	this.compounds = null;
	this.constraints = null;
	this.bodies = null;
	this.outer = null;
	zpp_$nape_phys_ZPP_$Interactor.call(this);
	this.icompound = this;
	this.depth = 1;
	var me = this;
	this.bodies = new zpp_$nape_util_ZNPList_$ZPP_$Body();
	this.wrap_bodies = zpp_$nape_util_ZPP_$BodyList.get(this.bodies);
	this.wrap_bodies.zpp_inner.adder = $bind(this,this.bodies_adder);
	this.wrap_bodies.zpp_inner.subber = $bind(this,this.bodies_subber);
	this.wrap_bodies.zpp_inner._modifiable = $bind(this,this.bodies_modifiable);
	this.constraints = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this.wrap_constraints = zpp_$nape_util_ZPP_$ConstraintList.get(this.constraints);
	this.wrap_constraints.zpp_inner.adder = $bind(this,this.constraints_adder);
	this.wrap_constraints.zpp_inner.subber = $bind(this,this.constraints_subber);
	this.wrap_constraints.zpp_inner._modifiable = $bind(this,this.constraints_modifiable);
	this.compounds = new zpp_$nape_util_ZNPList_$ZPP_$Compound();
	this.wrap_compounds = zpp_$nape_util_ZPP_$CompoundList.get(this.compounds);
	this.wrap_compounds.zpp_inner.adder = $bind(this,this.compounds_adder);
	this.wrap_compounds.zpp_inner.subber = $bind(this,this.compounds_subber);
	this.wrap_compounds.zpp_inner._modifiable = $bind(this,this.compounds_modifiable);
};
zpp_$nape_phys_ZPP_$Compound.__name__ = true;
zpp_$nape_phys_ZPP_$Compound.__super__ = zpp_$nape_phys_ZPP_$Interactor;
zpp_$nape_phys_ZPP_$Compound.prototype = $extend(zpp_$nape_phys_ZPP_$Interactor.prototype,{
	__imutable_midstep: function(name) {
		if(this.space != null && this.space.midstep) {
			throw new js__$Boot_HaxeError("Error: " + name + " cannot be set during space step()");
		}
	}
	,addedToSpace: function() {
		this.__iaddedToSpace();
	}
	,removedFromSpace: function() {
		this.__iremovedFromSpace();
	}
	,bodies_adder: function(x) {
		if(x.zpp_inner.compound != this) {
			if(x.zpp_inner.compound != null) {
				x.zpp_inner.compound.wrap_bodies.remove(x);
			} else if(x.zpp_inner.space != null) {
				x.zpp_inner.space.wrap_bodies.remove(x);
			}
			x.zpp_inner.compound = this;
			if(this.space != null) {
				this.space.addBody(x.zpp_inner);
			}
			return true;
		} else {
			return false;
		}
	}
	,bodies_subber: function(x) {
		x.zpp_inner.compound = null;
		if(this.space != null) {
			this.space.remBody(x.zpp_inner);
		}
	}
	,bodies_modifiable: function() {
		this.immutable_midstep("Compound::" + "bodies");
	}
	,constraints_adder: function(x) {
		if(x.zpp_inner.compound != this) {
			if(x.zpp_inner.compound != null) {
				x.zpp_inner.compound.wrap_constraints.remove(x);
			} else if(x.zpp_inner.space != null) {
				x.zpp_inner.space.wrap_constraints.remove(x);
			}
			x.zpp_inner.compound = this;
			if(this.space != null) {
				this.space.addConstraint(x.zpp_inner);
			}
			return true;
		} else {
			return false;
		}
	}
	,constraints_subber: function(x) {
		x.zpp_inner.compound = null;
		if(this.space != null) {
			this.space.remConstraint(x.zpp_inner);
		}
	}
	,constraints_modifiable: function() {
		this.immutable_midstep("Compound::" + "constraints");
	}
	,compounds_adder: function(x) {
		var cur = this;
		while(cur != null && cur != x.zpp_inner) cur = cur.compound;
		if(cur == x.zpp_inner) {
			throw new js__$Boot_HaxeError("Error: Assignment would cause a cycle in the Compound tree: assigning " + x.toString() + ".compound = " + this.outer.toString());
		}
		if(x.zpp_inner.compound != this) {
			if(x.zpp_inner.compound != null) {
				x.zpp_inner.compound.wrap_compounds.remove(x);
			} else if(x.zpp_inner.space != null) {
				x.zpp_inner.space.wrap_compounds.remove(x);
			}
			x.zpp_inner.compound = this;
			x.zpp_inner.depth = this.depth + 1;
			if(this.space != null) {
				this.space.addCompound(x.zpp_inner);
			}
			return true;
		} else {
			return false;
		}
	}
	,compounds_subber: function(x) {
		x.zpp_inner.compound = null;
		x.zpp_inner.depth = 1;
		if(this.space != null) {
			this.space.remCompound(x.zpp_inner);
		}
	}
	,compounds_modifiable: function() {
		this.immutable_midstep("Compound::" + "compounds");
	}
	,__class__: zpp_$nape_phys_ZPP_$Compound
});
var zpp_$nape_phys_ZPP_$FluidProperties = function() {
	this.wrap_gravity = null;
	this.gravityy = 0.0;
	this.gravityx = 0.0;
	this.density = 0.0;
	this.viscosity = 0.0;
	this.shapes = null;
	this.outer = null;
	this.next = null;
	this.shapes = new zpp_$nape_util_ZNPList_$ZPP_$Shape();
	this.density = this.viscosity = 1;
	this.wrap_gravity = null;
	this.gravityx = 0;
	this.gravityy = 0;
};
zpp_$nape_phys_ZPP_$FluidProperties.__name__ = true;
zpp_$nape_phys_ZPP_$FluidProperties.prototype = {
	invalidate: function() {
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var shape = cx_ite.elt;
			shape.invalidate_fluidprops();
			cx_ite = cx_ite.next;
		}
	}
	,__class__: zpp_$nape_phys_ZPP_$FluidProperties
};
var zpp_$nape_phys_ZPP_$Material = function() {
	this.rollingFriction = 0.0;
	this.elasticity = 0.0;
	this.density = 0.0;
	this.staticFriction = 0.0;
	this.dynamicFriction = 0.0;
	this.shapes = null;
	this.outer = null;
	this.next = null;
	this.shapes = new zpp_$nape_util_ZNPList_$ZPP_$Shape();
	this.elasticity = 0;
	this.dynamicFriction = 1;
	this.staticFriction = 2;
	this.density = 0.001;
	this.rollingFriction = 0.01;
};
zpp_$nape_phys_ZPP_$Material.__name__ = true;
zpp_$nape_phys_ZPP_$Material.prototype = {
	wrapper: function() {
		if(this.outer == null) {
			this.outer = new nape_phys_Material();
			var o = this.outer.zpp_inner;
			o.outer = null;
			o.next = zpp_$nape_phys_ZPP_$Material.zpp_pool;
			zpp_$nape_phys_ZPP_$Material.zpp_pool = o;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,set: function(x) {
		this.dynamicFriction = x.dynamicFriction;
		this.staticFriction = x.staticFriction;
		this.density = x.density;
		this.elasticity = x.elasticity;
		this.rollingFriction = x.rollingFriction;
	}
	,invalidate: function(x) {
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.invalidate_material(x);
			cx_ite = cx_ite.next;
		}
	}
	,__class__: zpp_$nape_phys_ZPP_$Material
};
var zpp_$nape_shape_ZPP_$Shape = function(type) {
	this.zip_aabb = false;
	this.aabb = null;
	this.pairs = null;
	this.node = null;
	this.sweep = null;
	this.sensorEnabled = false;
	this.fluidEnabled = false;
	this.fluidProperties = null;
	this.filter = null;
	this.material = null;
	this.refmaterial = null;
	this.polygon = null;
	this.circle = null;
	this.sweepCoef = 0.0;
	this.zip_sweepRadius = false;
	this.sweepRadius = 0.0;
	this.wrap_localCOM = null;
	this.zip_worldCOM = false;
	this.worldCOMy = 0.0;
	this.worldCOMx = 0.0;
	this.zip_localCOM = false;
	this.localCOMy = 0.0;
	this.localCOMx = 0.0;
	this.zip_angDrag = false;
	this.angDrag = 0.0;
	this.inertia = 0.0;
	this.zip_area_inertia = false;
	this.area = 0.0;
	this.type = 0;
	this.body = null;
	this.outer = null;
	zpp_$nape_phys_ZPP_$Interactor.call(this);
	this.pairs = new zpp_$nape_util_ZNPList_$ZPP_$AABBPair();
	this.ishape = this;
	this.type = type;
	var ret;
	if(zpp_$nape_geom_ZPP_$AABB.zpp_pool == null) {
		ret = new zpp_$nape_geom_ZPP_$AABB();
	} else {
		ret = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
		zpp_$nape_geom_ZPP_$AABB.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.minx = 0;
	ret.miny = 0;
	ret.maxx = 0;
	ret.maxy = 0;
	this.aabb = ret;
	this.aabb._immutable = true;
	var me = this;
	this.aabb._validate = $bind(this,this.aabb_validate);
	this.zip_area_inertia = this.zip_angDrag = this.zip_localCOM = this.zip_sweepRadius = true;
	this.localCOMx = 0;
	this.localCOMy = 0;
	this.worldCOMx = 0;
	this.worldCOMy = 0;
	this.fluidEnabled = false;
	this.sensorEnabled = false;
	this.fluidProperties = null;
	this.body = null;
	this.refmaterial = new zpp_$nape_phys_ZPP_$Material();
	this.sweepRadius = this.sweepCoef = 0;
};
zpp_$nape_shape_ZPP_$Shape.__name__ = true;
zpp_$nape_shape_ZPP_$Shape.__super__ = zpp_$nape_phys_ZPP_$Interactor;
zpp_$nape_shape_ZPP_$Shape.prototype = $extend(zpp_$nape_phys_ZPP_$Interactor.prototype,{
	validate_sweepRadius: function() {
		if(this.zip_sweepRadius) {
			this.zip_sweepRadius = false;
			if(this.type == 0) {
				this.circle.__validate_sweepRadius();
			} else {
				this.polygon.__validate_sweepRadius();
			}
		}
	}
	,validate_area_inertia: function() {
		if(this.zip_area_inertia) {
			this.zip_area_inertia = false;
			if(this.type == 0) {
				this.circle.__validate_area_inertia();
			} else {
				this.polygon.__validate_area_inertia();
			}
		}
	}
	,validate_angDrag: function() {
		if(this.zip_angDrag || this.refmaterial.dynamicFriction != this.material.dynamicFriction) {
			this.zip_angDrag = false;
			this.refmaterial.dynamicFriction = this.material.dynamicFriction;
			if(this.type == 0) {
				this.circle.__validate_angDrag();
			} else {
				this.polygon.__validate_angDrag();
			}
		}
	}
	,invalidate_area_inertia: function() {
		this.zip_area_inertia = true;
		if(this.body != null) {
			var _this = this.body;
			_this.zip_localCOM = true;
			_this.zip_worldCOM = true;
			this.body.invalidate_mass();
			this.body.invalidate_inertia();
		}
	}
	,invalidate_angDrag: function() {
		this.zip_angDrag = true;
	}
	,invalidate_localCOM: function() {
		this.zip_localCOM = true;
		this.invalidate_area_inertia();
		if(this.type == 0) {
			this.zip_sweepRadius = true;
		}
		this.invalidate_angDrag();
		this.invalidate_worldCOM();
		if(this.body != null) {
			var _this = this.body;
			_this.zip_localCOM = true;
			_this.zip_worldCOM = true;
		}
	}
	,invalidate_worldCOM: function() {
		this.zip_worldCOM = true;
		this.zip_aabb = true;
		if(this.body != null) {
			this.body.zip_aabb = true;
		}
	}
	,invalidate_material: function(flags) {
		if((flags & zpp_$nape_phys_ZPP_$Material.WAKE) != 0) {
			this.wake();
		}
		if((flags & zpp_$nape_phys_ZPP_$Material.ARBITERS) != 0) {
			if(this.body != null) {
				this.body.refreshArbiters();
			}
		}
		if((flags & zpp_$nape_phys_ZPP_$Material.PROPS) != 0) {
			if(this.body != null) {
				var _this = this.body;
				_this.zip_localCOM = true;
				_this.zip_worldCOM = true;
				this.body.invalidate_mass();
				this.body.invalidate_inertia();
			}
		}
		if((flags & zpp_$nape_phys_ZPP_$Material.ANGDRAG) != 0) {
			this.invalidate_angDrag();
		}
		this.refmaterial.set(this.material);
	}
	,invalidate_filter: function() {
		this.wake();
	}
	,invalidate_fluidprops: function() {
		if(this.fluidEnabled) {
			this.wake();
		}
	}
	,aabb_validate: function() {
		if(this.body == null) {
			throw new js__$Boot_HaxeError("Error: bounds only makes sense when Shape belongs to a Body");
		}
		if(this.zip_aabb) {
			if(this.body != null) {
				this.zip_aabb = false;
				if(this.type == 0) {
					var _this = this.circle;
					if(_this.zip_worldCOM) {
						if(_this.body != null) {
							_this.zip_worldCOM = false;
							if(_this.zip_localCOM) {
								_this.zip_localCOM = false;
								if(_this.type == 1) {
									var _this1 = _this.polygon;
									if(_this1.lverts.next == null) {
										throw new js__$Boot_HaxeError("Error: An empty polygon has no meaningful localCOM");
									}
									if(_this1.lverts.next.next == null) {
										_this1.localCOMx = _this1.lverts.next.x;
										_this1.localCOMy = _this1.lverts.next.y;
									} else if(_this1.lverts.next.next.next == null) {
										_this1.localCOMx = _this1.lverts.next.x;
										_this1.localCOMy = _this1.lverts.next.y;
										var t = 1.0;
										_this1.localCOMx += _this1.lverts.next.next.x * t;
										_this1.localCOMy += _this1.lverts.next.next.y * t;
										var t1 = 0.5;
										_this1.localCOMx *= t1;
										_this1.localCOMy *= t1;
									} else {
										_this1.localCOMx = 0;
										_this1.localCOMy = 0;
										var area = 0.0;
										var cx_ite = _this1.lverts.next;
										var u = cx_ite;
										cx_ite = cx_ite.next;
										var v = cx_ite;
										cx_ite = cx_ite.next;
										while(cx_ite != null) {
											var w = cx_ite;
											area += v.x * (w.y - u.y);
											var cf = w.y * v.x - w.x * v.y;
											_this1.localCOMx += (v.x + w.x) * cf;
											_this1.localCOMy += (v.y + w.y) * cf;
											u = v;
											v = w;
											cx_ite = cx_ite.next;
										}
										cx_ite = _this1.lverts.next;
										var w1 = cx_ite;
										area += v.x * (w1.y - u.y);
										var cf1 = w1.y * v.x - w1.x * v.y;
										_this1.localCOMx += (v.x + w1.x) * cf1;
										_this1.localCOMy += (v.y + w1.y) * cf1;
										u = v;
										v = w1;
										cx_ite = cx_ite.next;
										var w2 = cx_ite;
										area += v.x * (w2.y - u.y);
										var cf2 = w2.y * v.x - w2.x * v.y;
										_this1.localCOMx += (v.x + w2.x) * cf2;
										_this1.localCOMy += (v.y + w2.y) * cf2;
										area = 1 / (3 * area);
										var t2 = area;
										_this1.localCOMx *= t2;
										_this1.localCOMy *= t2;
									}
								}
								if(_this.wrap_localCOM != null) {
									_this.wrap_localCOM.zpp_inner.x = _this.localCOMx;
									_this.wrap_localCOM.zpp_inner.y = _this.localCOMy;
								}
							}
							var _this2 = _this.body;
							if(_this2.zip_axis) {
								_this2.zip_axis = false;
								_this2.axisx = Math.sin(_this2.rot);
								_this2.axisy = Math.cos(_this2.rot);
							}
							_this.worldCOMx = _this.body.posx + (_this.body.axisy * _this.localCOMx - _this.body.axisx * _this.localCOMy);
							_this.worldCOMy = _this.body.posy + (_this.localCOMx * _this.body.axisx + _this.localCOMy * _this.body.axisy);
						}
					}
					var rx = _this.radius;
					var ry = _this.radius;
					_this.aabb.minx = _this.worldCOMx - rx;
					_this.aabb.miny = _this.worldCOMy - ry;
					_this.aabb.maxx = _this.worldCOMx + rx;
					_this.aabb.maxy = _this.worldCOMy + ry;
				} else {
					var _this3 = this.polygon;
					if(_this3.zip_gverts) {
						if(_this3.body != null) {
							_this3.zip_gverts = false;
							_this3.validate_lverts();
							var _this4 = _this3.body;
							if(_this4.zip_axis) {
								_this4.zip_axis = false;
								_this4.axisx = Math.sin(_this4.rot);
								_this4.axisy = Math.cos(_this4.rot);
							}
							var li = _this3.lverts.next;
							var cx_ite1 = _this3.gverts.next;
							while(cx_ite1 != null) {
								var g = cx_ite1;
								var l = li;
								li = li.next;
								g.x = _this3.body.posx + (_this3.body.axisy * l.x - _this3.body.axisx * l.y);
								g.y = _this3.body.posy + (l.x * _this3.body.axisx + l.y * _this3.body.axisy);
								cx_ite1 = cx_ite1.next;
							}
						}
					}
					if(_this3.lverts.next == null) {
						throw new js__$Boot_HaxeError("Error: An empty polygon has no meaningful bounds");
					}
					var p0 = _this3.gverts.next;
					_this3.aabb.minx = p0.x;
					_this3.aabb.miny = p0.y;
					_this3.aabb.maxx = p0.x;
					_this3.aabb.maxy = p0.y;
					var cx_ite2 = _this3.gverts.next.next;
					while(cx_ite2 != null) {
						var p = cx_ite2;
						if(p.x < _this3.aabb.minx) {
							_this3.aabb.minx = p.x;
						}
						if(p.x > _this3.aabb.maxx) {
							_this3.aabb.maxx = p.x;
						}
						if(p.y < _this3.aabb.miny) {
							_this3.aabb.miny = p.y;
						}
						if(p.y > _this3.aabb.maxy) {
							_this3.aabb.maxy = p.y;
						}
						cx_ite2 = cx_ite2.next;
					}
				}
			}
		}
	}
	,setMaterial: function(material) {
		if(this.material != material) {
			if(this.body != null && this.body.space != null) {
				if(this.material != null) {
					this.material.shapes.remove(this);
				}
			}
			this.material = material;
			if(this.body != null && this.body.space != null) {
				material.shapes.add(this);
			}
			this.wake();
			if(this.body != null) {
				this.body.refreshArbiters();
			}
		}
	}
	,setFilter: function(filter) {
		if(this.filter != filter) {
			if(this.body != null && this.body.space != null) {
				if(this.filter != null) {
					this.filter.shapes.remove(this);
				}
			}
			this.filter = filter;
			if(this.body != null && this.body.space != null) {
				filter.shapes.add(this);
			}
			this.wake();
		}
	}
	,__immutable_midstep: function(name) {
		if(this.body != null && this.body.space != null && this.body.space.midstep) {
			throw new js__$Boot_HaxeError("Error: " + name + " cannot be set during a space step()");
		}
	}
	,addedToBody: function() {
		this.invalidate_worldCOM();
		this.zip_aabb = true;
		if(this.body != null) {
			this.body.zip_aabb = true;
		}
	}
	,removedFromBody: function() {
	}
	,addedToSpace: function() {
		this.__iaddedToSpace();
		this.material.shapes.add(this);
		this.filter.shapes.add(this);
		if(this.fluidProperties != null) {
			this.fluidProperties.shapes.add(this);
		}
	}
	,removedFromSpace: function() {
		this.__iremovedFromSpace();
		this.material.shapes.remove(this);
		this.filter.shapes.remove(this);
		if(this.fluidProperties != null) {
			this.fluidProperties.shapes.remove(this);
		}
	}
	,__class__: zpp_$nape_shape_ZPP_$Shape
});
var zpp_$nape_shape_ZPP_$Circle = function() {
	this.radius = 0.0;
	this.outer_zn = null;
	zpp_$nape_shape_ZPP_$Shape.call(this,0);
	this.circle = this;
	this.zip_localCOM = false;
};
zpp_$nape_shape_ZPP_$Circle.__name__ = true;
zpp_$nape_shape_ZPP_$Circle.__super__ = zpp_$nape_shape_ZPP_$Shape;
zpp_$nape_shape_ZPP_$Circle.prototype = $extend(zpp_$nape_shape_ZPP_$Shape.prototype,{
	invalidate_radius: function() {
		this.invalidate_area_inertia();
		this.invalidate_angDrag();
		this.zip_aabb = true;
		if(this.body != null) {
			this.body.zip_aabb = true;
		}
		if(this.body != null) {
			this.body.wake();
		}
	}
	,__validate_sweepRadius: function() {
		this.sweepCoef = Math.sqrt(this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy);
		this.sweepRadius = this.sweepCoef + this.radius;
	}
	,__validate_area_inertia: function() {
		var r2 = this.radius * this.radius;
		this.area = r2 * Math.PI;
		this.inertia = r2 * 0.5 + (this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy);
	}
	,__validate_angDrag: function() {
		var lc = this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy;
		var r2 = this.radius * this.radius;
		var skin = this.material.dynamicFriction * nape_Config.fluidAngularDragFriction;
		this.angDrag = (lc + 2 * r2) * skin + 0.5 * nape_Config.fluidAngularDrag * (1 + nape_Config.fluidVacuumDrag) * lc;
		this.angDrag /= 2 * (lc + 0.5 * r2);
	}
	,__class__: zpp_$nape_shape_ZPP_$Circle
});
var zpp_$nape_shape_ZPP_$Edge = function() {
	this.tp1 = 0.0;
	this.tp0 = 0.0;
	this.gp1 = null;
	this.lp1 = null;
	this.gp0 = null;
	this.lp0 = null;
	this.gprojection = 0.0;
	this.lprojection = 0.0;
	this.length = 0.0;
	this.wrap_gnorm = null;
	this.gnormy = 0.0;
	this.gnormx = 0.0;
	this.wrap_lnorm = null;
	this.lnormy = 0.0;
	this.lnormx = 0.0;
	this.outer = null;
	this.polygon = null;
	this.next = null;
	this.lnormx = 0;
	this.lnormy = 0;
	this.gnormx = 0;
	this.gnormy = 0;
	this.length = 0;
	this.lprojection = 0;
	this.gprojection = 0;
};
zpp_$nape_shape_ZPP_$Edge.__name__ = true;
zpp_$nape_shape_ZPP_$Edge.prototype = {
	wrapper: function() {
		if(this.outer == null) {
			zpp_$nape_shape_ZPP_$Edge.internal = true;
			this.outer = new nape_shape_Edge();
			zpp_$nape_shape_ZPP_$Edge.internal = false;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,__class__: zpp_$nape_shape_ZPP_$Edge
};
var zpp_$nape_shape_ZPP_$Polygon = function() {
	this.zip_sanitation = false;
	this.zip_valid = false;
	this.zip_gaxi = false;
	this.zip_gverts = false;
	this.zip_laxi = false;
	this.zip_lverts = false;
	this.reverse_flag = false;
	this.edgeCnt = 0;
	this.wrap_edges = null;
	this.edges = null;
	this.wrap_gverts = null;
	this.gverts = null;
	this.wrap_lverts = null;
	this.lverts = null;
	this.outer_zn = null;
	zpp_$nape_shape_ZPP_$Shape.call(this,1);
	this.polygon = this;
	this.lverts = new zpp_$nape_geom_ZPP_$Vec2();
	this.gverts = new zpp_$nape_geom_ZPP_$Vec2();
	this.edges = new zpp_$nape_util_ZNPList_$ZPP_$Edge();
	this.edgeCnt = 0;
};
zpp_$nape_shape_ZPP_$Polygon.__name__ = true;
zpp_$nape_shape_ZPP_$Polygon.__super__ = zpp_$nape_shape_ZPP_$Shape;
zpp_$nape_shape_ZPP_$Polygon.prototype = $extend(zpp_$nape_shape_ZPP_$Shape.prototype,{
	lverts_pa_invalidate: function(x) {
		this.invalidate_lverts();
	}
	,lverts_pa_immutable: function() {
		if(this.body != null && this.body.type == 1 && this.body.space != null) {
			throw new js__$Boot_HaxeError("Error: Cannot modify local vertex of Polygon added to a static body whilst within a Space");
		}
	}
	,gverts_pa_validate: function() {
		if(this.body == null) {
			throw new js__$Boot_HaxeError("Error: World vertex only makes sense when Polygon is contained in a rigid body");
		}
		if(this.zip_gverts) {
			if(this.body != null) {
				this.zip_gverts = false;
				this.validate_lverts();
				var _this = this.body;
				if(_this.zip_axis) {
					_this.zip_axis = false;
					_this.axisx = Math.sin(_this.rot);
					_this.axisy = Math.cos(_this.rot);
				}
				var li = this.lverts.next;
				var cx_ite = this.gverts.next;
				while(cx_ite != null) {
					var g = cx_ite;
					var l = li;
					li = li.next;
					g.x = this.body.posx + (this.body.axisy * l.x - this.body.axisx * l.y);
					g.y = this.body.posy + (l.x * this.body.axisx + l.y * this.body.axisy);
					cx_ite = cx_ite.next;
				}
			}
		}
	}
	,lverts_post_adder: function(x) {
		x.zpp_inner._invalidate = $bind(this,this.lverts_pa_invalidate);
		x.zpp_inner._isimmutable = $bind(this,this.lverts_pa_immutable);
		var ite = null;
		var ite2 = null;
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var i = cx_ite;
			if(i == x.zpp_inner) {
				break;
			} else {
				if(ite == null) {
					ite = this.gverts.next;
				} else {
					ite = ite.next;
				}
				if(ite2 == null) {
					ite2 = this.edges.head;
				} else {
					ite2 = ite2.next;
				}
			}
			cx_ite = cx_ite.next;
		}
		var ret;
		if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
			ret = new zpp_$nape_geom_ZPP_$Vec2();
		} else {
			ret = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.weak = false;
		ret._immutable = true;
		ret.x = 0;
		ret.y = 0;
		var vec = ret;
		this.gverts.insert(ite,vec);
		if(this.lverts.next.next != null) {
			if(this.lverts.next.next.next == null) {
				var ed;
				if(zpp_$nape_shape_ZPP_$Edge.zpp_pool == null) {
					ed = new zpp_$nape_shape_ZPP_$Edge();
				} else {
					ed = zpp_$nape_shape_ZPP_$Edge.zpp_pool;
					zpp_$nape_shape_ZPP_$Edge.zpp_pool = ed.next;
					ed.next = null;
				}
				ed.polygon = this;
				this.edges.add(ed);
				var ed1;
				if(zpp_$nape_shape_ZPP_$Edge.zpp_pool == null) {
					ed1 = new zpp_$nape_shape_ZPP_$Edge();
				} else {
					ed1 = zpp_$nape_shape_ZPP_$Edge.zpp_pool;
					zpp_$nape_shape_ZPP_$Edge.zpp_pool = ed1.next;
					ed1.next = null;
				}
				ed1.polygon = this;
				this.edges.add(ed1);
				this.edgeCnt += 2;
			} else {
				var ed2;
				if(zpp_$nape_shape_ZPP_$Edge.zpp_pool == null) {
					ed2 = new zpp_$nape_shape_ZPP_$Edge();
				} else {
					ed2 = zpp_$nape_shape_ZPP_$Edge.zpp_pool;
					zpp_$nape_shape_ZPP_$Edge.zpp_pool = ed2.next;
					ed2.next = null;
				}
				ed2.polygon = this;
				this.edges.insert(ite2,ed2);
				this.edgeCnt++;
			}
		}
		vec._validate = $bind(this,this.gverts_pa_validate);
	}
	,lverts_subber: function(x) {
		this.cleanup_lvert(x.zpp_inner);
	}
	,lverts_invalidate: function(_) {
		this.invalidate_lverts();
	}
	,lverts_validate: function() {
		this.validate_lverts();
	}
	,lverts_modifiable: function() {
		this.immutable_midstep("Polygon::localVerts");
		if(this.body != null && this.body.type == 1 && this.body.space != null) {
			throw new js__$Boot_HaxeError("Error: Cannot modifiy shapes of static object once added to Space");
		}
	}
	,getlverts: function() {
		var me = this;
		this.wrap_lverts = zpp_$nape_util_ZPP_$MixVec2List.get(this.lverts);
		this.wrap_lverts.zpp_inner.post_adder = $bind(this,this.lverts_post_adder);
		this.wrap_lverts.zpp_inner.subber = $bind(this,this.lverts_subber);
		this.wrap_lverts.zpp_inner._invalidate = $bind(this,this.lverts_invalidate);
		this.wrap_lverts.zpp_inner._validate = $bind(this,this.lverts_validate);
		this.wrap_lverts.zpp_inner._modifiable = $bind(this,this.lverts_modifiable);
		this.wrap_lverts.zpp_inner.reverse_flag = this.reverse_flag;
	}
	,invalidate_lverts: function() {
		this.invalidate_laxi();
		this.invalidate_area_inertia();
		this.invalidate_angDrag();
		this.invalidate_localCOM();
		this.invalidate_gverts();
		this.zip_lverts = true;
		this.zip_valid = true;
		this.zip_sanitation = true;
		if(this.body != null) {
			this.body.wake();
		}
	}
	,invalidate_laxi: function() {
		this.invalidate_gaxi();
		this.zip_sweepRadius = true;
		this.zip_laxi = true;
	}
	,invalidate_gverts: function() {
		this.zip_aabb = true;
		if(this.body != null) {
			this.body.zip_aabb = true;
		}
		this.zip_gverts = true;
	}
	,invalidate_gaxi: function() {
		this.zip_gaxi = true;
	}
	,valid: function() {
		if(this.zip_valid) {
			this.zip_valid = false;
			if(this.zip_sanitation) {
				this.zip_sanitation = false;
				this.splice_collinear_real();
			}
			if(this.lverts.length < 3) {
				if(zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE = new nape_shape_ValidationResult();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				return this.validation = zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE;
			} else {
				this.validate_lverts();
				this.validate_area_inertia();
				if(this.area < nape_Config.epsilon) {
					if(zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE == null) {
						zpp_$nape_util_ZPP_$Flags.internal = true;
						zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE = new nape_shape_ValidationResult();
						zpp_$nape_util_ZPP_$Flags.internal = false;
					}
					return this.validation = zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE;
				} else {
					var neg = false;
					var pos = false;
					var cx_cont = true;
					var cx_ite = this.lverts.next;
					var u = cx_ite;
					cx_ite = cx_ite.next;
					var v = cx_ite;
					cx_ite = cx_ite.next;
					while(cx_ite != null) {
						var w = cx_ite;
						var ax = 0.0;
						var ay = 0.0;
						ax = w.x - v.x;
						ay = w.y - v.y;
						var bx = 0.0;
						var by = 0.0;
						bx = v.x - u.x;
						by = v.y - u.y;
						var dot = by * ax - bx * ay;
						if(dot > nape_Config.epsilon) {
							pos = true;
						} else if(dot < -nape_Config.epsilon) {
							neg = true;
						}
						if(pos && neg) {
							cx_cont = false;
							break;
						}
						u = v;
						v = w;
						cx_ite = cx_ite.next;
					}
					if(cx_cont) {
						cx_ite = this.lverts.next;
						var w1 = cx_ite;
						while(true) {
							var ax1 = 0.0;
							var ay1 = 0.0;
							ax1 = w1.x - v.x;
							ay1 = w1.y - v.y;
							var bx1 = 0.0;
							var by1 = 0.0;
							bx1 = v.x - u.x;
							by1 = v.y - u.y;
							var dot1 = by1 * ax1 - bx1 * ay1;
							if(dot1 > nape_Config.epsilon) {
								pos = true;
							} else if(dot1 < -nape_Config.epsilon) {
								neg = true;
							}
							if(pos && neg) {
								cx_cont = false;
								break;
							}
							if(!false) {
								break;
							}
						}
						if(cx_cont) {
							u = v;
							v = w1;
							cx_ite = cx_ite.next;
							var w2 = cx_ite;
							while(true) {
								var ax2 = 0.0;
								var ay2 = 0.0;
								ax2 = w2.x - v.x;
								ay2 = w2.y - v.y;
								var bx2 = 0.0;
								var by2 = 0.0;
								bx2 = v.x - u.x;
								by2 = v.y - u.y;
								var dot2 = by2 * ax2 - bx2 * ay2;
								if(dot2 > nape_Config.epsilon) {
									pos = true;
								} else if(dot2 < -nape_Config.epsilon) {
									neg = true;
								}
								if(pos && neg) {
									break;
								}
								if(!false) {
									break;
								}
							}
						}
					}
					if(pos && neg) {
						if(zpp_$nape_util_ZPP_$Flags.ValidationResult_CONCAVE == null) {
							zpp_$nape_util_ZPP_$Flags.internal = true;
							zpp_$nape_util_ZPP_$Flags.ValidationResult_CONCAVE = new nape_shape_ValidationResult();
							zpp_$nape_util_ZPP_$Flags.internal = false;
						}
						return this.validation = zpp_$nape_util_ZPP_$Flags.ValidationResult_CONCAVE;
					} else {
						var cont = true;
						var cx_cont1 = true;
						var cx_ite1 = this.lverts.next;
						var u1 = cx_ite1;
						cx_ite1 = cx_ite1.next;
						while(cx_ite1 != null) {
							var v1 = cx_ite1;
							if(!cont) {
								cx_cont1 = false;
								break;
							}
							var cx_cont2 = true;
							var cx_ite2 = this.lverts.next;
							var a = cx_ite2;
							cx_ite2 = cx_ite2.next;
							while(cx_ite2 != null) {
								var b = cx_ite2;
								if(u1 == a || u1 == b || v1 == a || v1 == b) {
									a = b;
									cx_ite2 = cx_ite2.next;
									continue;
								}
								var sx = 0.0;
								var sy = 0.0;
								sx = u1.x - a.x;
								sy = u1.y - a.y;
								var vx = 0.0;
								var vy = 0.0;
								vx = v1.x - u1.x;
								vy = v1.y - u1.y;
								var qx = 0.0;
								var qy = 0.0;
								qx = b.x - a.x;
								qy = b.y - a.y;
								var den = vy * qx - vx * qy;
								if(den * den > nape_Config.epsilon) {
									den = 1 / den;
									var t = (qy * sx - qx * sy) * den;
									if(t > nape_Config.epsilon && t < 1 - nape_Config.epsilon) {
										var s = (vy * sx - vx * sy) * den;
										if(s > nape_Config.epsilon && s < 1 - nape_Config.epsilon) {
											cont = false;
											cx_cont2 = false;
											break;
										}
									}
								}
								a = b;
								cx_ite2 = cx_ite2.next;
							}
							if(cx_cont2) {
								while(true) {
									var b1 = this.lverts.next;
									if(u1 == a || u1 == b1 || v1 == a || v1 == b1) {
										break;
									}
									var sx1 = 0.0;
									var sy1 = 0.0;
									sx1 = u1.x - a.x;
									sy1 = u1.y - a.y;
									var vx1 = 0.0;
									var vy1 = 0.0;
									vx1 = v1.x - u1.x;
									vy1 = v1.y - u1.y;
									var qx1 = 0.0;
									var qy1 = 0.0;
									qx1 = b1.x - a.x;
									qy1 = b1.y - a.y;
									var den1 = vy1 * qx1 - vx1 * qy1;
									if(den1 * den1 > nape_Config.epsilon) {
										den1 = 1 / den1;
										var t1 = (qy1 * sx1 - qx1 * sy1) * den1;
										if(t1 > nape_Config.epsilon && t1 < 1 - nape_Config.epsilon) {
											var s1 = (vy1 * sx1 - vx1 * sy1) * den1;
											if(s1 > nape_Config.epsilon && s1 < 1 - nape_Config.epsilon) {
												cont = false;
												break;
											}
										}
									}
									if(!false) {
										break;
									}
								}
							}
							u1 = v1;
							cx_ite1 = cx_ite1.next;
						}
						if(cx_cont1) {
							while(true) {
								var v2 = this.lverts.next;
								if(!cont) {
									break;
								}
								var cx_cont3 = true;
								var cx_ite3 = this.lverts.next;
								var a1 = cx_ite3;
								cx_ite3 = cx_ite3.next;
								while(cx_ite3 != null) {
									var b2 = cx_ite3;
									if(u1 == a1 || u1 == b2 || v2 == a1 || v2 == b2) {
										a1 = b2;
										cx_ite3 = cx_ite3.next;
										continue;
									}
									var sx2 = 0.0;
									var sy2 = 0.0;
									sx2 = u1.x - a1.x;
									sy2 = u1.y - a1.y;
									var vx2 = 0.0;
									var vy2 = 0.0;
									vx2 = v2.x - u1.x;
									vy2 = v2.y - u1.y;
									var qx2 = 0.0;
									var qy2 = 0.0;
									qx2 = b2.x - a1.x;
									qy2 = b2.y - a1.y;
									var den2 = vy2 * qx2 - vx2 * qy2;
									if(den2 * den2 > nape_Config.epsilon) {
										den2 = 1 / den2;
										var t2 = (qy2 * sx2 - qx2 * sy2) * den2;
										if(t2 > nape_Config.epsilon && t2 < 1 - nape_Config.epsilon) {
											var s2 = (vy2 * sx2 - vx2 * sy2) * den2;
											if(s2 > nape_Config.epsilon && s2 < 1 - nape_Config.epsilon) {
												cont = false;
												cx_cont3 = false;
												break;
											}
										}
									}
									a1 = b2;
									cx_ite3 = cx_ite3.next;
								}
								if(cx_cont3) {
									while(true) {
										var b3 = this.lverts.next;
										if(u1 == a1 || u1 == b3 || v2 == a1 || v2 == b3) {
											break;
										}
										var sx3 = 0.0;
										var sy3 = 0.0;
										sx3 = u1.x - a1.x;
										sy3 = u1.y - a1.y;
										var vx3 = 0.0;
										var vy3 = 0.0;
										vx3 = v2.x - u1.x;
										vy3 = v2.y - u1.y;
										var qx3 = 0.0;
										var qy3 = 0.0;
										qx3 = b3.x - a1.x;
										qy3 = b3.y - a1.y;
										var den3 = vy3 * qx3 - vx3 * qy3;
										if(den3 * den3 > nape_Config.epsilon) {
											den3 = 1 / den3;
											var t3 = (qy3 * sx3 - qx3 * sy3) * den3;
											if(t3 > nape_Config.epsilon && t3 < 1 - nape_Config.epsilon) {
												var s3 = (vy3 * sx3 - vx3 * sy3) * den3;
												if(s3 > nape_Config.epsilon && s3 < 1 - nape_Config.epsilon) {
													cont = false;
													break;
												}
											}
										}
										if(!false) {
											break;
										}
									}
								}
								if(!false) {
									break;
								}
							}
						}
						if(!cont) {
							if(zpp_$nape_util_ZPP_$Flags.ValidationResult_SELF_INTERSECTING == null) {
								zpp_$nape_util_ZPP_$Flags.internal = true;
								zpp_$nape_util_ZPP_$Flags.ValidationResult_SELF_INTERSECTING = new nape_shape_ValidationResult();
								zpp_$nape_util_ZPP_$Flags.internal = false;
							}
							return this.validation = zpp_$nape_util_ZPP_$Flags.ValidationResult_SELF_INTERSECTING;
						} else {
							if(zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID == null) {
								zpp_$nape_util_ZPP_$Flags.internal = true;
								zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID = new nape_shape_ValidationResult();
								zpp_$nape_util_ZPP_$Flags.internal = false;
							}
							return this.validation = zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID;
						}
					}
				}
			}
		} else {
			return this.validation;
		}
	}
	,validate_lverts: function() {
		if(this.zip_lverts) {
			this.zip_lverts = false;
			if(this.lverts.length > 2) {
				this.validate_area_inertia();
				if(this.area < 0) {
					this.reverse_vertices();
					this.area = -this.area;
				}
			}
		}
	}
	,cleanup_lvert: function(x) {
		var ite = null;
		var ite2 = null;
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var i = cx_ite;
			if(i == x) {
				break;
			} else {
				if(ite == null) {
					ite = this.gverts.next;
				} else {
					ite = ite.next;
				}
				if(ite2 == null) {
					ite2 = this.edges.head;
				} else {
					ite2 = ite2.next;
				}
			}
			cx_ite = cx_ite.next;
		}
		var rem = ite == null ? this.gverts.next : ite.next;
		this.gverts.erase(ite);
		var o = rem;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
		if(this.edgeCnt == 2) {
			var rem1 = this.edges.pop_unsafe();
			var o1 = rem1;
			o1.polygon = null;
			o1.next = zpp_$nape_shape_ZPP_$Edge.zpp_pool;
			zpp_$nape_shape_ZPP_$Edge.zpp_pool = o1;
			rem1 = this.edges.pop_unsafe();
			var o2 = rem1;
			o2.polygon = null;
			o2.next = zpp_$nape_shape_ZPP_$Edge.zpp_pool;
			zpp_$nape_shape_ZPP_$Edge.zpp_pool = o2;
			this.edgeCnt = 0;
		} else if(this.edgeCnt != 0) {
			var rem2 = ite2 == null ? this.edges.head.elt : ite2.next.elt;
			this.edges.erase(ite2);
			var o3 = rem2;
			o3.polygon = null;
			o3.next = zpp_$nape_shape_ZPP_$Edge.zpp_pool;
			zpp_$nape_shape_ZPP_$Edge.zpp_pool = o3;
			this.edgeCnt--;
		}
	}
	,splice_collinear_real: function() {
		if(this.lverts.next == null) {
			return;
		}
		if(this.lverts.next.next == null) {
			return;
		}
		if(this.lverts.next.next.next == null) {
			return;
		}
		var pre = null;
		var cur = this.lverts.next;
		while(cur != null) {
			var nxt = cur.next == null ? this.lverts.next : cur.next;
			var u = cur;
			var v = nxt;
			var dx = 0.0;
			var dy = 0.0;
			dx = u.x - v.x;
			dy = u.y - v.y;
			if(dx * dx + dy * dy < nape_Config.epsilon * nape_Config.epsilon) {
				this.cleanup_lvert(cur);
				cur = this.lverts.erase(pre);
			} else {
				pre = cur;
				cur = cur.next;
			}
		}
		if(this.lverts.next == null) {
			return;
		}
		var removed;
		while(true) {
			removed = false;
			var pre1 = this.lverts.next;
			while(pre1 != null) {
				var cur1 = pre1.next == null ? this.lverts.next : pre1.next;
				var nxt1 = cur1.next == null ? this.lverts.next : cur1.next;
				var u1 = pre1;
				var v1 = cur1;
				var w = nxt1;
				var ax = 0.0;
				var ay = 0.0;
				ax = v1.x - u1.x;
				ay = v1.y - u1.y;
				var bx = 0.0;
				var by = 0.0;
				bx = w.x - v1.x;
				by = w.y - v1.y;
				var crs = by * ax - bx * ay;
				if(crs * crs >= nape_Config.epsilon * nape_Config.epsilon) {
					pre1 = pre1.next;
				} else {
					this.cleanup_lvert(cur1);
					this.lverts.erase(pre1.next == null ? null : pre1);
					removed = true;
					pre1 = pre1.next;
				}
			}
			if(!removed) {
				break;
			}
		}
	}
	,reverse_vertices: function() {
		this.lverts.reverse();
		this.gverts.reverse();
		this.edges.reverse();
		var ite = this.edges.iterator_at(this.edgeCnt - 1);
		var elem = this.edges.pop_unsafe();
		this.edges.insert(ite,elem);
		this.reverse_flag = !this.reverse_flag;
		if(this.wrap_lverts != null) {
			this.wrap_lverts.zpp_inner.reverse_flag = this.reverse_flag;
		}
		if(this.wrap_gverts != null) {
			this.wrap_gverts.zpp_inner.reverse_flag = this.reverse_flag;
		}
		if(this.wrap_edges != null) {
			this.wrap_edges.zpp_inner.reverse_flag = this.reverse_flag;
		}
	}
	,validate_laxi: function() {
		if(this.zip_laxi) {
			this.zip_laxi = false;
			this.validate_lverts();
			var ite = this.edges.head;
			var cx_ite = this.lverts.next;
			var u = cx_ite;
			cx_ite = cx_ite.next;
			while(cx_ite != null) {
				var v = cx_ite;
				var edge = ite.elt;
				ite = ite.next;
				edge.lp0 = u;
				edge.lp1 = v;
				var dx = 0.0;
				var dy = 0.0;
				dx = u.x - v.x;
				dy = u.y - v.y;
				var l = Math.sqrt(dx * dx + dy * dy);
				edge.length = l;
				var t = 1.0 / l;
				dx *= t;
				dy *= t;
				var t1 = dx;
				dx = -dy;
				dy = t1;
				edge.lprojection = dx * u.x + dy * u.y;
				edge.lnormx = dx;
				edge.lnormy = dy;
				if(edge.wrap_lnorm != null) {
					edge.wrap_lnorm.zpp_inner.x = dx;
					edge.wrap_lnorm.zpp_inner.y = dy;
				}
				u = v;
				cx_ite = cx_ite.next;
			}
			var v1 = this.lverts.next;
			var edge1 = ite.elt;
			ite = ite.next;
			edge1.lp0 = u;
			edge1.lp1 = v1;
			var dx1 = 0.0;
			var dy1 = 0.0;
			dx1 = u.x - v1.x;
			dy1 = u.y - v1.y;
			var l1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);
			edge1.length = l1;
			var t2 = 1.0 / l1;
			dx1 *= t2;
			dy1 *= t2;
			var t3 = dx1;
			dx1 = -dy1;
			dy1 = t3;
			edge1.lprojection = dx1 * u.x + dy1 * u.y;
			edge1.lnormx = dx1;
			edge1.lnormy = dy1;
			if(edge1.wrap_lnorm != null) {
				edge1.wrap_lnorm.zpp_inner.x = dx1;
				edge1.wrap_lnorm.zpp_inner.y = dy1;
			}
		}
	}
	,__validate_sweepRadius: function() {
		var maxRadius = 0.0;
		var minRadius = 0.0;
		this.validate_laxi();
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var x = cx_ite;
			var r = x.x * x.x + x.y * x.y;
			if(r > maxRadius) {
				maxRadius = r;
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = this.edges.head;
		while(cx_ite1 != null) {
			var e = cx_ite1.elt;
			if(e.lprojection < minRadius) {
				minRadius = e.lprojection;
				if(minRadius < 0) {
					break;
				}
			}
			cx_ite1 = cx_ite1.next;
		}
		if(minRadius < 0) {
			minRadius = 0;
		}
		this.sweepRadius = Math.sqrt(maxRadius);
		this.sweepCoef = this.sweepRadius - minRadius;
	}
	,__validate_area_inertia: function() {
		if(this.lverts.next == null || this.lverts.next.next == null || this.lverts.next.next.next == null) {
			this.area = 0;
			this.inertia = 0;
		} else {
			this.area = 0.0;
			var s1 = 0.0;
			var s2 = 0.0;
			var cx_ite = this.lverts.next;
			var u = cx_ite;
			cx_ite = cx_ite.next;
			var v = cx_ite;
			cx_ite = cx_ite.next;
			while(cx_ite != null) {
				var w = cx_ite;
				var a = v.y * u.x - v.x * u.y;
				var b = v.x * v.x + v.y * v.y + (v.x * u.x + v.y * u.y) + (u.x * u.x + u.y * u.y);
				s1 += a * b;
				s2 += a;
				this.area += v.x * (w.y - u.y);
				u = v;
				v = w;
				cx_ite = cx_ite.next;
			}
			cx_ite = this.lverts.next;
			var w1 = cx_ite;
			var a1 = v.y * u.x - v.x * u.y;
			var b1 = v.x * v.x + v.y * v.y + (v.x * u.x + v.y * u.y) + (u.x * u.x + u.y * u.y);
			s1 += a1 * b1;
			s2 += a1;
			this.area += v.x * (w1.y - u.y);
			u = v;
			v = w1;
			cx_ite = cx_ite.next;
			var w2 = cx_ite;
			var a2 = v.y * u.x - v.x * u.y;
			var b2 = v.x * v.x + v.y * v.y + (v.x * u.x + v.y * u.y) + (u.x * u.x + u.y * u.y);
			s1 += a2 * b2;
			s2 += a2;
			this.area += v.x * (w2.y - u.y);
			this.inertia = s1 / (6 * s2);
			this.area *= 0.5;
			if(this.area < 0) {
				this.area = -this.area;
				this.reverse_vertices();
			}
		}
	}
	,__validate_angDrag: function() {
		if(this.lverts.length < 3) {
			throw new js__$Boot_HaxeError("Error: Polygon's with less than 3 vertices have no meaningful angDrag");
		}
		this.validate_area_inertia();
		this.validate_laxi();
		var accum = 0.0;
		var ei = this.edges.head;
		var perim = 0.0;
		var cx_cont = true;
		var cx_itei = this.lverts.next;
		var u = cx_itei;
		var cx_itej = cx_itei.next;
		while(cx_itej != null) {
			var v = cx_itej;
			var edge = ei.elt;
			ei = ei.next;
			perim += edge.length;
			var dx = 0.0;
			var dy = 0.0;
			dx = v.x - u.x;
			dy = v.y - u.y;
			accum += edge.length * nape_Config.fluidAngularDragFriction * this.material.dynamicFriction * edge.lprojection * edge.lprojection;
			var t = -(u.y * edge.lnormx - u.x * edge.lnormy) / (dy * edge.lnormx - dx * edge.lnormy);
			if(t > 0) {
				var ta = t > 1 ? 1 : t;
				var cx = 0.0;
				var cy = 0.0;
				cx = u.x;
				cy = u.y;
				var t1 = ta;
				cx += dx * t1;
				cy += dy * t1;
				var dota = edge.lnormy * u.x - edge.lnormx * u.y;
				var dotb = edge.lnormy * cx - edge.lnormx * cy;
				var dots = (dotb * dotb * dotb - dota * dota * dota) / (3 * (dotb - dota));
				accum += dots * ta * edge.length * nape_Config.fluidAngularDrag;
			}
			if(t < 1) {
				var tb = t < 0 ? 0 : t;
				var cx1 = 0.0;
				var cy1 = 0.0;
				cx1 = u.x;
				cy1 = u.y;
				var t2 = tb;
				cx1 += dx * t2;
				cy1 += dy * t2;
				var dota1 = edge.lnormy * cx1 - edge.lnormx * cy1;
				var dotb1 = edge.lnormy * v.x - edge.lnormx * v.y;
				var dots1 = (dotb1 * dotb1 * dotb1 - dota1 * dota1 * dota1) / (3 * (dotb1 - dota1));
				accum += dots1 * nape_Config.fluidVacuumDrag * (1 - tb) * edge.length * nape_Config.fluidAngularDrag;
			}
			cx_itei = cx_itej;
			u = v;
			cx_itej = cx_itej.next;
		}
		if(cx_cont) {
			while(true) {
				cx_itej = this.lverts.next;
				var v1 = cx_itej;
				var edge1 = ei.elt;
				ei = ei.next;
				perim += edge1.length;
				var dx1 = 0.0;
				var dy1 = 0.0;
				dx1 = v1.x - u.x;
				dy1 = v1.y - u.y;
				accum += edge1.length * nape_Config.fluidAngularDragFriction * this.material.dynamicFriction * edge1.lprojection * edge1.lprojection;
				var t3 = -(u.y * edge1.lnormx - u.x * edge1.lnormy) / (dy1 * edge1.lnormx - dx1 * edge1.lnormy);
				if(t3 > 0) {
					var ta1 = t3 > 1 ? 1 : t3;
					var cx2 = 0.0;
					var cy2 = 0.0;
					cx2 = u.x;
					cy2 = u.y;
					var t4 = ta1;
					cx2 += dx1 * t4;
					cy2 += dy1 * t4;
					var dota2 = edge1.lnormy * u.x - edge1.lnormx * u.y;
					var dotb2 = edge1.lnormy * cx2 - edge1.lnormx * cy2;
					var dots2 = (dotb2 * dotb2 * dotb2 - dota2 * dota2 * dota2) / (3 * (dotb2 - dota2));
					accum += dots2 * ta1 * edge1.length * nape_Config.fluidAngularDrag;
				}
				if(t3 < 1) {
					var tb1 = t3 < 0 ? 0 : t3;
					var cx3 = 0.0;
					var cy3 = 0.0;
					cx3 = u.x;
					cy3 = u.y;
					var t5 = tb1;
					cx3 += dx1 * t5;
					cy3 += dy1 * t5;
					var dota3 = edge1.lnormy * cx3 - edge1.lnormx * cy3;
					var dotb3 = edge1.lnormy * v1.x - edge1.lnormx * v1.y;
					var dots3 = (dotb3 * dotb3 * dotb3 - dota3 * dota3 * dota3) / (3 * (dotb3 - dota3));
					accum += dots3 * nape_Config.fluidVacuumDrag * (1 - tb1) * edge1.length * nape_Config.fluidAngularDrag;
				}
				if(!false) {
					break;
				}
			}
		}
		this.angDrag = accum / (this.inertia * perim);
	}
	,__class__: zpp_$nape_shape_ZPP_$Polygon
});
var zpp_$nape_space_ZPP_$Broadphase = function() {
	this.dynab = null;
	this.sweep = null;
	this.is_sweep = false;
	this.space = null;
};
zpp_$nape_space_ZPP_$Broadphase.__name__ = true;
zpp_$nape_space_ZPP_$Broadphase.prototype = {
	insert: function(shape) {
		if(this.is_sweep) {
			this.sweep.__insert(shape);
		} else {
			this.dynab.__insert(shape);
		}
	}
	,remove: function(shape) {
		if(this.is_sweep) {
			this.sweep.__remove(shape);
		} else {
			this.dynab.__remove(shape);
		}
	}
	,sync: function(shape) {
		if(this.is_sweep) {
			if(!this.sweep.space.continuous) {
				if(shape.zip_aabb) {
					if(shape.body != null) {
						shape.zip_aabb = false;
						if(shape.type == 0) {
							var _this = shape.circle;
							if(_this.zip_worldCOM) {
								if(_this.body != null) {
									_this.zip_worldCOM = false;
									if(_this.zip_localCOM) {
										_this.zip_localCOM = false;
										if(_this.type == 1) {
											var _this1 = _this.polygon;
											if(_this1.lverts.next == null) {
												throw new js__$Boot_HaxeError("Error: An empty polygon has no meaningful localCOM");
											}
											if(_this1.lverts.next.next == null) {
												_this1.localCOMx = _this1.lverts.next.x;
												_this1.localCOMy = _this1.lverts.next.y;
											} else if(_this1.lverts.next.next.next == null) {
												_this1.localCOMx = _this1.lverts.next.x;
												_this1.localCOMy = _this1.lverts.next.y;
												var t = 1.0;
												_this1.localCOMx += _this1.lverts.next.next.x * t;
												_this1.localCOMy += _this1.lverts.next.next.y * t;
												var t1 = 0.5;
												_this1.localCOMx *= t1;
												_this1.localCOMy *= t1;
											} else {
												_this1.localCOMx = 0;
												_this1.localCOMy = 0;
												var area = 0.0;
												var cx_ite = _this1.lverts.next;
												var u = cx_ite;
												cx_ite = cx_ite.next;
												var v = cx_ite;
												cx_ite = cx_ite.next;
												while(cx_ite != null) {
													var w = cx_ite;
													area += v.x * (w.y - u.y);
													var cf = w.y * v.x - w.x * v.y;
													_this1.localCOMx += (v.x + w.x) * cf;
													_this1.localCOMy += (v.y + w.y) * cf;
													u = v;
													v = w;
													cx_ite = cx_ite.next;
												}
												cx_ite = _this1.lverts.next;
												var w1 = cx_ite;
												area += v.x * (w1.y - u.y);
												var cf1 = w1.y * v.x - w1.x * v.y;
												_this1.localCOMx += (v.x + w1.x) * cf1;
												_this1.localCOMy += (v.y + w1.y) * cf1;
												u = v;
												v = w1;
												cx_ite = cx_ite.next;
												var w2 = cx_ite;
												area += v.x * (w2.y - u.y);
												var cf2 = w2.y * v.x - w2.x * v.y;
												_this1.localCOMx += (v.x + w2.x) * cf2;
												_this1.localCOMy += (v.y + w2.y) * cf2;
												area = 1 / (3 * area);
												var t2 = area;
												_this1.localCOMx *= t2;
												_this1.localCOMy *= t2;
											}
										}
										if(_this.wrap_localCOM != null) {
											_this.wrap_localCOM.zpp_inner.x = _this.localCOMx;
											_this.wrap_localCOM.zpp_inner.y = _this.localCOMy;
										}
									}
									var _this2 = _this.body;
									if(_this2.zip_axis) {
										_this2.zip_axis = false;
										_this2.axisx = Math.sin(_this2.rot);
										_this2.axisy = Math.cos(_this2.rot);
									}
									_this.worldCOMx = _this.body.posx + (_this.body.axisy * _this.localCOMx - _this.body.axisx * _this.localCOMy);
									_this.worldCOMy = _this.body.posy + (_this.localCOMx * _this.body.axisx + _this.localCOMy * _this.body.axisy);
								}
							}
							var rx = _this.radius;
							var ry = _this.radius;
							_this.aabb.minx = _this.worldCOMx - rx;
							_this.aabb.miny = _this.worldCOMy - ry;
							_this.aabb.maxx = _this.worldCOMx + rx;
							_this.aabb.maxy = _this.worldCOMy + ry;
						} else {
							var _this3 = shape.polygon;
							if(_this3.zip_gverts) {
								if(_this3.body != null) {
									_this3.zip_gverts = false;
									_this3.validate_lverts();
									var _this4 = _this3.body;
									if(_this4.zip_axis) {
										_this4.zip_axis = false;
										_this4.axisx = Math.sin(_this4.rot);
										_this4.axisy = Math.cos(_this4.rot);
									}
									var li = _this3.lverts.next;
									var cx_ite1 = _this3.gverts.next;
									while(cx_ite1 != null) {
										var g = cx_ite1;
										var l = li;
										li = li.next;
										g.x = _this3.body.posx + (_this3.body.axisy * l.x - _this3.body.axisx * l.y);
										g.y = _this3.body.posy + (l.x * _this3.body.axisx + l.y * _this3.body.axisy);
										cx_ite1 = cx_ite1.next;
									}
								}
							}
							if(_this3.lverts.next == null) {
								throw new js__$Boot_HaxeError("Error: An empty polygon has no meaningful bounds");
							}
							var p0 = _this3.gverts.next;
							_this3.aabb.minx = p0.x;
							_this3.aabb.miny = p0.y;
							_this3.aabb.maxx = p0.x;
							_this3.aabb.maxy = p0.y;
							var cx_ite2 = _this3.gverts.next.next;
							while(cx_ite2 != null) {
								var p = cx_ite2;
								if(p.x < _this3.aabb.minx) {
									_this3.aabb.minx = p.x;
								}
								if(p.x > _this3.aabb.maxx) {
									_this3.aabb.maxx = p.x;
								}
								if(p.y < _this3.aabb.miny) {
									_this3.aabb.miny = p.y;
								}
								if(p.y > _this3.aabb.maxy) {
									_this3.aabb.maxy = p.y;
								}
								cx_ite2 = cx_ite2.next;
							}
						}
					}
				}
			}
		} else {
			var _this5 = this.dynab;
			var node = shape.node;
			if(!node.synced) {
				if(!_this5.space.continuous) {
					if(shape.zip_aabb) {
						if(shape.body != null) {
							shape.zip_aabb = false;
							if(shape.type == 0) {
								var _this6 = shape.circle;
								if(_this6.zip_worldCOM) {
									if(_this6.body != null) {
										_this6.zip_worldCOM = false;
										if(_this6.zip_localCOM) {
											_this6.zip_localCOM = false;
											if(_this6.type == 1) {
												var _this7 = _this6.polygon;
												if(_this7.lverts.next == null) {
													throw new js__$Boot_HaxeError("Error: An empty polygon has no meaningful localCOM");
												}
												if(_this7.lverts.next.next == null) {
													_this7.localCOMx = _this7.lverts.next.x;
													_this7.localCOMy = _this7.lverts.next.y;
												} else if(_this7.lverts.next.next.next == null) {
													_this7.localCOMx = _this7.lverts.next.x;
													_this7.localCOMy = _this7.lverts.next.y;
													var t3 = 1.0;
													_this7.localCOMx += _this7.lverts.next.next.x * t3;
													_this7.localCOMy += _this7.lverts.next.next.y * t3;
													var t4 = 0.5;
													_this7.localCOMx *= t4;
													_this7.localCOMy *= t4;
												} else {
													_this7.localCOMx = 0;
													_this7.localCOMy = 0;
													var area1 = 0.0;
													var cx_ite3 = _this7.lverts.next;
													var u1 = cx_ite3;
													cx_ite3 = cx_ite3.next;
													var v1 = cx_ite3;
													cx_ite3 = cx_ite3.next;
													while(cx_ite3 != null) {
														var w3 = cx_ite3;
														area1 += v1.x * (w3.y - u1.y);
														var cf3 = w3.y * v1.x - w3.x * v1.y;
														_this7.localCOMx += (v1.x + w3.x) * cf3;
														_this7.localCOMy += (v1.y + w3.y) * cf3;
														u1 = v1;
														v1 = w3;
														cx_ite3 = cx_ite3.next;
													}
													cx_ite3 = _this7.lverts.next;
													var w4 = cx_ite3;
													area1 += v1.x * (w4.y - u1.y);
													var cf4 = w4.y * v1.x - w4.x * v1.y;
													_this7.localCOMx += (v1.x + w4.x) * cf4;
													_this7.localCOMy += (v1.y + w4.y) * cf4;
													u1 = v1;
													v1 = w4;
													cx_ite3 = cx_ite3.next;
													var w5 = cx_ite3;
													area1 += v1.x * (w5.y - u1.y);
													var cf5 = w5.y * v1.x - w5.x * v1.y;
													_this7.localCOMx += (v1.x + w5.x) * cf5;
													_this7.localCOMy += (v1.y + w5.y) * cf5;
													area1 = 1 / (3 * area1);
													var t5 = area1;
													_this7.localCOMx *= t5;
													_this7.localCOMy *= t5;
												}
											}
											if(_this6.wrap_localCOM != null) {
												_this6.wrap_localCOM.zpp_inner.x = _this6.localCOMx;
												_this6.wrap_localCOM.zpp_inner.y = _this6.localCOMy;
											}
										}
										var _this8 = _this6.body;
										if(_this8.zip_axis) {
											_this8.zip_axis = false;
											_this8.axisx = Math.sin(_this8.rot);
											_this8.axisy = Math.cos(_this8.rot);
										}
										_this6.worldCOMx = _this6.body.posx + (_this6.body.axisy * _this6.localCOMx - _this6.body.axisx * _this6.localCOMy);
										_this6.worldCOMy = _this6.body.posy + (_this6.localCOMx * _this6.body.axisx + _this6.localCOMy * _this6.body.axisy);
									}
								}
								var rx1 = _this6.radius;
								var ry1 = _this6.radius;
								_this6.aabb.minx = _this6.worldCOMx - rx1;
								_this6.aabb.miny = _this6.worldCOMy - ry1;
								_this6.aabb.maxx = _this6.worldCOMx + rx1;
								_this6.aabb.maxy = _this6.worldCOMy + ry1;
							} else {
								var _this9 = shape.polygon;
								if(_this9.zip_gverts) {
									if(_this9.body != null) {
										_this9.zip_gverts = false;
										_this9.validate_lverts();
										var _this10 = _this9.body;
										if(_this10.zip_axis) {
											_this10.zip_axis = false;
											_this10.axisx = Math.sin(_this10.rot);
											_this10.axisy = Math.cos(_this10.rot);
										}
										var li1 = _this9.lverts.next;
										var cx_ite4 = _this9.gverts.next;
										while(cx_ite4 != null) {
											var g1 = cx_ite4;
											var l1 = li1;
											li1 = li1.next;
											g1.x = _this9.body.posx + (_this9.body.axisy * l1.x - _this9.body.axisx * l1.y);
											g1.y = _this9.body.posy + (l1.x * _this9.body.axisx + l1.y * _this9.body.axisy);
											cx_ite4 = cx_ite4.next;
										}
									}
								}
								if(_this9.lverts.next == null) {
									throw new js__$Boot_HaxeError("Error: An empty polygon has no meaningful bounds");
								}
								var p01 = _this9.gverts.next;
								_this9.aabb.minx = p01.x;
								_this9.aabb.miny = p01.y;
								_this9.aabb.maxx = p01.x;
								_this9.aabb.maxy = p01.y;
								var cx_ite5 = _this9.gverts.next.next;
								while(cx_ite5 != null) {
									var p1 = cx_ite5;
									if(p1.x < _this9.aabb.minx) {
										_this9.aabb.minx = p1.x;
									}
									if(p1.x > _this9.aabb.maxx) {
										_this9.aabb.maxx = p1.x;
									}
									if(p1.y < _this9.aabb.miny) {
										_this9.aabb.miny = p1.y;
									}
									if(p1.y > _this9.aabb.maxy) {
										_this9.aabb.maxy = p1.y;
									}
									cx_ite5 = cx_ite5.next;
								}
							}
						}
					}
				}
				var sync;
				if(node.dyn == (shape.body.type == 1 ? false : !shape.body.component.sleeping)) {
					var _this11 = node.aabb;
					var x = shape.aabb;
					sync = !(x.minx >= _this11.minx && x.miny >= _this11.miny && x.maxx <= _this11.maxx && x.maxy <= _this11.maxy);
				} else {
					sync = true;
				}
				if(sync) {
					node.synced = true;
					node.snext = _this5.syncs;
					_this5.syncs = node;
				}
			}
		}
	}
	,broadphase: function(space,discrete) {
	}
	,__class__: zpp_$nape_space_ZPP_$Broadphase
};
var zpp_$nape_space_ZPP_$AABBNode = function() {
	this.first_sync = false;
	this.synced = false;
	this.snext = null;
	this.moved = false;
	this.mnext = null;
	this.next = null;
	this.height = 0;
	this.child2 = null;
	this.child1 = null;
	this.parent = null;
	this.dyn = false;
	this.shape = null;
	this.aabb = null;
	this.height = -1;
};
zpp_$nape_space_ZPP_$AABBNode.__name__ = true;
zpp_$nape_space_ZPP_$AABBNode.prototype = {
	__class__: zpp_$nape_space_ZPP_$AABBNode
};
var zpp_$nape_space_ZPP_$AABBPair = function() {
	this.next = null;
	this.arb = null;
	this.di = 0;
	this.id = 0;
	this.sleeping = false;
	this.first = false;
	this.n2 = null;
	this.n1 = null;
};
zpp_$nape_space_ZPP_$AABBPair.__name__ = true;
zpp_$nape_space_ZPP_$AABBPair.prototype = {
	__class__: zpp_$nape_space_ZPP_$AABBPair
};
var zpp_$nape_space_ZPP_$AABBTree = function() {
	this.root = null;
};
zpp_$nape_space_ZPP_$AABBTree.__name__ = true;
zpp_$nape_space_ZPP_$AABBTree.prototype = {
	removeLeaf: function(leaf) {
		if(leaf == this.root) {
			this.root = null;
		} else {
			var parent = leaf.parent;
			var gparent = parent.parent;
			var sibling = parent.child1 == leaf ? parent.child2 : parent.child1;
			if(gparent != null) {
				if(gparent.child1 == parent) {
					gparent.child1 = sibling;
				} else {
					gparent.child2 = sibling;
				}
				sibling.parent = gparent;
				var o = parent;
				o.height = -1;
				var o1 = o.aabb;
				if(o1.outer != null) {
					o1.outer.zpp_inner = null;
					o1.outer = null;
				}
				o1.wrap_min = o1.wrap_max = null;
				o1._invalidate = null;
				o1._validate = null;
				o1.next = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
				zpp_$nape_geom_ZPP_$AABB.zpp_pool = o1;
				o.child1 = o.child2 = o.parent = null;
				o.next = null;
				o.snext = null;
				o.mnext = null;
				o.next = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
				zpp_$nape_space_ZPP_$AABBNode.zpp_pool = o;
				var node = gparent;
				while(node != null) {
					if(node.child1 == null || node.height < 2) {
						node = node;
					} else {
						var b = node.child1;
						var c = node.child2;
						var balance = c.height - b.height;
						if(balance > 1) {
							var f = c.child1;
							var g = c.child2;
							c.child1 = node;
							c.parent = node.parent;
							node.parent = c;
							if(c.parent != null) {
								if(c.parent.child1 == node) {
									c.parent.child1 = c;
								} else {
									c.parent.child2 = c;
								}
							} else {
								this.root = c;
							}
							if(f.height > g.height) {
								c.child2 = f;
								node.child2 = g;
								g.parent = node;
								var _this = node.aabb;
								var a = b.aabb;
								var b1 = g.aabb;
								_this.minx = a.minx < b1.minx ? a.minx : b1.minx;
								_this.miny = a.miny < b1.miny ? a.miny : b1.miny;
								_this.maxx = a.maxx > b1.maxx ? a.maxx : b1.maxx;
								_this.maxy = a.maxy > b1.maxy ? a.maxy : b1.maxy;
								var _this1 = c.aabb;
								var a1 = node.aabb;
								var b2 = f.aabb;
								_this1.minx = a1.minx < b2.minx ? a1.minx : b2.minx;
								_this1.miny = a1.miny < b2.miny ? a1.miny : b2.miny;
								_this1.maxx = a1.maxx > b2.maxx ? a1.maxx : b2.maxx;
								_this1.maxy = a1.maxy > b2.maxy ? a1.maxy : b2.maxy;
								var x = b.height;
								var y = g.height;
								node.height = 1 + (x > y ? x : y);
								var x1 = node.height;
								var y1 = f.height;
								c.height = 1 + (x1 > y1 ? x1 : y1);
							} else {
								c.child2 = g;
								node.child2 = f;
								f.parent = node;
								var _this2 = node.aabb;
								var a2 = b.aabb;
								var b3 = f.aabb;
								_this2.minx = a2.minx < b3.minx ? a2.minx : b3.minx;
								_this2.miny = a2.miny < b3.miny ? a2.miny : b3.miny;
								_this2.maxx = a2.maxx > b3.maxx ? a2.maxx : b3.maxx;
								_this2.maxy = a2.maxy > b3.maxy ? a2.maxy : b3.maxy;
								var _this3 = c.aabb;
								var a3 = node.aabb;
								var b4 = g.aabb;
								_this3.minx = a3.minx < b4.minx ? a3.minx : b4.minx;
								_this3.miny = a3.miny < b4.miny ? a3.miny : b4.miny;
								_this3.maxx = a3.maxx > b4.maxx ? a3.maxx : b4.maxx;
								_this3.maxy = a3.maxy > b4.maxy ? a3.maxy : b4.maxy;
								var x2 = b.height;
								var y2 = f.height;
								node.height = 1 + (x2 > y2 ? x2 : y2);
								var x3 = node.height;
								var y3 = g.height;
								c.height = 1 + (x3 > y3 ? x3 : y3);
							}
							node = c;
						} else if(balance < -1) {
							var f1 = b.child1;
							var g1 = b.child2;
							b.child1 = node;
							b.parent = node.parent;
							node.parent = b;
							if(b.parent != null) {
								if(b.parent.child1 == node) {
									b.parent.child1 = b;
								} else {
									b.parent.child2 = b;
								}
							} else {
								this.root = b;
							}
							if(f1.height > g1.height) {
								b.child2 = f1;
								node.child1 = g1;
								g1.parent = node;
								var _this4 = node.aabb;
								var a4 = c.aabb;
								var b5 = g1.aabb;
								_this4.minx = a4.minx < b5.minx ? a4.minx : b5.minx;
								_this4.miny = a4.miny < b5.miny ? a4.miny : b5.miny;
								_this4.maxx = a4.maxx > b5.maxx ? a4.maxx : b5.maxx;
								_this4.maxy = a4.maxy > b5.maxy ? a4.maxy : b5.maxy;
								var _this5 = b.aabb;
								var a5 = node.aabb;
								var b6 = f1.aabb;
								_this5.minx = a5.minx < b6.minx ? a5.minx : b6.minx;
								_this5.miny = a5.miny < b6.miny ? a5.miny : b6.miny;
								_this5.maxx = a5.maxx > b6.maxx ? a5.maxx : b6.maxx;
								_this5.maxy = a5.maxy > b6.maxy ? a5.maxy : b6.maxy;
								var x4 = c.height;
								var y4 = g1.height;
								node.height = 1 + (x4 > y4 ? x4 : y4);
								var x5 = node.height;
								var y5 = f1.height;
								b.height = 1 + (x5 > y5 ? x5 : y5);
							} else {
								b.child2 = g1;
								node.child1 = f1;
								f1.parent = node;
								var _this6 = node.aabb;
								var a6 = c.aabb;
								var b7 = f1.aabb;
								_this6.minx = a6.minx < b7.minx ? a6.minx : b7.minx;
								_this6.miny = a6.miny < b7.miny ? a6.miny : b7.miny;
								_this6.maxx = a6.maxx > b7.maxx ? a6.maxx : b7.maxx;
								_this6.maxy = a6.maxy > b7.maxy ? a6.maxy : b7.maxy;
								var _this7 = b.aabb;
								var a7 = node.aabb;
								var b8 = g1.aabb;
								_this7.minx = a7.minx < b8.minx ? a7.minx : b8.minx;
								_this7.miny = a7.miny < b8.miny ? a7.miny : b8.miny;
								_this7.maxx = a7.maxx > b8.maxx ? a7.maxx : b8.maxx;
								_this7.maxy = a7.maxy > b8.maxy ? a7.maxy : b8.maxy;
								var x6 = c.height;
								var y6 = f1.height;
								node.height = 1 + (x6 > y6 ? x6 : y6);
								var x7 = node.height;
								var y7 = g1.height;
								b.height = 1 + (x7 > y7 ? x7 : y7);
							}
							node = b;
						} else {
							node = node;
						}
					}
					var child1 = node.child1;
					var child2 = node.child2;
					var _this8 = node.aabb;
					var a8 = child1.aabb;
					var b9 = child2.aabb;
					_this8.minx = a8.minx < b9.minx ? a8.minx : b9.minx;
					_this8.miny = a8.miny < b9.miny ? a8.miny : b9.miny;
					_this8.maxx = a8.maxx > b9.maxx ? a8.maxx : b9.maxx;
					_this8.maxy = a8.maxy > b9.maxy ? a8.maxy : b9.maxy;
					var x8 = child1.height;
					var y8 = child2.height;
					node.height = 1 + (x8 > y8 ? x8 : y8);
					node = node.parent;
				}
			} else {
				this.root = sibling;
				sibling.parent = null;
				var o2 = parent;
				o2.height = -1;
				var o3 = o2.aabb;
				if(o3.outer != null) {
					o3.outer.zpp_inner = null;
					o3.outer = null;
				}
				o3.wrap_min = o3.wrap_max = null;
				o3._invalidate = null;
				o3._validate = null;
				o3.next = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
				zpp_$nape_geom_ZPP_$AABB.zpp_pool = o3;
				o2.child1 = o2.child2 = o2.parent = null;
				o2.next = null;
				o2.snext = null;
				o2.mnext = null;
				o2.next = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
				zpp_$nape_space_ZPP_$AABBNode.zpp_pool = o2;
			}
		}
	}
	,__class__: zpp_$nape_space_ZPP_$AABBTree
};
var zpp_$nape_space_ZPP_$DynAABBPhase = function(space) {
	this.moves = null;
	this.syncs = null;
	this.pairs = null;
	this.dtree = null;
	this.stree = null;
	zpp_$nape_space_ZPP_$Broadphase.call(this);
	this.space = space;
	this.is_sweep = false;
	this.dynab = this;
	this.stree = new zpp_$nape_space_ZPP_$AABBTree();
	this.dtree = new zpp_$nape_space_ZPP_$AABBTree();
};
zpp_$nape_space_ZPP_$DynAABBPhase.__name__ = true;
zpp_$nape_space_ZPP_$DynAABBPhase.__super__ = zpp_$nape_space_ZPP_$Broadphase;
zpp_$nape_space_ZPP_$DynAABBPhase.prototype = $extend(zpp_$nape_space_ZPP_$Broadphase.prototype,{
	__insert: function(shape) {
		var node;
		if(zpp_$nape_space_ZPP_$AABBNode.zpp_pool == null) {
			node = new zpp_$nape_space_ZPP_$AABBNode();
		} else {
			node = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
			zpp_$nape_space_ZPP_$AABBNode.zpp_pool = node.next;
			node.next = null;
		}
		if(zpp_$nape_geom_ZPP_$AABB.zpp_pool == null) {
			node.aabb = new zpp_$nape_geom_ZPP_$AABB();
		} else {
			node.aabb = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
			zpp_$nape_geom_ZPP_$AABB.zpp_pool = node.aabb.next;
			node.aabb.next = null;
		}
		var _this = node.aabb;
		node.moved = false;
		node.synced = false;
		node.first_sync = false;
		node.shape = shape;
		shape.node = node;
		node.synced = true;
		node.first_sync = true;
		node.snext = this.syncs;
		this.syncs = node;
	}
	,__remove: function(shape) {
		var node = shape.node;
		if(!node.first_sync) {
			if(node.dyn) {
				this.dtree.removeLeaf(node);
			} else {
				this.stree.removeLeaf(node);
			}
		}
		shape.node = null;
		if(node.synced) {
			var pre = null;
			var cur = this.syncs;
			while(cur != null) {
				if(cur == node) {
					break;
				}
				pre = cur;
				cur = cur.snext;
			}
			if(pre == null) {
				this.syncs = cur.snext;
			} else {
				pre.snext = cur.snext;
			}
			cur.snext = null;
			node.synced = false;
		}
		if(node.moved) {
			var pre1 = null;
			var cur1 = this.moves;
			while(cur1 != null) {
				if(cur1 == node) {
					break;
				}
				pre1 = cur1;
				cur1 = cur1.mnext;
			}
			if(pre1 == null) {
				this.moves = cur1.mnext;
			} else {
				pre1.mnext = cur1.mnext;
			}
			cur1.mnext = null;
			node.moved = false;
		}
		var pre2 = null;
		var cur2 = this.pairs;
		while(cur2 != null) {
			var nxt = cur2.next;
			if(cur2.n1 == node || cur2.n2 == node) {
				if(pre2 == null) {
					this.pairs = nxt;
				} else {
					pre2.next = nxt;
				}
				if(cur2.arb != null) {
					cur2.arb.pair = null;
				}
				cur2.arb = null;
				cur2.n1.shape.pairs.remove(cur2);
				cur2.n2.shape.pairs.remove(cur2);
				var o = cur2;
				o.n1 = o.n2 = null;
				o.sleeping = false;
				o.next = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
				zpp_$nape_space_ZPP_$AABBPair.zpp_pool = o;
				cur2 = nxt;
				continue;
			}
			pre2 = cur2;
			cur2 = nxt;
		}
		while(shape.pairs.head != null) {
			var cur3 = shape.pairs.pop_unsafe();
			if(cur3.n1 == node) {
				cur3.n2.shape.pairs.remove(cur3);
			} else {
				cur3.n1.shape.pairs.remove(cur3);
			}
			if(cur3.arb != null) {
				cur3.arb.pair = null;
			}
			cur3.arb = null;
			var o1 = cur3;
			o1.n1 = o1.n2 = null;
			o1.sleeping = false;
			o1.next = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
			zpp_$nape_space_ZPP_$AABBPair.zpp_pool = o1;
		}
		var o2 = node;
		o2.height = -1;
		var o3 = o2.aabb;
		if(o3.outer != null) {
			o3.outer.zpp_inner = null;
			o3.outer = null;
		}
		o3.wrap_min = o3.wrap_max = null;
		o3._invalidate = null;
		o3._validate = null;
		o3.next = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
		zpp_$nape_geom_ZPP_$AABB.zpp_pool = o3;
		o2.child1 = o2.child2 = o2.parent = null;
		o2.next = null;
		o2.snext = null;
		o2.mnext = null;
		o2.next = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
		zpp_$nape_space_ZPP_$AABBNode.zpp_pool = o2;
	}
	,broadphase: function(space,discrete) {
		var node = this.syncs;
		while(node != null) {
			var shape = node.shape;
			if(!node.first_sync) {
				var tree = node.dyn ? this.dtree : this.stree;
				if(node == tree.root) {
					tree.root = null;
				} else {
					var parent = node.parent;
					var gparent = parent.parent;
					var sibling = parent.child1 == node ? parent.child2 : parent.child1;
					if(gparent != null) {
						if(gparent.child1 == parent) {
							gparent.child1 = sibling;
						} else {
							gparent.child2 = sibling;
						}
						sibling.parent = gparent;
						var o = parent;
						o.height = -1;
						var o1 = o.aabb;
						if(o1.outer != null) {
							o1.outer.zpp_inner = null;
							o1.outer = null;
						}
						o1.wrap_min = o1.wrap_max = null;
						o1._invalidate = null;
						o1._validate = null;
						o1.next = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
						zpp_$nape_geom_ZPP_$AABB.zpp_pool = o1;
						o.child1 = o.child2 = o.parent = null;
						o.next = null;
						o.snext = null;
						o.mnext = null;
						o.next = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
						zpp_$nape_space_ZPP_$AABBNode.zpp_pool = o;
						var node1 = gparent;
						while(node1 != null) {
							if(node1.child1 == null || node1.height < 2) {
								node1 = node1;
							} else {
								var b = node1.child1;
								var c = node1.child2;
								var balance = c.height - b.height;
								if(balance > 1) {
									var f = c.child1;
									var g = c.child2;
									c.child1 = node1;
									c.parent = node1.parent;
									node1.parent = c;
									if(c.parent != null) {
										if(c.parent.child1 == node1) {
											c.parent.child1 = c;
										} else {
											c.parent.child2 = c;
										}
									} else {
										tree.root = c;
									}
									if(f.height > g.height) {
										c.child2 = f;
										node1.child2 = g;
										g.parent = node1;
										var _this = node1.aabb;
										var a = b.aabb;
										var b1 = g.aabb;
										_this.minx = a.minx < b1.minx ? a.minx : b1.minx;
										_this.miny = a.miny < b1.miny ? a.miny : b1.miny;
										_this.maxx = a.maxx > b1.maxx ? a.maxx : b1.maxx;
										_this.maxy = a.maxy > b1.maxy ? a.maxy : b1.maxy;
										var _this1 = c.aabb;
										var a1 = node1.aabb;
										var b2 = f.aabb;
										_this1.minx = a1.minx < b2.minx ? a1.minx : b2.minx;
										_this1.miny = a1.miny < b2.miny ? a1.miny : b2.miny;
										_this1.maxx = a1.maxx > b2.maxx ? a1.maxx : b2.maxx;
										_this1.maxy = a1.maxy > b2.maxy ? a1.maxy : b2.maxy;
										var x = b.height;
										var y = g.height;
										node1.height = 1 + (x > y ? x : y);
										var x1 = node1.height;
										var y1 = f.height;
										c.height = 1 + (x1 > y1 ? x1 : y1);
									} else {
										c.child2 = g;
										node1.child2 = f;
										f.parent = node1;
										var _this2 = node1.aabb;
										var a2 = b.aabb;
										var b3 = f.aabb;
										_this2.minx = a2.minx < b3.minx ? a2.minx : b3.minx;
										_this2.miny = a2.miny < b3.miny ? a2.miny : b3.miny;
										_this2.maxx = a2.maxx > b3.maxx ? a2.maxx : b3.maxx;
										_this2.maxy = a2.maxy > b3.maxy ? a2.maxy : b3.maxy;
										var _this3 = c.aabb;
										var a3 = node1.aabb;
										var b4 = g.aabb;
										_this3.minx = a3.minx < b4.minx ? a3.minx : b4.minx;
										_this3.miny = a3.miny < b4.miny ? a3.miny : b4.miny;
										_this3.maxx = a3.maxx > b4.maxx ? a3.maxx : b4.maxx;
										_this3.maxy = a3.maxy > b4.maxy ? a3.maxy : b4.maxy;
										var x2 = b.height;
										var y2 = f.height;
										node1.height = 1 + (x2 > y2 ? x2 : y2);
										var x3 = node1.height;
										var y3 = g.height;
										c.height = 1 + (x3 > y3 ? x3 : y3);
									}
									node1 = c;
								} else if(balance < -1) {
									var f1 = b.child1;
									var g1 = b.child2;
									b.child1 = node1;
									b.parent = node1.parent;
									node1.parent = b;
									if(b.parent != null) {
										if(b.parent.child1 == node1) {
											b.parent.child1 = b;
										} else {
											b.parent.child2 = b;
										}
									} else {
										tree.root = b;
									}
									if(f1.height > g1.height) {
										b.child2 = f1;
										node1.child1 = g1;
										g1.parent = node1;
										var _this4 = node1.aabb;
										var a4 = c.aabb;
										var b5 = g1.aabb;
										_this4.minx = a4.minx < b5.minx ? a4.minx : b5.minx;
										_this4.miny = a4.miny < b5.miny ? a4.miny : b5.miny;
										_this4.maxx = a4.maxx > b5.maxx ? a4.maxx : b5.maxx;
										_this4.maxy = a4.maxy > b5.maxy ? a4.maxy : b5.maxy;
										var _this5 = b.aabb;
										var a5 = node1.aabb;
										var b6 = f1.aabb;
										_this5.minx = a5.minx < b6.minx ? a5.minx : b6.minx;
										_this5.miny = a5.miny < b6.miny ? a5.miny : b6.miny;
										_this5.maxx = a5.maxx > b6.maxx ? a5.maxx : b6.maxx;
										_this5.maxy = a5.maxy > b6.maxy ? a5.maxy : b6.maxy;
										var x4 = c.height;
										var y4 = g1.height;
										node1.height = 1 + (x4 > y4 ? x4 : y4);
										var x5 = node1.height;
										var y5 = f1.height;
										b.height = 1 + (x5 > y5 ? x5 : y5);
									} else {
										b.child2 = g1;
										node1.child1 = f1;
										f1.parent = node1;
										var _this6 = node1.aabb;
										var a6 = c.aabb;
										var b7 = f1.aabb;
										_this6.minx = a6.minx < b7.minx ? a6.minx : b7.minx;
										_this6.miny = a6.miny < b7.miny ? a6.miny : b7.miny;
										_this6.maxx = a6.maxx > b7.maxx ? a6.maxx : b7.maxx;
										_this6.maxy = a6.maxy > b7.maxy ? a6.maxy : b7.maxy;
										var _this7 = b.aabb;
										var a7 = node1.aabb;
										var b8 = g1.aabb;
										_this7.minx = a7.minx < b8.minx ? a7.minx : b8.minx;
										_this7.miny = a7.miny < b8.miny ? a7.miny : b8.miny;
										_this7.maxx = a7.maxx > b8.maxx ? a7.maxx : b8.maxx;
										_this7.maxy = a7.maxy > b8.maxy ? a7.maxy : b8.maxy;
										var x6 = c.height;
										var y6 = f1.height;
										node1.height = 1 + (x6 > y6 ? x6 : y6);
										var x7 = node1.height;
										var y7 = g1.height;
										b.height = 1 + (x7 > y7 ? x7 : y7);
									}
									node1 = b;
								} else {
									node1 = node1;
								}
							}
							var child1 = node1.child1;
							var child2 = node1.child2;
							var _this8 = node1.aabb;
							var a8 = child1.aabb;
							var b9 = child2.aabb;
							_this8.minx = a8.minx < b9.minx ? a8.minx : b9.minx;
							_this8.miny = a8.miny < b9.miny ? a8.miny : b9.miny;
							_this8.maxx = a8.maxx > b9.maxx ? a8.maxx : b9.maxx;
							_this8.maxy = a8.maxy > b9.maxy ? a8.maxy : b9.maxy;
							var x8 = child1.height;
							var y8 = child2.height;
							node1.height = 1 + (x8 > y8 ? x8 : y8);
							node1 = node1.parent;
						}
					} else {
						tree.root = sibling;
						sibling.parent = null;
						var o2 = parent;
						o2.height = -1;
						var o3 = o2.aabb;
						if(o3.outer != null) {
							o3.outer.zpp_inner = null;
							o3.outer = null;
						}
						o3.wrap_min = o3.wrap_max = null;
						o3._invalidate = null;
						o3._validate = null;
						o3.next = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
						zpp_$nape_geom_ZPP_$AABB.zpp_pool = o3;
						o2.child1 = o2.child2 = o2.parent = null;
						o2.next = null;
						o2.snext = null;
						o2.mnext = null;
						o2.next = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
						zpp_$nape_space_ZPP_$AABBNode.zpp_pool = o2;
					}
				}
			} else {
				node.first_sync = false;
			}
			var aabb = node.aabb;
			if(!space.continuous) {
				if(shape.zip_aabb) {
					if(shape.body != null) {
						shape.zip_aabb = false;
						if(shape.type == 0) {
							var _this9 = shape.circle;
							if(_this9.zip_worldCOM) {
								if(_this9.body != null) {
									_this9.zip_worldCOM = false;
									if(_this9.zip_localCOM) {
										_this9.zip_localCOM = false;
										if(_this9.type == 1) {
											var _this10 = _this9.polygon;
											if(_this10.lverts.next == null) {
												throw new js__$Boot_HaxeError("Error: An empty polygon has no meaningful localCOM");
											}
											if(_this10.lverts.next.next == null) {
												_this10.localCOMx = _this10.lverts.next.x;
												_this10.localCOMy = _this10.lverts.next.y;
											} else if(_this10.lverts.next.next.next == null) {
												_this10.localCOMx = _this10.lverts.next.x;
												_this10.localCOMy = _this10.lverts.next.y;
												var t = 1.0;
												_this10.localCOMx += _this10.lverts.next.next.x * t;
												_this10.localCOMy += _this10.lverts.next.next.y * t;
												var t1 = 0.5;
												_this10.localCOMx *= t1;
												_this10.localCOMy *= t1;
											} else {
												_this10.localCOMx = 0;
												_this10.localCOMy = 0;
												var area = 0.0;
												var cx_ite = _this10.lverts.next;
												var u = cx_ite;
												cx_ite = cx_ite.next;
												var v = cx_ite;
												cx_ite = cx_ite.next;
												while(cx_ite != null) {
													var w = cx_ite;
													area += v.x * (w.y - u.y);
													var cf = w.y * v.x - w.x * v.y;
													_this10.localCOMx += (v.x + w.x) * cf;
													_this10.localCOMy += (v.y + w.y) * cf;
													u = v;
													v = w;
													cx_ite = cx_ite.next;
												}
												cx_ite = _this10.lverts.next;
												var w1 = cx_ite;
												area += v.x * (w1.y - u.y);
												var cf1 = w1.y * v.x - w1.x * v.y;
												_this10.localCOMx += (v.x + w1.x) * cf1;
												_this10.localCOMy += (v.y + w1.y) * cf1;
												u = v;
												v = w1;
												cx_ite = cx_ite.next;
												var w2 = cx_ite;
												area += v.x * (w2.y - u.y);
												var cf2 = w2.y * v.x - w2.x * v.y;
												_this10.localCOMx += (v.x + w2.x) * cf2;
												_this10.localCOMy += (v.y + w2.y) * cf2;
												area = 1 / (3 * area);
												var t2 = area;
												_this10.localCOMx *= t2;
												_this10.localCOMy *= t2;
											}
										}
										if(_this9.wrap_localCOM != null) {
											_this9.wrap_localCOM.zpp_inner.x = _this9.localCOMx;
											_this9.wrap_localCOM.zpp_inner.y = _this9.localCOMy;
										}
									}
									var _this11 = _this9.body;
									if(_this11.zip_axis) {
										_this11.zip_axis = false;
										_this11.axisx = Math.sin(_this11.rot);
										_this11.axisy = Math.cos(_this11.rot);
									}
									_this9.worldCOMx = _this9.body.posx + (_this9.body.axisy * _this9.localCOMx - _this9.body.axisx * _this9.localCOMy);
									_this9.worldCOMy = _this9.body.posy + (_this9.localCOMx * _this9.body.axisx + _this9.localCOMy * _this9.body.axisy);
								}
							}
							var rx = _this9.radius;
							var ry = _this9.radius;
							_this9.aabb.minx = _this9.worldCOMx - rx;
							_this9.aabb.miny = _this9.worldCOMy - ry;
							_this9.aabb.maxx = _this9.worldCOMx + rx;
							_this9.aabb.maxy = _this9.worldCOMy + ry;
						} else {
							var _this12 = shape.polygon;
							if(_this12.zip_gverts) {
								if(_this12.body != null) {
									_this12.zip_gverts = false;
									_this12.validate_lverts();
									var _this13 = _this12.body;
									if(_this13.zip_axis) {
										_this13.zip_axis = false;
										_this13.axisx = Math.sin(_this13.rot);
										_this13.axisy = Math.cos(_this13.rot);
									}
									var li = _this12.lverts.next;
									var cx_ite1 = _this12.gverts.next;
									while(cx_ite1 != null) {
										var g2 = cx_ite1;
										var l = li;
										li = li.next;
										g2.x = _this12.body.posx + (_this12.body.axisy * l.x - _this12.body.axisx * l.y);
										g2.y = _this12.body.posy + (l.x * _this12.body.axisx + l.y * _this12.body.axisy);
										cx_ite1 = cx_ite1.next;
									}
								}
							}
							if(_this12.lverts.next == null) {
								throw new js__$Boot_HaxeError("Error: An empty polygon has no meaningful bounds");
							}
							var p0 = _this12.gverts.next;
							_this12.aabb.minx = p0.x;
							_this12.aabb.miny = p0.y;
							_this12.aabb.maxx = p0.x;
							_this12.aabb.maxy = p0.y;
							var cx_ite2 = _this12.gverts.next.next;
							while(cx_ite2 != null) {
								var p = cx_ite2;
								if(p.x < _this12.aabb.minx) {
									_this12.aabb.minx = p.x;
								}
								if(p.x > _this12.aabb.maxx) {
									_this12.aabb.maxx = p.x;
								}
								if(p.y < _this12.aabb.miny) {
									_this12.aabb.miny = p.y;
								}
								if(p.y > _this12.aabb.maxy) {
									_this12.aabb.maxy = p.y;
								}
								cx_ite2 = cx_ite2.next;
							}
						}
					}
				}
			}
			var a9 = shape.aabb;
			aabb.minx = a9.minx - 3.0;
			aabb.miny = a9.miny - 3.0;
			aabb.maxx = a9.maxx + 3.0;
			aabb.maxy = a9.maxy + 3.0;
			var tree1 = (node.dyn = shape.body.type == 1 ? false : !shape.body.component.sleeping) ? this.dtree : this.stree;
			if(tree1.root == null) {
				tree1.root = node;
				tree1.root.parent = null;
			} else {
				var leafaabb = node.aabb;
				var node2 = tree1.root;
				while(node2.child1 != null) {
					var child11 = node2.child1;
					var child21 = node2.child2;
					var _this14 = node2.aabb;
					var area1 = (_this14.maxx - _this14.minx + (_this14.maxy - _this14.miny)) * 2;
					var _this15 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb;
					var a10 = node2.aabb;
					_this15.minx = a10.minx < leafaabb.minx ? a10.minx : leafaabb.minx;
					_this15.miny = a10.miny < leafaabb.miny ? a10.miny : leafaabb.miny;
					_this15.maxx = a10.maxx > leafaabb.maxx ? a10.maxx : leafaabb.maxx;
					_this15.maxy = a10.maxy > leafaabb.maxy ? a10.maxy : leafaabb.maxy;
					var _this16 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb;
					var carea = (_this16.maxx - _this16.minx + (_this16.maxy - _this16.miny)) * 2;
					var cost = 2 * carea;
					var icost = 2 * (carea - area1);
					var _this17 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb;
					var b10 = child11.aabb;
					_this17.minx = leafaabb.minx < b10.minx ? leafaabb.minx : b10.minx;
					_this17.miny = leafaabb.miny < b10.miny ? leafaabb.miny : b10.miny;
					_this17.maxx = leafaabb.maxx > b10.maxx ? leafaabb.maxx : b10.maxx;
					_this17.maxy = leafaabb.maxy > b10.maxy ? leafaabb.maxy : b10.maxy;
					var cost1;
					if(child11.child1 == null) {
						var _this18 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb;
						cost1 = (_this18.maxx - _this18.minx + (_this18.maxy - _this18.miny)) * 2 + icost;
					} else {
						var _this19 = child11.aabb;
						var oarea = (_this19.maxx - _this19.minx + (_this19.maxy - _this19.miny)) * 2;
						var _this20 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb;
						var narea = (_this20.maxx - _this20.minx + (_this20.maxy - _this20.miny)) * 2;
						cost1 = narea - oarea + icost;
					}
					var _this21 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb;
					var b11 = child21.aabb;
					_this21.minx = leafaabb.minx < b11.minx ? leafaabb.minx : b11.minx;
					_this21.miny = leafaabb.miny < b11.miny ? leafaabb.miny : b11.miny;
					_this21.maxx = leafaabb.maxx > b11.maxx ? leafaabb.maxx : b11.maxx;
					_this21.maxy = leafaabb.maxy > b11.maxy ? leafaabb.maxy : b11.maxy;
					var cost2;
					if(child21.child1 == null) {
						var _this22 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb;
						cost2 = (_this22.maxx - _this22.minx + (_this22.maxy - _this22.miny)) * 2 + icost;
					} else {
						var _this23 = child21.aabb;
						var oarea1 = (_this23.maxx - _this23.minx + (_this23.maxy - _this23.miny)) * 2;
						var _this24 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb;
						var narea1 = (_this24.maxx - _this24.minx + (_this24.maxy - _this24.miny)) * 2;
						cost2 = narea1 - oarea1 + icost;
					}
					if(cost < cost1 && cost < cost2) {
						break;
					} else if(cost1 < cost2) {
						node2 = child11;
					} else {
						node2 = child21;
					}
				}
				var sibling1 = node2;
				var oparent = sibling1.parent;
				var nparent;
				if(zpp_$nape_space_ZPP_$AABBNode.zpp_pool == null) {
					nparent = new zpp_$nape_space_ZPP_$AABBNode();
				} else {
					nparent = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
					zpp_$nape_space_ZPP_$AABBNode.zpp_pool = nparent.next;
					nparent.next = null;
				}
				if(zpp_$nape_geom_ZPP_$AABB.zpp_pool == null) {
					nparent.aabb = new zpp_$nape_geom_ZPP_$AABB();
				} else {
					nparent.aabb = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
					zpp_$nape_geom_ZPP_$AABB.zpp_pool = nparent.aabb.next;
					nparent.aabb.next = null;
				}
				var _this25 = nparent.aabb;
				nparent.moved = false;
				nparent.synced = false;
				nparent.first_sync = false;
				nparent.parent = oparent;
				var _this26 = nparent.aabb;
				var b12 = sibling1.aabb;
				_this26.minx = leafaabb.minx < b12.minx ? leafaabb.minx : b12.minx;
				_this26.miny = leafaabb.miny < b12.miny ? leafaabb.miny : b12.miny;
				_this26.maxx = leafaabb.maxx > b12.maxx ? leafaabb.maxx : b12.maxx;
				_this26.maxy = leafaabb.maxy > b12.maxy ? leafaabb.maxy : b12.maxy;
				nparent.height = sibling1.height + 1;
				if(oparent != null) {
					if(oparent.child1 == sibling1) {
						oparent.child1 = nparent;
					} else {
						oparent.child2 = nparent;
					}
					nparent.child1 = sibling1;
					nparent.child2 = node;
					sibling1.parent = nparent;
					node.parent = nparent;
				} else {
					nparent.child1 = sibling1;
					nparent.child2 = node;
					sibling1.parent = nparent;
					node.parent = nparent;
					tree1.root = nparent;
				}
				node2 = node.parent;
				while(node2 != null) {
					if(node2.child1 == null || node2.height < 2) {
						node2 = node2;
					} else {
						var b13 = node2.child1;
						var c1 = node2.child2;
						var balance1 = c1.height - b13.height;
						if(balance1 > 1) {
							var f2 = c1.child1;
							var g3 = c1.child2;
							c1.child1 = node2;
							c1.parent = node2.parent;
							node2.parent = c1;
							if(c1.parent != null) {
								if(c1.parent.child1 == node2) {
									c1.parent.child1 = c1;
								} else {
									c1.parent.child2 = c1;
								}
							} else {
								tree1.root = c1;
							}
							if(f2.height > g3.height) {
								c1.child2 = f2;
								node2.child2 = g3;
								g3.parent = node2;
								var _this27 = node2.aabb;
								var a11 = b13.aabb;
								var b14 = g3.aabb;
								_this27.minx = a11.minx < b14.minx ? a11.minx : b14.minx;
								_this27.miny = a11.miny < b14.miny ? a11.miny : b14.miny;
								_this27.maxx = a11.maxx > b14.maxx ? a11.maxx : b14.maxx;
								_this27.maxy = a11.maxy > b14.maxy ? a11.maxy : b14.maxy;
								var _this28 = c1.aabb;
								var a12 = node2.aabb;
								var b15 = f2.aabb;
								_this28.minx = a12.minx < b15.minx ? a12.minx : b15.minx;
								_this28.miny = a12.miny < b15.miny ? a12.miny : b15.miny;
								_this28.maxx = a12.maxx > b15.maxx ? a12.maxx : b15.maxx;
								_this28.maxy = a12.maxy > b15.maxy ? a12.maxy : b15.maxy;
								var x9 = b13.height;
								var y9 = g3.height;
								node2.height = 1 + (x9 > y9 ? x9 : y9);
								var x10 = node2.height;
								var y10 = f2.height;
								c1.height = 1 + (x10 > y10 ? x10 : y10);
							} else {
								c1.child2 = g3;
								node2.child2 = f2;
								f2.parent = node2;
								var _this29 = node2.aabb;
								var a13 = b13.aabb;
								var b16 = f2.aabb;
								_this29.minx = a13.minx < b16.minx ? a13.minx : b16.minx;
								_this29.miny = a13.miny < b16.miny ? a13.miny : b16.miny;
								_this29.maxx = a13.maxx > b16.maxx ? a13.maxx : b16.maxx;
								_this29.maxy = a13.maxy > b16.maxy ? a13.maxy : b16.maxy;
								var _this30 = c1.aabb;
								var a14 = node2.aabb;
								var b17 = g3.aabb;
								_this30.minx = a14.minx < b17.minx ? a14.minx : b17.minx;
								_this30.miny = a14.miny < b17.miny ? a14.miny : b17.miny;
								_this30.maxx = a14.maxx > b17.maxx ? a14.maxx : b17.maxx;
								_this30.maxy = a14.maxy > b17.maxy ? a14.maxy : b17.maxy;
								var x11 = b13.height;
								var y11 = f2.height;
								node2.height = 1 + (x11 > y11 ? x11 : y11);
								var x12 = node2.height;
								var y12 = g3.height;
								c1.height = 1 + (x12 > y12 ? x12 : y12);
							}
							node2 = c1;
						} else if(balance1 < -1) {
							var f3 = b13.child1;
							var g4 = b13.child2;
							b13.child1 = node2;
							b13.parent = node2.parent;
							node2.parent = b13;
							if(b13.parent != null) {
								if(b13.parent.child1 == node2) {
									b13.parent.child1 = b13;
								} else {
									b13.parent.child2 = b13;
								}
							} else {
								tree1.root = b13;
							}
							if(f3.height > g4.height) {
								b13.child2 = f3;
								node2.child1 = g4;
								g4.parent = node2;
								var _this31 = node2.aabb;
								var a15 = c1.aabb;
								var b18 = g4.aabb;
								_this31.minx = a15.minx < b18.minx ? a15.minx : b18.minx;
								_this31.miny = a15.miny < b18.miny ? a15.miny : b18.miny;
								_this31.maxx = a15.maxx > b18.maxx ? a15.maxx : b18.maxx;
								_this31.maxy = a15.maxy > b18.maxy ? a15.maxy : b18.maxy;
								var _this32 = b13.aabb;
								var a16 = node2.aabb;
								var b19 = f3.aabb;
								_this32.minx = a16.minx < b19.minx ? a16.minx : b19.minx;
								_this32.miny = a16.miny < b19.miny ? a16.miny : b19.miny;
								_this32.maxx = a16.maxx > b19.maxx ? a16.maxx : b19.maxx;
								_this32.maxy = a16.maxy > b19.maxy ? a16.maxy : b19.maxy;
								var x13 = c1.height;
								var y13 = g4.height;
								node2.height = 1 + (x13 > y13 ? x13 : y13);
								var x14 = node2.height;
								var y14 = f3.height;
								b13.height = 1 + (x14 > y14 ? x14 : y14);
							} else {
								b13.child2 = g4;
								node2.child1 = f3;
								f3.parent = node2;
								var _this33 = node2.aabb;
								var a17 = c1.aabb;
								var b20 = f3.aabb;
								_this33.minx = a17.minx < b20.minx ? a17.minx : b20.minx;
								_this33.miny = a17.miny < b20.miny ? a17.miny : b20.miny;
								_this33.maxx = a17.maxx > b20.maxx ? a17.maxx : b20.maxx;
								_this33.maxy = a17.maxy > b20.maxy ? a17.maxy : b20.maxy;
								var _this34 = b13.aabb;
								var a18 = node2.aabb;
								var b21 = g4.aabb;
								_this34.minx = a18.minx < b21.minx ? a18.minx : b21.minx;
								_this34.miny = a18.miny < b21.miny ? a18.miny : b21.miny;
								_this34.maxx = a18.maxx > b21.maxx ? a18.maxx : b21.maxx;
								_this34.maxy = a18.maxy > b21.maxy ? a18.maxy : b21.maxy;
								var x15 = c1.height;
								var y15 = f3.height;
								node2.height = 1 + (x15 > y15 ? x15 : y15);
								var x16 = node2.height;
								var y16 = g4.height;
								b13.height = 1 + (x16 > y16 ? x16 : y16);
							}
							node2 = b13;
						} else {
							node2 = node2;
						}
					}
					var child12 = node2.child1;
					var child22 = node2.child2;
					var x17 = child12.height;
					var y17 = child22.height;
					node2.height = 1 + (x17 > y17 ? x17 : y17);
					var _this35 = node2.aabb;
					var a19 = child12.aabb;
					var b22 = child22.aabb;
					_this35.minx = a19.minx < b22.minx ? a19.minx : b22.minx;
					_this35.miny = a19.miny < b22.miny ? a19.miny : b22.miny;
					_this35.maxx = a19.maxx > b22.maxx ? a19.maxx : b22.maxx;
					_this35.maxy = a19.maxy > b22.maxy ? a19.maxy : b22.maxy;
					node2 = node2.parent;
				}
			}
			node.synced = false;
			node = node.snext;
		}
		while(this.syncs != null) {
			var ret = this.syncs;
			this.syncs = ret.snext;
			ret.snext = null;
			var leaf = ret;
			if(leaf.moved) {
				continue;
			}
			leaf.moved = false;
			var lshape = leaf.shape;
			var lbody = lshape.body;
			if(lbody.component.sleeping) {
				continue;
			}
			var ab = leaf.aabb;
			var stack = null;
			if(this.dtree.root != null) {
				this.dtree.root.next = stack;
				stack = this.dtree.root;
			}
			while(stack != null) {
				var ret1 = stack;
				stack = ret1.next;
				ret1.next = null;
				var node3 = ret1;
				if(node3 == leaf) {
					continue;
				}
				if(node3.child1 == null) {
					var shape1 = node3.shape;
					if(shape1.body != lshape.body && !(shape1.body.type == 1 && lshape.body.type == 1)) {
						var x18 = node3.aabb;
						if(x18.miny <= ab.maxy && ab.miny <= x18.maxy && x18.minx <= ab.maxx && ab.minx <= x18.maxx) {
							var id;
							var di;
							if(lshape.id < shape1.id) {
								id = lshape.id;
								di = shape1.id;
							} else {
								id = shape1.id;
								di = lshape.id;
							}
							var s = lshape.pairs.length < shape1.pairs.length ? lshape : shape1;
							var p1 = null;
							var cx_ite3 = s.pairs.head;
							while(cx_ite3 != null) {
								var px = cx_ite3.elt;
								if(px.id == id && px.di == di) {
									p1 = px;
									break;
								}
								cx_ite3 = cx_ite3.next;
							}
							if(p1 != null) {
								if(p1.sleeping) {
									p1.sleeping = false;
									p1.next = this.pairs;
									this.pairs = p1;
									p1.first = true;
								}
								continue;
							}
							if(zpp_$nape_space_ZPP_$AABBPair.zpp_pool == null) {
								p1 = new zpp_$nape_space_ZPP_$AABBPair();
							} else {
								p1 = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
								zpp_$nape_space_ZPP_$AABBPair.zpp_pool = p1.next;
								p1.next = null;
							}
							p1.n1 = leaf;
							p1.n2 = node3;
							p1.id = id;
							p1.di = di;
							p1.next = this.pairs;
							this.pairs = p1;
							p1.first = true;
							var _this36 = lshape.pairs;
							var ret2;
							if(zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool == null) {
								ret2 = new zpp_$nape_util_ZNPNode_$ZPP_$AABBPair();
							} else {
								ret2 = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = ret2.next;
								ret2.next = null;
							}
							ret2.elt = p1;
							var temp = ret2;
							temp.next = _this36.head;
							_this36.head = temp;
							_this36.modified = true;
							_this36.length++;
							var _this37 = shape1.pairs;
							var ret3;
							if(zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool == null) {
								ret3 = new zpp_$nape_util_ZNPNode_$ZPP_$AABBPair();
							} else {
								ret3 = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = ret3.next;
								ret3.next = null;
							}
							ret3.elt = p1;
							var temp1 = ret3;
							temp1.next = _this37.head;
							_this37.head = temp1;
							_this37.modified = true;
							_this37.length++;
						}
					}
				} else {
					var x19 = node3.aabb;
					if(x19.miny <= ab.maxy && ab.miny <= x19.maxy && x19.minx <= ab.maxx && ab.minx <= x19.maxx) {
						if(node3.child1 != null) {
							node3.child1.next = stack;
							stack = node3.child1;
						}
						if(node3.child2 != null) {
							node3.child2.next = stack;
							stack = node3.child2;
						}
					}
				}
			}
			if(this.stree.root != null) {
				this.stree.root.next = stack;
				stack = this.stree.root;
			}
			while(stack != null) {
				var ret4 = stack;
				stack = ret4.next;
				ret4.next = null;
				var node4 = ret4;
				if(node4 == leaf) {
					continue;
				}
				if(node4.child1 == null) {
					var shape2 = node4.shape;
					if(shape2.body != lshape.body && !(shape2.body.type == 1 && lshape.body.type == 1)) {
						var x20 = node4.aabb;
						if(x20.miny <= ab.maxy && ab.miny <= x20.maxy && x20.minx <= ab.maxx && ab.minx <= x20.maxx) {
							var id1;
							var di1;
							if(lshape.id < shape2.id) {
								id1 = lshape.id;
								di1 = shape2.id;
							} else {
								id1 = shape2.id;
								di1 = lshape.id;
							}
							var s1 = lshape.pairs.length < shape2.pairs.length ? lshape : shape2;
							var p2 = null;
							var cx_ite4 = s1.pairs.head;
							while(cx_ite4 != null) {
								var px1 = cx_ite4.elt;
								if(px1.id == id1 && px1.di == di1) {
									p2 = px1;
									break;
								}
								cx_ite4 = cx_ite4.next;
							}
							if(p2 != null) {
								if(p2.sleeping) {
									p2.sleeping = false;
									p2.next = this.pairs;
									this.pairs = p2;
									p2.first = true;
								}
								continue;
							}
							if(zpp_$nape_space_ZPP_$AABBPair.zpp_pool == null) {
								p2 = new zpp_$nape_space_ZPP_$AABBPair();
							} else {
								p2 = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
								zpp_$nape_space_ZPP_$AABBPair.zpp_pool = p2.next;
								p2.next = null;
							}
							p2.n1 = leaf;
							p2.n2 = node4;
							p2.id = id1;
							p2.di = di1;
							p2.next = this.pairs;
							this.pairs = p2;
							p2.first = true;
							var _this38 = lshape.pairs;
							var ret5;
							if(zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool == null) {
								ret5 = new zpp_$nape_util_ZNPNode_$ZPP_$AABBPair();
							} else {
								ret5 = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = ret5.next;
								ret5.next = null;
							}
							ret5.elt = p2;
							var temp2 = ret5;
							temp2.next = _this38.head;
							_this38.head = temp2;
							_this38.modified = true;
							_this38.length++;
							var _this39 = shape2.pairs;
							var ret6;
							if(zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool == null) {
								ret6 = new zpp_$nape_util_ZNPNode_$ZPP_$AABBPair();
							} else {
								ret6 = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = ret6.next;
								ret6.next = null;
							}
							ret6.elt = p2;
							var temp3 = ret6;
							temp3.next = _this39.head;
							_this39.head = temp3;
							_this39.modified = true;
							_this39.length++;
						}
					}
				} else {
					var x21 = node4.aabb;
					if(x21.miny <= ab.maxy && ab.miny <= x21.maxy && x21.minx <= ab.maxx && ab.minx <= x21.maxx) {
						if(node4.child1 != null) {
							node4.child1.next = stack;
							stack = node4.child1;
						}
						if(node4.child2 != null) {
							node4.child2.next = stack;
							stack = node4.child2;
						}
					}
				}
			}
		}
		while(this.moves != null) {
			var ret7 = this.moves;
			this.moves = ret7.mnext;
			ret7.mnext = null;
			var leaf1 = ret7;
			leaf1.moved = false;
			var lshape1 = leaf1.shape;
			var lbody1 = lshape1.body;
			if(lbody1.component.sleeping) {
				continue;
			}
			var ab1 = leaf1.aabb;
			var stack1 = null;
			if(this.dtree.root != null) {
				this.dtree.root.next = stack1;
				stack1 = this.dtree.root;
			}
			while(stack1 != null) {
				var ret8 = stack1;
				stack1 = ret8.next;
				ret8.next = null;
				var node5 = ret8;
				if(node5 == leaf1) {
					continue;
				}
				if(node5.child1 == null) {
					var shape3 = node5.shape;
					if(shape3.body != lshape1.body && !(shape3.body.type == 1 && lshape1.body.type == 1)) {
						var x22 = node5.aabb;
						if(x22.miny <= ab1.maxy && ab1.miny <= x22.maxy && x22.minx <= ab1.maxx && ab1.minx <= x22.maxx) {
							var id2;
							var di2;
							if(lshape1.id < shape3.id) {
								id2 = lshape1.id;
								di2 = shape3.id;
							} else {
								id2 = shape3.id;
								di2 = lshape1.id;
							}
							var s2 = lshape1.pairs.length < shape3.pairs.length ? lshape1 : shape3;
							var p3 = null;
							var cx_ite5 = s2.pairs.head;
							while(cx_ite5 != null) {
								var px2 = cx_ite5.elt;
								if(px2.id == id2 && px2.di == di2) {
									p3 = px2;
									break;
								}
								cx_ite5 = cx_ite5.next;
							}
							if(p3 != null) {
								if(p3.sleeping) {
									p3.sleeping = false;
									p3.next = this.pairs;
									this.pairs = p3;
									p3.first = true;
								}
								continue;
							}
							if(zpp_$nape_space_ZPP_$AABBPair.zpp_pool == null) {
								p3 = new zpp_$nape_space_ZPP_$AABBPair();
							} else {
								p3 = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
								zpp_$nape_space_ZPP_$AABBPair.zpp_pool = p3.next;
								p3.next = null;
							}
							p3.n1 = leaf1;
							p3.n2 = node5;
							p3.id = id2;
							p3.di = di2;
							p3.next = this.pairs;
							this.pairs = p3;
							p3.first = true;
							var _this40 = lshape1.pairs;
							var ret9;
							if(zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool == null) {
								ret9 = new zpp_$nape_util_ZNPNode_$ZPP_$AABBPair();
							} else {
								ret9 = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = ret9.next;
								ret9.next = null;
							}
							ret9.elt = p3;
							var temp4 = ret9;
							temp4.next = _this40.head;
							_this40.head = temp4;
							_this40.modified = true;
							_this40.length++;
							var _this41 = shape3.pairs;
							var ret10;
							if(zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool == null) {
								ret10 = new zpp_$nape_util_ZNPNode_$ZPP_$AABBPair();
							} else {
								ret10 = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = ret10.next;
								ret10.next = null;
							}
							ret10.elt = p3;
							var temp5 = ret10;
							temp5.next = _this41.head;
							_this41.head = temp5;
							_this41.modified = true;
							_this41.length++;
						}
					}
				} else {
					var x23 = node5.aabb;
					if(x23.miny <= ab1.maxy && ab1.miny <= x23.maxy && x23.minx <= ab1.maxx && ab1.minx <= x23.maxx) {
						if(node5.child1 != null) {
							node5.child1.next = stack1;
							stack1 = node5.child1;
						}
						if(node5.child2 != null) {
							node5.child2.next = stack1;
							stack1 = node5.child2;
						}
					}
				}
			}
			if(this.stree.root != null) {
				this.stree.root.next = stack1;
				stack1 = this.stree.root;
			}
			while(stack1 != null) {
				var ret11 = stack1;
				stack1 = ret11.next;
				ret11.next = null;
				var node6 = ret11;
				if(node6 == leaf1) {
					continue;
				}
				if(node6.child1 == null) {
					var shape4 = node6.shape;
					if(shape4.body != lshape1.body && !(shape4.body.type == 1 && lshape1.body.type == 1)) {
						var x24 = node6.aabb;
						if(x24.miny <= ab1.maxy && ab1.miny <= x24.maxy && x24.minx <= ab1.maxx && ab1.minx <= x24.maxx) {
							var id3;
							var di3;
							if(lshape1.id < shape4.id) {
								id3 = lshape1.id;
								di3 = shape4.id;
							} else {
								id3 = shape4.id;
								di3 = lshape1.id;
							}
							var s3 = lshape1.pairs.length < shape4.pairs.length ? lshape1 : shape4;
							var p4 = null;
							var cx_ite6 = s3.pairs.head;
							while(cx_ite6 != null) {
								var px3 = cx_ite6.elt;
								if(px3.id == id3 && px3.di == di3) {
									p4 = px3;
									break;
								}
								cx_ite6 = cx_ite6.next;
							}
							if(p4 != null) {
								if(p4.sleeping) {
									p4.sleeping = false;
									p4.next = this.pairs;
									this.pairs = p4;
									p4.first = true;
								}
								continue;
							}
							if(zpp_$nape_space_ZPP_$AABBPair.zpp_pool == null) {
								p4 = new zpp_$nape_space_ZPP_$AABBPair();
							} else {
								p4 = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
								zpp_$nape_space_ZPP_$AABBPair.zpp_pool = p4.next;
								p4.next = null;
							}
							p4.n1 = leaf1;
							p4.n2 = node6;
							p4.id = id3;
							p4.di = di3;
							p4.next = this.pairs;
							this.pairs = p4;
							p4.first = true;
							var _this42 = lshape1.pairs;
							var ret12;
							if(zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool == null) {
								ret12 = new zpp_$nape_util_ZNPNode_$ZPP_$AABBPair();
							} else {
								ret12 = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = ret12.next;
								ret12.next = null;
							}
							ret12.elt = p4;
							var temp6 = ret12;
							temp6.next = _this42.head;
							_this42.head = temp6;
							_this42.modified = true;
							_this42.length++;
							var _this43 = shape4.pairs;
							var ret13;
							if(zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool == null) {
								ret13 = new zpp_$nape_util_ZNPNode_$ZPP_$AABBPair();
							} else {
								ret13 = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = ret13.next;
								ret13.next = null;
							}
							ret13.elt = p4;
							var temp7 = ret13;
							temp7.next = _this43.head;
							_this43.head = temp7;
							_this43.modified = true;
							_this43.length++;
						}
					}
				} else {
					var x25 = node6.aabb;
					if(x25.miny <= ab1.maxy && ab1.miny <= x25.maxy && x25.minx <= ab1.maxx && ab1.minx <= x25.maxx) {
						if(node6.child1 != null) {
							node6.child1.next = stack1;
							stack1 = node6.child1;
						}
						if(node6.child2 != null) {
							node6.child2.next = stack1;
							stack1 = node6.child2;
						}
					}
				}
			}
		}
		var pre = null;
		var cur = this.pairs;
		while(cur != null) {
			var tmp;
			if(!cur.first) {
				var _this44 = cur.n1.aabb;
				var x26 = cur.n2.aabb;
				tmp = !(x26.miny <= _this44.maxy && _this44.miny <= x26.maxy && x26.minx <= _this44.maxx && _this44.minx <= x26.maxx);
			} else {
				tmp = false;
			}
			if(tmp) {
				if(pre == null) {
					this.pairs = cur.next;
				} else {
					pre.next = cur.next;
				}
				var _this45 = cur.n1.shape.pairs;
				var pre1 = null;
				var cur1 = _this45.head;
				var ret14 = false;
				while(cur1 != null) {
					if(cur1.elt == cur) {
						var old;
						var ret15;
						if(pre1 == null) {
							old = _this45.head;
							ret15 = old.next;
							_this45.head = ret15;
							if(_this45.head == null) {
								_this45.pushmod = true;
							}
						} else {
							old = pre1.next;
							ret15 = old.next;
							pre1.next = ret15;
							if(ret15 == null) {
								_this45.pushmod = true;
							}
						}
						var o4 = old;
						o4.elt = null;
						o4.next = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = o4;
						_this45.modified = true;
						_this45.length--;
						_this45.pushmod = true;
						ret14 = true;
						break;
					}
					pre1 = cur1;
					cur1 = cur1.next;
				}
				var _this46 = cur.n2.shape.pairs;
				var pre2 = null;
				var cur2 = _this46.head;
				var ret16 = false;
				while(cur2 != null) {
					if(cur2.elt == cur) {
						var old1;
						var ret17;
						if(pre2 == null) {
							old1 = _this46.head;
							ret17 = old1.next;
							_this46.head = ret17;
							if(_this46.head == null) {
								_this46.pushmod = true;
							}
						} else {
							old1 = pre2.next;
							ret17 = old1.next;
							pre2.next = ret17;
							if(ret17 == null) {
								_this46.pushmod = true;
							}
						}
						var o5 = old1;
						o5.elt = null;
						o5.next = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = o5;
						_this46.modified = true;
						_this46.length--;
						_this46.pushmod = true;
						ret16 = true;
						break;
					}
					pre2 = cur2;
					cur2 = cur2.next;
				}
				var nxt = cur.next;
				if(cur.arb != null) {
					cur.arb.pair = null;
				}
				cur.arb = null;
				var o6 = cur;
				o6.n1 = o6.n2 = null;
				o6.sleeping = false;
				o6.next = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
				zpp_$nape_space_ZPP_$AABBPair.zpp_pool = o6;
				cur = nxt;
				continue;
			}
			var s11 = cur.n1.shape;
			var b110 = s11.body;
			var s21 = cur.n2.shape;
			var b23 = s21.body;
			if(!cur.first) {
				if((b110.component.sleeping || b110.type == 1) && (b23.component.sleeping || b23.type == 1)) {
					cur.sleeping = true;
					if(pre == null) {
						this.pairs = cur.next;
					} else {
						pre.next = cur.next;
					}
					cur = cur.next;
					continue;
				}
			}
			cur.first = false;
			var _this47 = s11.aabb;
			var x27 = s21.aabb;
			if(x27.miny <= _this47.maxy && _this47.miny <= x27.maxy && x27.minx <= _this47.maxx && _this47.minx <= x27.maxx) {
				var oarb = cur.arb;
				if(discrete) {
					cur.arb = space.narrowPhase(s11,s21,b110.type != 2 || b23.type != 2,cur.arb,false);
				} else {
					cur.arb = space.continuousEvent(s11,s21,b110.type != 2 || b23.type != 2,cur.arb,false);
				}
				if(cur.arb == null) {
					if(oarb != null) {
						oarb.pair = null;
					}
				} else {
					cur.arb.pair = cur;
				}
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,__class__: zpp_$nape_space_ZPP_$DynAABBPhase
});
var zpp_$nape_space_ZPP_$Island = function() {
	this.waket = 0;
	this.sleep = false;
	this.comps = null;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.comps = new zpp_$nape_util_ZNPList_$ZPP_$Component();
};
zpp_$nape_space_ZPP_$Island.__name__ = true;
zpp_$nape_space_ZPP_$Island.prototype = {
	pop: function() {
		var ret = this.next;
		this.next = ret.next;
		ret._inuse = false;
		if(this.next == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,__class__: zpp_$nape_space_ZPP_$Island
};
var zpp_$nape_space_ZPP_$Component = function() {
	this.woken = false;
	this.waket = 0;
	this.sleeping = false;
	this.island = null;
	this.constraint = null;
	this.body = null;
	this.isBody = false;
	this.rank = 0;
	this.parent = null;
	this.next = null;
	this.sleeping = false;
	this.island = null;
	this.parent = this;
	this.rank = 0;
	this.woken = false;
};
zpp_$nape_space_ZPP_$Component.__name__ = true;
zpp_$nape_space_ZPP_$Component.prototype = {
	__class__: zpp_$nape_space_ZPP_$Component
};
var zpp_$nape_space_ZPP_$CallbackSet = function() {
	this.lazydel = false;
	this.freed = false;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.int2 = null;
	this.int1 = null;
	this.di = 0;
	this.id = 0;
	this.arbiters = new zpp_$nape_util_ZNPList_$ZPP_$Arbiter();
};
zpp_$nape_space_ZPP_$CallbackSet.__name__ = true;
zpp_$nape_space_ZPP_$CallbackSet.get = function(i1,i2) {
	var ret;
	if(zpp_$nape_space_ZPP_$CallbackSet.zpp_pool == null) {
		ret = new zpp_$nape_space_ZPP_$CallbackSet();
	} else {
		ret = zpp_$nape_space_ZPP_$CallbackSet.zpp_pool;
		zpp_$nape_space_ZPP_$CallbackSet.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.freed = false;
	ret.lazydel = false;
	ret.COLLISIONstate = 1;
	ret.COLLISIONstamp = 0;
	ret.SENSORstate = 1;
	ret.SENSORstamp = 0;
	ret.FLUIDstate = 1;
	ret.FLUIDstamp = 0;
	if(i1.id < i2.id) {
		ret.int1 = i1;
		ret.int2 = i2;
	} else {
		ret.int1 = i2;
		ret.int2 = i1;
	}
	ret.id = ret.int1.id;
	ret.di = ret.int2.id;
	return ret;
};
zpp_$nape_space_ZPP_$CallbackSet.prototype = {
	remove_arb: function(x) {
		var _this = this.arbiters;
		var pre = null;
		var cur = _this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == x) {
				var old;
				var ret1;
				if(pre == null) {
					old = _this.head;
					ret1 = old.next;
					_this.head = ret1;
					if(_this.head == null) {
						_this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret1 = old.next;
					pre.next = ret1;
					if(ret1 == null) {
						_this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o;
				_this.modified = true;
				_this.length--;
				_this.pushmod = true;
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,empty_arb: function(type) {
		var retvar;
		retvar = true;
		var cx_ite = this.arbiters.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if((x.type & type) == 0) {
				cx_ite = cx_ite.next;
				continue;
			} else {
				retvar = false;
				break;
			}
		}
		return retvar;
	}
	,__class__: zpp_$nape_space_ZPP_$CallbackSet
};
var zpp_$nape_space_ZPP_$CbSetManager = function(space) {
	this.space = null;
	this.cbsets = null;
	if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool == null) {
		this.cbsets = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet();
	} else {
		this.cbsets = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool = this.cbsets.next;
		this.cbsets.next = null;
	}
	var _this = this.cbsets;
	this.cbsets.lt = zpp_$nape_callbacks_ZPP_$CbSet.setlt;
	this.space = space;
};
zpp_$nape_space_ZPP_$CbSetManager.__name__ = true;
zpp_$nape_space_ZPP_$CbSetManager.prototype = {
	get: function(cbTypes) {
		if(cbTypes.head == null) {
			return null;
		}
		var fake;
		if(zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool == null) {
			fake = new zpp_$nape_callbacks_ZPP_$CbSet();
		} else {
			fake = zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool;
			zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool = fake.next;
			fake.next = null;
		}
		var faketypes = fake.cbTypes;
		fake.cbTypes = cbTypes;
		var res = this.cbsets.find_weak(fake);
		var ret;
		if(res != null) {
			ret = res.data;
		} else {
			var set = zpp_$nape_callbacks_ZPP_$CbSet.get(cbTypes);
			this.cbsets.insert(set);
			set.manager = this;
			ret = set;
		}
		fake.cbTypes = faketypes;
		var o = fake;
		o.listeners.clear();
		o.zip_listeners = true;
		o.bodylisteners.clear();
		o.zip_bodylisteners = true;
		o.conlisteners.clear();
		o.zip_conlisteners = true;
		while(o.cbTypes.head != null) {
			var cb = o.cbTypes.pop_unsafe();
			cb.cbsets.remove(o);
		}
		o.next = zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool;
		zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool = o;
		return ret;
	}
	,remove: function(set) {
		this.cbsets.remove(set);
		while(set.cbpairs.head != null) {
			var pair = set.cbpairs.pop_unsafe();
			if(pair.a != pair.b) {
				if(set == pair.a) {
					pair.b.cbpairs.remove(pair);
				} else {
					pair.a.cbpairs.remove(pair);
				}
			}
			var o = pair;
			o.a = o.b = null;
			o.listeners.clear();
			o.next = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
			zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = o;
		}
		set.manager = null;
	}
	,__class__: zpp_$nape_space_ZPP_$CbSetManager
};
var zpp_$nape_space_ZPP_$Space = function(gravity,broadphase) {
	this.prelisteners = null;
	this.precb = null;
	this.continuous = false;
	this.toiEvents = null;
	this.pre_dt = 0.0;
	this.cbsets = null;
	this.callbackset_list = null;
	this.callbacks = null;
	this.wrap_listeners = null;
	this.listeners = null;
	this.islands = null;
	this.staticsleep = null;
	this.wrap_livecon = null;
	this.live_constraints = null;
	this.wrap_live = null;
	this.live = null;
	this.s_arbiters = null;
	this.f_arbiters = null;
	this.c_arbiters_false = null;
	this.c_arbiters_true = null;
	this.sortcontacts = false;
	this.time = 0.0;
	this.midstep = false;
	this.stamp = 0;
	this.global_ang_drag = 0.0;
	this.global_lin_drag = 0.0;
	this.__static = null;
	this.bphase = null;
	this.kinematics = null;
	this.wrap_constraints = null;
	this.constraints = null;
	this.wrap_compounds = null;
	this.compounds = null;
	this.wrap_bodies = null;
	this.bodies = null;
	this.gravityy = 0.0;
	this.gravityx = 0.0;
	this.outer = null;
	this.toiEvents = new zpp_$nape_util_ZNPList_$ZPP_$ToiEvent();
	this.global_lin_drag = 0.015;
	this.global_ang_drag = 0.015;
	zpp_$nape_callbacks_ZPP_$Callback.internal = true;
	this.precb = new nape_callbacks_PreCallback();
	this.precb.zpp_inner = new zpp_$nape_callbacks_ZPP_$Callback();
	zpp_$nape_callbacks_ZPP_$Callback.internal = false;
	this.sortcontacts = true;
	this.pre_dt = 0.0;
	var tmp;
	if(broadphase != null) {
		if(zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE = new nape_space_Broadphase();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		tmp = broadphase == zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE;
	} else {
		tmp = true;
	}
	if(tmp) {
		this.bphase = new zpp_$nape_space_ZPP_$DynAABBPhase(this);
	} else {
		if(zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE = new nape_space_Broadphase();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(broadphase == zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE) {
			this.bphase = new zpp_$nape_space_ZPP_$SweepPhase(this);
		}
	}
	this.time = 0.0;
	var me = this;
	if(gravity != null) {
		this.gravityx = gravity.x;
		this.gravityy = gravity.y;
	} else {
		this.gravityx = 0;
		this.gravityy = 0;
	}
	this.bodies = new zpp_$nape_util_ZNPList_$ZPP_$Body();
	this.wrap_bodies = zpp_$nape_util_ZPP_$BodyList.get(this.bodies);
	this.wrap_bodies.zpp_inner.adder = $bind(this,this.bodies_adder);
	this.wrap_bodies.zpp_inner.subber = $bind(this,this.bodies_subber);
	this.wrap_bodies.zpp_inner._modifiable = $bind(this,this.bodies_modifiable);
	this.compounds = new zpp_$nape_util_ZNPList_$ZPP_$Compound();
	this.wrap_compounds = zpp_$nape_util_ZPP_$CompoundList.get(this.compounds);
	this.wrap_compounds.zpp_inner.adder = $bind(this,this.compounds_adder);
	this.wrap_compounds.zpp_inner.subber = $bind(this,this.compounds_subber);
	this.wrap_compounds.zpp_inner._modifiable = $bind(this,this.compounds_modifiable);
	this.kinematics = new zpp_$nape_util_ZNPList_$ZPP_$Body();
	this.c_arbiters_true = new zpp_$nape_util_ZNPList_$ZPP_$ColArbiter();
	this.c_arbiters_false = new zpp_$nape_util_ZNPList_$ZPP_$ColArbiter();
	this.f_arbiters = new zpp_$nape_util_ZNPList_$ZPP_$FluidArbiter();
	this.s_arbiters = new zpp_$nape_util_ZNPList_$ZPP_$SensorArbiter();
	this.islands = new zpp_$nape_space_ZPP_$Island();
	this.live = new zpp_$nape_util_ZNPList_$ZPP_$Body();
	this.wrap_live = zpp_$nape_util_ZPP_$BodyList.get(this.live,true);
	this.staticsleep = new zpp_$nape_util_ZNPList_$ZPP_$Body();
	this.constraints = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this.wrap_constraints = zpp_$nape_util_ZPP_$ConstraintList.get(this.constraints);
	this.wrap_constraints.zpp_inner.adder = $bind(this,this.constraints_adder);
	this.wrap_constraints.zpp_inner.subber = $bind(this,this.constraints_subber);
	this.wrap_constraints.zpp_inner._modifiable = $bind(this,this.constraints_modifiable);
	this.live_constraints = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this.wrap_livecon = zpp_$nape_util_ZPP_$ConstraintList.get(this.live_constraints,true);
	this.__static = zpp_$nape_phys_ZPP_$Body.__static();
	this.__static.zpp_inner.space = this;
	this.callbacks = new zpp_$nape_callbacks_ZPP_$Callback();
	this.midstep = false;
	this.listeners = new zpp_$nape_util_ZNPList_$ZPP_$Listener();
	this.wrap_listeners = zpp_$nape_util_ZPP_$ListenerList.get(this.listeners);
	this.wrap_listeners.zpp_inner.adder = $bind(this,this.listeners_adder);
	this.wrap_listeners.zpp_inner.subber = $bind(this,this.listeners_subber);
	this.wrap_listeners.zpp_inner._modifiable = $bind(this,this.listeners_modifiable);
	this.callbackset_list = new zpp_$nape_space_ZPP_$CallbackSet();
	this.mrca1 = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
	this.mrca2 = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
	this.prelisteners = new zpp_$nape_util_ZNPList_$ZPP_$InteractionListener();
	this.cbsets = new zpp_$nape_space_ZPP_$CbSetManager(this);
};
zpp_$nape_space_ZPP_$Space.__name__ = true;
zpp_$nape_space_ZPP_$Space.prototype = {
	bodies_adder: function(x) {
		if(x.zpp_inner.compound != null) {
			throw new js__$Boot_HaxeError("Error: Cannot set the space of a Body belonging to a Compound, only the root Compound space can be set");
		}
		if(x.zpp_inner.space != this) {
			if(x.zpp_inner.space != null) {
				x.zpp_inner.space.outer.zpp_inner.wrap_bodies.remove(x);
			}
			this.addBody(x.zpp_inner);
			return true;
		} else {
			return false;
		}
	}
	,bodies_subber: function(x) {
		this.remBody(x.zpp_inner);
	}
	,bodies_modifiable: function() {
		if(this.midstep) {
			throw new js__$Boot_HaxeError("Error: Space::bodies cannot be set during space step()");
		}
	}
	,compounds_adder: function(x) {
		if(x.zpp_inner.compound != null) {
			throw new js__$Boot_HaxeError("Error: Cannot set the space of an inner Compound, only the root Compound space can be set");
		}
		if(x.zpp_inner.space != this) {
			if(x.zpp_inner.space != null) {
				x.zpp_inner.space.wrap_compounds.remove(x);
			}
			this.addCompound(x.zpp_inner);
			return true;
		} else {
			return false;
		}
	}
	,compounds_subber: function(x) {
		this.remCompound(x.zpp_inner);
	}
	,compounds_modifiable: function() {
		if(this.midstep) {
			throw new js__$Boot_HaxeError("Error: Space::compounds cannot be set during space step()");
		}
	}
	,constraints_adder: function(x) {
		if(x.zpp_inner.compound != null) {
			throw new js__$Boot_HaxeError("Error: Cannot set the space of a Constraint belonging to a Compound, only the root Compound space can be set");
		}
		if(x.zpp_inner.space != this) {
			if(x.zpp_inner.space != null) {
				x.zpp_inner.space.outer.zpp_inner.wrap_constraints.remove(x);
			}
			this.addConstraint(x.zpp_inner);
			return true;
		} else {
			return false;
		}
	}
	,constraints_subber: function(x) {
		this.remConstraint(x.zpp_inner);
	}
	,constraints_modifiable: function() {
		if(this.midstep) {
			throw new js__$Boot_HaxeError("Error: Space::constraints cannot be set during space step()");
		}
	}
	,listeners_adder: function(x) {
		if(x.zpp_inner.space != this) {
			if(x.zpp_inner.space != null) {
				x.zpp_inner.space.outer.zpp_inner.wrap_listeners.remove(x);
			}
			this.addListener(x.zpp_inner);
			return true;
		} else {
			return false;
		}
	}
	,listeners_subber: function(x) {
		this.remListener(x.zpp_inner);
	}
	,listeners_modifiable: function() {
		if(this.midstep) {
			throw new js__$Boot_HaxeError("Error: Space::listeners cannot be set during space step()");
		}
	}
	,addListener: function(x) {
		x.space = this;
		x.addedToSpace();
		if(x.interaction != null) {
			var x1 = x.interaction;
		}
	}
	,remListener: function(x) {
		if(x.interaction != null) {
			var x1 = x.interaction;
		}
		x.removedFromSpace();
		x.space = null;
	}
	,add_callbackset: function(cb) {
		var _this = cb.int1.cbsets;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = cb;
		var temp = ret;
		temp.next = _this.head;
		_this.head = temp;
		_this.modified = true;
		_this.length++;
		var _this1 = cb.int2.cbsets;
		var ret1;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool == null) {
			ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet();
		} else {
			ret1 = zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.elt = cb;
		var temp1 = ret1;
		temp1.next = _this1.head;
		_this1.head = temp1;
		_this1.modified = true;
		_this1.length++;
		var _this2 = this.callbackset_list;
		cb._inuse = true;
		var temp2 = cb;
		temp2.next = _this2.next;
		_this2.next = temp2;
		_this2.modified = true;
		_this2.length++;
	}
	,remove_callbackset: function(cb) {
		cb.lazydel = true;
		var _this = cb.int1.cbsets;
		var pre = null;
		var cur = _this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == cb) {
				var old;
				var ret1;
				if(pre == null) {
					old = _this.head;
					ret1 = old.next;
					_this.head = ret1;
					if(_this.head == null) {
						_this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret1 = old.next;
					pre.next = ret1;
					if(ret1 == null) {
						_this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool = o;
				_this.modified = true;
				_this.length--;
				_this.pushmod = true;
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		var _this1 = cb.int2.cbsets;
		var pre1 = null;
		var cur1 = _this1.head;
		var ret2 = false;
		while(cur1 != null) {
			if(cur1.elt == cb) {
				var old1;
				var ret3;
				if(pre1 == null) {
					old1 = _this1.head;
					ret3 = old1.next;
					_this1.head = ret3;
					if(_this1.head == null) {
						_this1.pushmod = true;
					}
				} else {
					old1 = pre1.next;
					ret3 = old1.next;
					pre1.next = ret3;
					if(ret3 == null) {
						_this1.pushmod = true;
					}
				}
				var o1 = old1;
				o1.elt = null;
				o1.next = zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool = o1;
				_this1.modified = true;
				_this1.length--;
				_this1.pushmod = true;
				ret2 = true;
				break;
			}
			pre1 = cur1;
			cur1 = cur1.next;
		}
	}
	,transmitType: function(p,new_type) {
		var o = p;
		if(!o.world) {
			o.component.waket = this.stamp + (this.midstep ? 0 : 1);
			if(o.type == 3) {
				o.kinematicDelaySleep = true;
			}
			if(o.component.sleeping) {
				this.really_wake(o,false);
			}
		}
		if(p.type == 2) {
			this.live.remove(p);
		} else if(p.type == 3) {
			this.kinematics.remove(p);
			this.staticsleep.remove(p);
		} else if(p.type == 1) {
			this.staticsleep.remove(p);
		}
		p.type = new_type;
		if(p.type == 3) {
			this.kinematics.add(p);
		}
		if(p.type == 1) {
			this.static_validation(p);
		}
		p.component.sleeping = true;
		var o1 = p;
		if(!o1.world) {
			o1.component.waket = this.stamp + (this.midstep ? 0 : 1);
			if(o1.type == 3) {
				o1.kinematicDelaySleep = true;
			}
			if(o1.component.sleeping) {
				this.really_wake(o1,true);
			}
		}
	}
	,removed_shape: function(s,deleting) {
		if(deleting == null) {
			deleting = false;
		}
		var _gthis = this;
		var body = s.body;
		if(!deleting) {
			body.wake();
		}
		var pre = null;
		var cx_ite = body.arbiters.head;
		while(cx_ite != null) {
			var xarb = cx_ite.elt;
			var rem = xarb.ws1 == s || xarb.ws2 == s;
			if(rem) {
				if(xarb.present != 0) {
					this.MRCA_chains(xarb.ws1,xarb.ws2);
					var cx_ite1 = this.mrca1.head;
					while(cx_ite1 != null) {
						var i1 = cx_ite1.elt;
						var cx_ite2 = this.mrca2.head;
						while(cx_ite2 != null) {
							var i2 = cx_ite2.elt;
							var cb1 = i1.cbSet;
							var cb2 = i2.cbSet;
							cb1.validate();
							cb2.validate();
							var _this = cb1.manager;
							var ret = null;
							var pairs = cb1.cbpairs.length < cb2.cbpairs.length ? cb1.cbpairs : cb2.cbpairs;
							var cx_ite3 = pairs.head;
							while(cx_ite3 != null) {
								var p = cx_ite3.elt;
								if(p.a == cb1 && p.b == cb2 || p.a == cb2 && p.b == cb1) {
									ret = p;
									break;
								}
								cx_ite3 = cx_ite3.next;
							}
							if(ret == null) {
								var ret1;
								if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
									ret1 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
								} else {
									ret1 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
									zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret1.next;
									ret1.next = null;
								}
								ret1.zip_listeners = true;
								if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(cb1,cb2)) {
									ret1.a = cb1;
									ret1.b = cb2;
								} else {
									ret1.a = cb2;
									ret1.b = cb1;
								}
								ret = ret1;
								cb1.cbpairs.add(ret);
								if(cb2 != cb1) {
									cb2.cbpairs.add(ret);
								}
							}
							if(ret.zip_listeners) {
								ret.zip_listeners = false;
								ret.__validate();
							}
							if(ret.listeners.head == null) {
								cx_ite2 = cx_ite2.next;
								continue;
							}
							var callbackset = zpp_$nape_phys_ZPP_$Interactor.get(i1,i2);
							callbackset.remove_arb(xarb);
							xarb.present--;
							var _this1 = cb1.manager;
							var ret2 = null;
							var pairs1 = cb1.cbpairs.length < cb2.cbpairs.length ? cb1.cbpairs : cb2.cbpairs;
							var cx_ite4 = pairs1.head;
							while(cx_ite4 != null) {
								var p1 = cx_ite4.elt;
								if(p1.a == cb1 && p1.b == cb2 || p1.a == cb2 && p1.b == cb1) {
									ret2 = p1;
									break;
								}
								cx_ite4 = cx_ite4.next;
							}
							if(ret2 == null) {
								var ret3;
								if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
									ret3 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
								} else {
									ret3 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
									zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret3.next;
									ret3.next = null;
								}
								ret3.zip_listeners = true;
								if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(cb1,cb2)) {
									ret3.a = cb1;
									ret3.b = cb2;
								} else {
									ret3.a = cb2;
									ret3.b = cb1;
								}
								ret2 = ret3;
								cb1.cbpairs.add(ret2);
								if(cb2 != cb1) {
									cb2.cbpairs.add(ret2);
								}
							}
							if(ret2.zip_listeners) {
								ret2.zip_listeners = false;
								ret2.__validate();
							}
							var cx_ite5 = ret2.listeners.head;
							while(cx_ite5 != null) {
								var x = cx_ite5.elt;
								if(x.event == 1) {
									if((x.itype & xarb.type) != 0 && callbackset.empty_arb(x.itype)) {
										var cb = _gthis.push_callback(x);
										cb.event = 1;
										var o1 = callbackset.int1;
										var o2 = callbackset.int2;
										var tmp;
										var _this2 = x.options1;
										var xs = o1.cbTypes;
										if(_this2.nonemptyintersection(xs,_this2.includes) && !_this2.nonemptyintersection(xs,_this2.excludes)) {
											var _this3 = x.options2;
											var xs1 = o2.cbTypes;
											if(_this3.nonemptyintersection(xs1,_this3.includes)) {
												tmp = !_this3.nonemptyintersection(xs1,_this3.excludes);
											} else {
												tmp = false;
											}
										} else {
											tmp = false;
										}
										if(tmp) {
											cb.int1 = o1;
											cb.int2 = o2;
										} else {
											cb.int1 = o2;
											cb.int2 = o1;
										}
										cb.set = callbackset;
									}
								}
								cx_ite5 = cx_ite5.next;
							}
							if(callbackset.arbiters.head == null) {
								this.remove_callbackset(callbackset);
							}
							cx_ite2 = cx_ite2.next;
						}
						cx_ite1 = cx_ite1.next;
					}
				}
				if(xarb.b1 != body && xarb.b1.type == 2) {
					var o = xarb.b1;
					if(!o.world) {
						o.component.waket = this.stamp + (this.midstep ? 0 : 1);
						if(o.type == 3) {
							o.kinematicDelaySleep = true;
						}
						if(o.component.sleeping) {
							this.really_wake(o,false);
						}
					}
				}
				if(xarb.b2 != body && xarb.b2.type == 2) {
					var o3 = xarb.b2;
					if(!o3.world) {
						o3.component.waket = this.stamp + (this.midstep ? 0 : 1);
						if(o3.type == 3) {
							o3.kinematicDelaySleep = true;
						}
						if(o3.component.sleeping) {
							this.really_wake(o3,false);
						}
					}
				}
				xarb.cleared = true;
				if(body == null || xarb.b2 == body) {
					var _this4 = xarb.b1.arbiters;
					var pre1 = null;
					var cur = _this4.head;
					var ret4 = false;
					while(cur != null) {
						if(cur.elt == xarb) {
							var old;
							var ret5;
							if(pre1 == null) {
								old = _this4.head;
								ret5 = old.next;
								_this4.head = ret5;
								if(_this4.head == null) {
									_this4.pushmod = true;
								}
							} else {
								old = pre1.next;
								ret5 = old.next;
								pre1.next = ret5;
								if(ret5 == null) {
									_this4.pushmod = true;
								}
							}
							var o4 = old;
							o4.elt = null;
							o4.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o4;
							_this4.modified = true;
							_this4.length--;
							_this4.pushmod = true;
							ret4 = true;
							break;
						}
						pre1 = cur;
						cur = cur.next;
					}
				}
				if(body == null || xarb.b1 == body) {
					var _this5 = xarb.b2.arbiters;
					var pre2 = null;
					var cur1 = _this5.head;
					var ret6 = false;
					while(cur1 != null) {
						if(cur1.elt == xarb) {
							var old1;
							var ret7;
							if(pre2 == null) {
								old1 = _this5.head;
								ret7 = old1.next;
								_this5.head = ret7;
								if(_this5.head == null) {
									_this5.pushmod = true;
								}
							} else {
								old1 = pre2.next;
								ret7 = old1.next;
								pre2.next = ret7;
								if(ret7 == null) {
									_this5.pushmod = true;
								}
							}
							var o5 = old1;
							o5.elt = null;
							o5.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o5;
							_this5.modified = true;
							_this5.length--;
							_this5.pushmod = true;
							ret6 = true;
							break;
						}
						pre2 = cur1;
						cur1 = cur1.next;
					}
				}
				if(xarb.pair != null) {
					xarb.pair.arb = null;
					xarb.pair = null;
				}
				xarb.active = false;
				this.f_arbiters.modified = true;
				cx_ite = body.arbiters.erase(pre);
				continue;
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		this.bphase.remove(s);
		s.removedFromSpace();
	}
	,addConstraint: function(con) {
		con.space = this;
		con.addedToSpace();
		if(con.active) {
			con.component.sleeping = true;
			this.wake_constraint(con,true);
		}
	}
	,remConstraint: function(con) {
		if(con.active) {
			this.wake_constraint(con,true);
			this.live_constraints.remove(con);
		}
		con.removedFromSpace();
		con.space = null;
	}
	,addCompound: function(x) {
		x.space = this;
		x.addedToSpace();
		var cx_ite = x.bodies.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.addBody(i);
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = x.constraints.head;
		while(cx_ite1 != null) {
			var i1 = cx_ite1.elt;
			this.addConstraint(i1);
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = x.compounds.head;
		while(cx_ite2 != null) {
			var i2 = cx_ite2.elt;
			this.addCompound(i2);
			cx_ite2 = cx_ite2.next;
		}
	}
	,remCompound: function(x) {
		var cx_ite = x.bodies.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.remBody(i);
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = x.constraints.head;
		while(cx_ite1 != null) {
			var i1 = cx_ite1.elt;
			this.remConstraint(i1);
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = x.compounds.head;
		while(cx_ite2 != null) {
			var i2 = cx_ite2.elt;
			this.remCompound(i2);
			cx_ite2 = cx_ite2.next;
		}
		x.removedFromSpace();
		x.space = null;
	}
	,addBody: function(body,flag) {
		if(flag == null) {
			flag = -1;
		}
		body.space = this;
		body.addedToSpace();
		body.component.sleeping = true;
		var o = body;
		if(!o.world) {
			o.component.waket = this.stamp + (this.midstep ? 0 : 1);
			if(o.type == 3) {
				o.kinematicDelaySleep = true;
			}
			if(o.component.sleeping) {
				this.really_wake(o,true);
			}
		}
		var cx_ite = body.shapes.head;
		while(cx_ite != null) {
			var shape = cx_ite.elt;
			this.bphase.insert(shape);
			shape.addedToSpace();
			cx_ite = cx_ite.next;
		}
		if(body.type == 1) {
			this.static_validation(body);
		} else if(body.type != 2) {
			if(flag != 3) {
				this.kinematics.add(body);
			}
		}
	}
	,remBody: function(body,flag) {
		if(flag == null) {
			flag = -1;
		}
		if(body.type == 1) {
			var o = body;
			if(!o.world) {
				o.component.waket = this.stamp + (this.midstep ? 0 : 1);
				if(o.type == 3) {
					o.kinematicDelaySleep = true;
				}
				if(o.component.sleeping) {
					this.really_wake(o,true);
				}
			}
			this.staticsleep.remove(body);
		} else if(body.type == 2) {
			var o1 = body;
			if(!o1.world) {
				o1.component.waket = this.stamp + (this.midstep ? 0 : 1);
				if(o1.type == 3) {
					o1.kinematicDelaySleep = true;
				}
				if(o1.component.sleeping) {
					this.really_wake(o1,true);
				}
			}
			this.live.remove(body);
		} else {
			if(flag != 3) {
				this.kinematics.remove(body);
			}
			var o2 = body;
			if(!o2.world) {
				o2.component.waket = this.stamp + (this.midstep ? 0 : 1);
				if(o2.type == 3) {
					o2.kinematicDelaySleep = true;
				}
				if(o2.component.sleeping) {
					this.really_wake(o2,true);
				}
			}
			this.staticsleep.remove(body);
		}
		var cx_ite = body.shapes.head;
		while(cx_ite != null) {
			var shape = cx_ite.elt;
			this.removed_shape(shape,true);
			cx_ite = cx_ite.next;
		}
		body.removedFromSpace();
		body.space = null;
	}
	,push_callback: function(i) {
		var cb;
		if(zpp_$nape_callbacks_ZPP_$Callback.zpp_pool == null) {
			cb = new zpp_$nape_callbacks_ZPP_$Callback();
		} else {
			cb = zpp_$nape_callbacks_ZPP_$Callback.zpp_pool;
			zpp_$nape_callbacks_ZPP_$Callback.zpp_pool = cb.next;
			cb.next = null;
		}
		this.callbacks.push(cb);
		cb.listener = i;
		return cb;
	}
	,step: function(deltaTime,velocityIterations,positionIterations) {
		var _gthis = this;
		if(this.midstep) {
			throw new js__$Boot_HaxeError("Error: ... REALLY?? you're going to call space.step() inside of space.step()? COME ON!!");
		}
		this.time += deltaTime;
		this.pre_dt = deltaTime;
		this.midstep = true;
		this.stamp++;
		this.validation();
		this.bphase.broadphase(this,true);
		this.prestep(deltaTime);
		if(this.sortcontacts) {
			var xxlist = this.c_arbiters_false;
			if(xxlist.head != null && xxlist.head.next != null) {
				var head = xxlist.head;
				var tail = null;
				var left = null;
				var right = null;
				var nxt = null;
				var listSize = 1;
				var numMerges;
				var leftSize;
				var rightSize;
				while(true) {
					numMerges = 0;
					left = head;
					head = null;
					tail = head;
					while(left != null) {
						++numMerges;
						right = left;
						leftSize = 0;
						rightSize = listSize;
						while(right != null && leftSize < listSize) {
							++leftSize;
							right = right.next;
						}
						while(leftSize > 0 || rightSize > 0 && right != null) {
							if(leftSize == 0) {
								nxt = right;
								right = right.next;
								--rightSize;
							} else if(rightSize == 0 || right == null) {
								nxt = left;
								left = left.next;
								--leftSize;
							} else if(left.elt.active && right.elt.active ? left.elt.oc1.dist < right.elt.oc1.dist : true) {
								nxt = left;
								left = left.next;
								--leftSize;
							} else {
								nxt = right;
								right = right.next;
								--rightSize;
							}
							if(tail != null) {
								tail.next = nxt;
							} else {
								head = nxt;
							}
							tail = nxt;
						}
						left = right;
					}
					tail.next = null;
					listSize <<= 1;
					if(!(numMerges > 1)) {
						break;
					}
				}
				xxlist.head = head;
				xxlist.modified = true;
				xxlist.pushmod = true;
			}
		}
		this.updateVel(deltaTime);
		this.warmStart();
		this.iterateVel(velocityIterations);
		var cx_ite = this.kinematics.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			cur.pre_posx = cur.posx;
			cur.pre_posy = cur.posy;
			cur.pre_rot = cur.rot;
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = this.live.head;
		while(cx_ite1 != null) {
			var cur1 = cx_ite1.elt;
			cur1.pre_posx = cur1.posx;
			cur1.pre_posy = cur1.posy;
			cur1.pre_rot = cur1.rot;
			cx_ite1 = cx_ite1.next;
		}
		this.updatePos(deltaTime);
		this.continuous = true;
		this.continuousCollisions(deltaTime);
		this.continuous = false;
		this.iteratePos(positionIterations);
		var cx_ite2 = this.kinematics.head;
		while(cx_ite2 != null) {
			var cur2 = cx_ite2.elt;
			var upos = !(cur2.posx == cur2.pre_posx && cur2.posy == cur2.pre_posy);
			var urot = cur2.pre_rot != cur2.rot;
			if(upos) {
				var cx_ite3 = cur2.shapes.head;
				while(cx_ite3 != null) {
					var s = cx_ite3.elt;
					if(s.type == 1) {
						s.polygon.invalidate_gverts();
						s.polygon.invalidate_gaxi();
					}
					s.invalidate_worldCOM();
					cx_ite3 = cx_ite3.next;
				}
				cur2.zip_worldCOM = true;
			}
			if(urot) {
				cur2.zip_axis = true;
				var cx_ite4 = cur2.shapes.head;
				while(cx_ite4 != null) {
					var s1 = cx_ite4.elt;
					if(s1.type == 1) {
						s1.polygon.invalidate_gverts();
						s1.polygon.invalidate_gaxi();
					}
					s1.invalidate_worldCOM();
					cx_ite4 = cx_ite4.next;
				}
				cur2.zip_worldCOM = true;
			}
			cx_ite2 = cx_ite2.next;
		}
		var cx_ite5 = this.live.head;
		while(cx_ite5 != null) {
			var cur3 = cx_ite5.elt;
			var upos1 = !(cur3.posx == cur3.pre_posx && cur3.posy == cur3.pre_posy);
			var urot1 = cur3.pre_rot != cur3.rot;
			if(upos1) {
				var cx_ite6 = cur3.shapes.head;
				while(cx_ite6 != null) {
					var s2 = cx_ite6.elt;
					if(s2.type == 1) {
						s2.polygon.invalidate_gverts();
						s2.polygon.invalidate_gaxi();
					}
					s2.invalidate_worldCOM();
					cx_ite6 = cx_ite6.next;
				}
				cur3.zip_worldCOM = true;
			}
			if(urot1) {
				cur3.zip_axis = true;
				var cx_ite7 = cur3.shapes.head;
				while(cx_ite7 != null) {
					var s3 = cx_ite7.elt;
					if(s3.type == 1) {
						s3.polygon.invalidate_gverts();
						s3.polygon.invalidate_gaxi();
					}
					s3.invalidate_worldCOM();
					cx_ite7 = cx_ite7.next;
				}
				cur3.zip_worldCOM = true;
			}
			cx_ite5 = cx_ite5.next;
		}
		var pre = null;
		var cx_ite8 = this.staticsleep.head;
		while(cx_ite8 != null) {
			var b = cx_ite8.elt;
			if(b.type != 3 || b.velx == 0 && b.vely == 0 && b.angvel == 0) {
				if(b.kinematicDelaySleep) {
					b.kinematicDelaySleep = false;
					cx_ite8 = cx_ite8.next;
					continue;
				}
				b.component.sleeping = true;
				var _this = this.staticsleep;
				var old;
				var ret;
				if(pre == null) {
					old = _this.head;
					ret = old.next;
					_this.head = ret;
					if(_this.head == null) {
						_this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret = old.next;
					pre.next = ret;
					if(ret == null) {
						_this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool = o;
				_this.modified = true;
				_this.length--;
				_this.pushmod = true;
				cx_ite8 = ret;
				continue;
			}
			pre = cx_ite8;
			cx_ite8 = cx_ite8.next;
		}
		this.doForests(deltaTime);
		this.sleepArbiters();
		this.midstep = false;
		var pre1 = null;
		var cx_ite9 = this.callbackset_list.next;
		while(cx_ite9 != null) {
			var set = cx_ite9;
			if(set.arbiters.head == null) {
				var _this1 = this.callbackset_list;
				var old1;
				var ret1;
				if(pre1 == null) {
					old1 = _this1.next;
					ret1 = old1.next;
					_this1.next = ret1;
					if(_this1.next == null) {
						_this1.pushmod = true;
					}
				} else {
					old1 = pre1.next;
					ret1 = old1.next;
					pre1.next = ret1;
					if(ret1 == null) {
						_this1.pushmod = true;
					}
				}
				old1._inuse = false;
				_this1.modified = true;
				_this1.length--;
				_this1.pushmod = true;
				cx_ite9 = ret1;
				var o1 = set;
				o1.int1 = o1.int2 = null;
				o1.id = o1.di = -1;
				o1.freed = true;
				o1.next = zpp_$nape_space_ZPP_$CallbackSet.zpp_pool;
				zpp_$nape_space_ZPP_$CallbackSet.zpp_pool = o1;
				continue;
			}
			var ret2;
			ret2 = true;
			var cx_ite10 = set.arbiters.head;
			while(cx_ite10 != null) {
				var x = cx_ite10.elt;
				if(x.sleeping) {
					cx_ite10 = cx_ite10.next;
					continue;
				} else {
					ret2 = false;
					break;
				}
			}
			var sleeping = ret2;
			var a = set.int1.cbSet;
			var b1 = set.int2.cbSet;
			var _this2 = a.manager;
			var ret3 = null;
			var pairs = a.cbpairs.length < b1.cbpairs.length ? a.cbpairs : b1.cbpairs;
			var cx_ite11 = pairs.head;
			while(cx_ite11 != null) {
				var p = cx_ite11.elt;
				if(p.a == a && p.b == b1 || p.a == b1 && p.b == a) {
					ret3 = p;
					break;
				}
				cx_ite11 = cx_ite11.next;
			}
			if(ret3 == null) {
				var ret4;
				if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
					ret4 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
				} else {
					ret4 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
					zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret4.next;
					ret4.next = null;
				}
				ret4.zip_listeners = true;
				if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(a,b1)) {
					ret4.a = a;
					ret4.b = b1;
				} else {
					ret4.a = b1;
					ret4.b = a;
				}
				ret3 = ret4;
				a.cbpairs.add(ret3);
				if(b1 != a) {
					b1.cbpairs.add(ret3);
				}
			}
			if(ret3.zip_listeners) {
				ret3.zip_listeners = false;
				ret3.__validate();
			}
			var cx_ite12 = ret3.listeners.head;
			while(cx_ite12 != null) {
				var x1 = cx_ite12.elt;
				if(x1.event == 6) {
					if((!sleeping || x1.allowSleepingCallbacks) && !set.empty_arb(x1.itype)) {
						var cb = _gthis.push_callback(x1);
						cb.event = 6;
						var o11 = set.int1;
						var o2 = set.int2;
						var tmp;
						var _this3 = x1.options1;
						var xs = o11.cbTypes;
						if(_this3.nonemptyintersection(xs,_this3.includes) && !_this3.nonemptyintersection(xs,_this3.excludes)) {
							var _this4 = x1.options2;
							var xs1 = o2.cbTypes;
							if(_this4.nonemptyintersection(xs1,_this4.includes)) {
								tmp = !_this4.nonemptyintersection(xs1,_this4.excludes);
							} else {
								tmp = false;
							}
						} else {
							tmp = false;
						}
						if(tmp) {
							cb.int1 = o11;
							cb.int2 = o2;
						} else {
							cb.int1 = o2;
							cb.int2 = o11;
						}
						cb.set = set;
					}
				}
				cx_ite12 = cx_ite12.next;
			}
			pre1 = cx_ite9;
			cx_ite9 = cx_ite9.next;
		}
		while(!this.callbacks.empty()) {
			var cb1 = this.callbacks.pop();
			if(cb1.listener.type == 0) {
				var o3 = cb1.listener.body;
				o3.handler(cb1.wrapper_body());
			} else if(cb1.listener.type == 1) {
				var o4 = cb1.listener.constraint;
				o4.handler(cb1.wrapper_con());
			} else if(cb1.listener.type == 2) {
				var o5 = cb1.listener.interaction;
				o5.handleri(cb1.wrapper_int());
			}
			var o6 = cb1;
			o6.int1 = o6.int2 = null;
			o6.body = null;
			o6.constraint = null;
			o6.listener = null;
			if(o6.wrap_arbiters != null) {
				o6.wrap_arbiters.zpp_inner.inner = null;
			}
			o6.set = null;
			o6.next = zpp_$nape_callbacks_ZPP_$Callback.zpp_pool;
			zpp_$nape_callbacks_ZPP_$Callback.zpp_pool = o6;
		}
	}
	,continuousCollisions: function(deltaTime) {
		var MAX_VEL = 2 * Math.PI / deltaTime;
		this.bphase.broadphase(this,false);
		var curTimeAlpha = 0.0;
		while(curTimeAlpha < 1 && this.toiEvents.head != null) {
			var minTOI = null;
			var minTime = 2.0;
			var minKinematic = false;
			var preMin = null;
			var pre = null;
			var cx_ite = this.toiEvents.head;
			while(cx_ite != null) {
				var toi = cx_ite.elt;
				var b1 = toi.s1.body;
				var b2 = toi.s2.body;
				if(b1.sweepFrozen && b2.sweepFrozen) {
					if(toi.toi != 0 && zpp_$nape_geom_ZPP_$Collide.testCollide_safe(toi.s1,toi.s2)) {
						toi.toi = 0;
					} else {
						cx_ite = this.toiEvents.erase(pre);
						var o = toi;
						o.next = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
						zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = o;
						continue;
					}
				}
				if(toi.frozen1 != b1.sweepFrozen || toi.frozen2 != b2.sweepFrozen) {
					if(!toi.kinematic) {
						toi.frozen1 = b1.sweepFrozen;
						toi.frozen2 = b2.sweepFrozen;
						if(toi.frozen1) {
							var tmp = toi.s1;
							toi.s1 = toi.s2;
							toi.s2 = tmp;
							toi.frozen1 = false;
							toi.frozen2 = true;
						}
						zpp_$nape_geom_ZPP_$SweepDistance.staticSweep(toi,deltaTime,0,nape_Config.collisionSlopCCD);
						if(toi.toi < 0) {
							cx_ite = this.toiEvents.erase(pre);
							var o1 = toi;
							o1.next = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
							zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = o1;
							continue;
						}
					} else {
						cx_ite = this.toiEvents.erase(pre);
						var o2 = toi;
						o2.next = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
						zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = o2;
						continue;
					}
				}
				if(toi.toi >= 0 && (toi.toi < minTime || !minKinematic && toi.kinematic)) {
					minTOI = toi;
					minTime = toi.toi;
					minKinematic = toi.kinematic;
					preMin = pre;
				}
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			if(minTOI == null) {
				break;
			}
			this.toiEvents.erase(preMin);
			curTimeAlpha = minTOI.toi;
			var b11 = minTOI.s1.body;
			var b21 = minTOI.s2.body;
			if(!b11.sweepFrozen) {
				var dt = curTimeAlpha * deltaTime;
				var delta = dt - b11.sweepTime;
				if(delta != 0) {
					b11.sweepTime = dt;
					var t = delta;
					b11.posx += b11.velx * t;
					b11.posy += b11.vely * t;
					if(b11.angvel != 0) {
						var dr = b11.sweep_angvel * delta;
						b11.rot += dr;
						if(dr * dr > 0.0001) {
							b11.axisx = Math.sin(b11.rot);
							b11.axisy = Math.cos(b11.rot);
						} else {
							var d2 = dr * dr;
							var p = 1 - 0.5 * d2;
							var m = 1 - d2 * d2 / 8;
							var nx = (p * b11.axisx + dr * b11.axisy) * m;
							b11.axisy = (p * b11.axisy - dr * b11.axisx) * m;
							b11.axisx = nx;
						}
					}
				}
				var s = minTOI.s1;
				if(s.type == 0) {
					s.worldCOMx = b11.posx + (b11.axisy * s.localCOMx - b11.axisx * s.localCOMy);
					s.worldCOMy = b11.posy + (s.localCOMx * b11.axisx + s.localCOMy * b11.axisy);
				} else {
					var p1 = s.polygon;
					var li = p1.lverts.next;
					var cx_ite1 = p1.gverts.next;
					while(cx_ite1 != null) {
						var g = cx_ite1;
						var l = li;
						li = li.next;
						g.x = b11.posx + (b11.axisy * l.x - b11.axisx * l.y);
						g.y = b11.posy + (l.x * b11.axisx + l.y * b11.axisy);
						cx_ite1 = cx_ite1.next;
					}
					var ite = p1.edges.head;
					var cx_ite2 = p1.gverts.next;
					var u = cx_ite2;
					cx_ite2 = cx_ite2.next;
					while(cx_ite2 != null) {
						var v = cx_ite2;
						var e = ite.elt;
						ite = ite.next;
						e.gnormx = b11.axisy * e.lnormx - b11.axisx * e.lnormy;
						e.gnormy = e.lnormx * b11.axisx + e.lnormy * b11.axisy;
						e.gprojection = b11.posx * e.gnormx + b11.posy * e.gnormy + e.lprojection;
						e.tp0 = u.y * e.gnormx - u.x * e.gnormy;
						e.tp1 = v.y * e.gnormx - v.x * e.gnormy;
						u = v;
						cx_ite2 = cx_ite2.next;
					}
					var v1 = p1.gverts.next;
					var e1 = ite.elt;
					ite = ite.next;
					e1.gnormx = b11.axisy * e1.lnormx - b11.axisx * e1.lnormy;
					e1.gnormy = e1.lnormx * b11.axisx + e1.lnormy * b11.axisy;
					e1.gprojection = b11.posx * e1.gnormx + b11.posy * e1.gnormy + e1.lprojection;
					e1.tp0 = u.y * e1.gnormx - u.x * e1.gnormy;
					e1.tp1 = v1.y * e1.gnormx - v1.x * e1.gnormy;
				}
			}
			if(!b21.sweepFrozen) {
				var dt1 = curTimeAlpha * deltaTime;
				var delta1 = dt1 - b21.sweepTime;
				if(delta1 != 0) {
					b21.sweepTime = dt1;
					var t1 = delta1;
					b21.posx += b21.velx * t1;
					b21.posy += b21.vely * t1;
					if(b21.angvel != 0) {
						var dr1 = b21.sweep_angvel * delta1;
						b21.rot += dr1;
						if(dr1 * dr1 > 0.0001) {
							b21.axisx = Math.sin(b21.rot);
							b21.axisy = Math.cos(b21.rot);
						} else {
							var d21 = dr1 * dr1;
							var p2 = 1 - 0.5 * d21;
							var m1 = 1 - d21 * d21 / 8;
							var nx1 = (p2 * b21.axisx + dr1 * b21.axisy) * m1;
							b21.axisy = (p2 * b21.axisy - dr1 * b21.axisx) * m1;
							b21.axisx = nx1;
						}
					}
				}
				var s1 = minTOI.s2;
				if(s1.type == 0) {
					s1.worldCOMx = b21.posx + (b21.axisy * s1.localCOMx - b21.axisx * s1.localCOMy);
					s1.worldCOMy = b21.posy + (s1.localCOMx * b21.axisx + s1.localCOMy * b21.axisy);
				} else {
					var p3 = s1.polygon;
					var li1 = p3.lverts.next;
					var cx_ite3 = p3.gverts.next;
					while(cx_ite3 != null) {
						var g1 = cx_ite3;
						var l1 = li1;
						li1 = li1.next;
						g1.x = b21.posx + (b21.axisy * l1.x - b21.axisx * l1.y);
						g1.y = b21.posy + (l1.x * b21.axisx + l1.y * b21.axisy);
						cx_ite3 = cx_ite3.next;
					}
					var ite1 = p3.edges.head;
					var cx_ite4 = p3.gverts.next;
					var u1 = cx_ite4;
					cx_ite4 = cx_ite4.next;
					while(cx_ite4 != null) {
						var v2 = cx_ite4;
						var e2 = ite1.elt;
						ite1 = ite1.next;
						e2.gnormx = b21.axisy * e2.lnormx - b21.axisx * e2.lnormy;
						e2.gnormy = e2.lnormx * b21.axisx + e2.lnormy * b21.axisy;
						e2.gprojection = b21.posx * e2.gnormx + b21.posy * e2.gnormy + e2.lprojection;
						e2.tp0 = u1.y * e2.gnormx - u1.x * e2.gnormy;
						e2.tp1 = v2.y * e2.gnormx - v2.x * e2.gnormy;
						u1 = v2;
						cx_ite4 = cx_ite4.next;
					}
					var v3 = p3.gverts.next;
					var e3 = ite1.elt;
					ite1 = ite1.next;
					e3.gnormx = b21.axisy * e3.lnormx - b21.axisx * e3.lnormy;
					e3.gnormy = e3.lnormx * b21.axisx + e3.lnormy * b21.axisy;
					e3.gprojection = b21.posx * e3.gnormx + b21.posy * e3.gnormy + e3.lprojection;
					e3.tp0 = u1.y * e3.gnormx - u1.x * e3.gnormy;
					e3.tp1 = v3.y * e3.gnormx - v3.x * e3.gnormy;
				}
			}
			var wasnull = minTOI.arbiter == null;
			var arb = this.narrowPhase(minTOI.s1,minTOI.s2,true,minTOI.arbiter,true);
			if(arb == null) {
				if(minTOI.arbiter != null && minTOI.arbiter.pair != null) {
					minTOI.arbiter.pair.arb = null;
					minTOI.arbiter.pair = null;
				}
			} else if(!this.presteparb(arb,deltaTime,true)) {
				if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL && (arb.active && (arb.immState & 1) != 0)) {
					var _this = arb.colarb;
					var jx = _this.nx * _this.c1.jnAcc - _this.ny * _this.c1.jtAcc;
					var jy = _this.ny * _this.c1.jnAcc + _this.nx * _this.c1.jtAcc;
					var t2 = _this.b1.imass;
					_this.b1.velx -= jx * t2;
					_this.b1.vely -= jy * t2;
					_this.b1.angvel -= _this.b1.iinertia * (jy * _this.c1.r1x - jx * _this.c1.r1y);
					var t3 = _this.b2.imass;
					_this.b2.velx += jx * t3;
					_this.b2.vely += jy * t3;
					_this.b2.angvel += _this.b2.iinertia * (jy * _this.c1.r2x - jx * _this.c1.r2y);
					if(_this.hc2) {
						var jx1 = _this.nx * _this.c2.jnAcc - _this.ny * _this.c2.jtAcc;
						var jy1 = _this.ny * _this.c2.jnAcc + _this.nx * _this.c2.jtAcc;
						var t4 = _this.b1.imass;
						_this.b1.velx -= jx1 * t4;
						_this.b1.vely -= jy1 * t4;
						_this.b1.angvel -= _this.b1.iinertia * (jy1 * _this.c2.r1x - jx1 * _this.c2.r1y);
						var t5 = _this.b2.imass;
						_this.b2.velx += jx1 * t5;
						_this.b2.vely += jy1 * t5;
						_this.b2.angvel += _this.b2.iinertia * (jy1 * _this.c2.r2x - jx1 * _this.c2.r2y);
					}
					_this.b2.angvel += _this.jrAcc * _this.b2.iinertia;
					_this.b1.angvel -= _this.jrAcc * _this.b1.iinertia;
					var _this1 = arb.colarb;
					var jx2;
					var jy2;
					var j;
					var jMax;
					var jOld;
					var cjAcc;
					var v1x = _this1.k1x + _this1.b2.velx - _this1.c1.r2y * _this1.b2.angvel - (_this1.b1.velx - _this1.c1.r1y * _this1.b1.angvel);
					var v1y = _this1.k1y + _this1.b2.vely + _this1.c1.r2x * _this1.b2.angvel - (_this1.b1.vely + _this1.c1.r1x * _this1.b1.angvel);
					j = (v1y * _this1.nx - v1x * _this1.ny + _this1.surfacex) * _this1.c1.tMass;
					jMax = _this1.c1.friction * _this1.c1.jnAcc;
					jOld = _this1.c1.jtAcc;
					cjAcc = jOld - j;
					if(cjAcc > jMax) {
						cjAcc = jMax;
					} else if(cjAcc < -jMax) {
						cjAcc = -jMax;
					}
					j = cjAcc - jOld;
					_this1.c1.jtAcc = cjAcc;
					jx2 = -_this1.ny * j;
					jy2 = _this1.nx * j;
					_this1.b2.velx += jx2 * _this1.b2.imass;
					_this1.b2.vely += jy2 * _this1.b2.imass;
					_this1.b1.velx -= jx2 * _this1.b1.imass;
					_this1.b1.vely -= jy2 * _this1.b1.imass;
					_this1.b2.angvel += _this1.rt1b * j * _this1.b2.iinertia;
					_this1.b1.angvel -= _this1.rt1a * j * _this1.b1.iinertia;
					if(_this1.hc2) {
						var v2x = _this1.k2x + _this1.b2.velx - _this1.c2.r2y * _this1.b2.angvel - (_this1.b1.velx - _this1.c2.r1y * _this1.b1.angvel);
						var v2y = _this1.k2y + _this1.b2.vely + _this1.c2.r2x * _this1.b2.angvel - (_this1.b1.vely + _this1.c2.r1x * _this1.b1.angvel);
						j = (v2y * _this1.nx - v2x * _this1.ny + _this1.surfacex) * _this1.c2.tMass;
						jMax = _this1.c2.friction * _this1.c2.jnAcc;
						jOld = _this1.c2.jtAcc;
						cjAcc = jOld - j;
						if(cjAcc > jMax) {
							cjAcc = jMax;
						} else if(cjAcc < -jMax) {
							cjAcc = -jMax;
						}
						j = cjAcc - jOld;
						_this1.c2.jtAcc = cjAcc;
						jx2 = -_this1.ny * j;
						jy2 = _this1.nx * j;
						_this1.b2.velx += jx2 * _this1.b2.imass;
						_this1.b2.vely += jy2 * _this1.b2.imass;
						_this1.b1.velx -= jx2 * _this1.b1.imass;
						_this1.b1.vely -= jy2 * _this1.b1.imass;
						_this1.b2.angvel += _this1.rt2b * j * _this1.b2.iinertia;
						_this1.b1.angvel -= _this1.rt2a * j * _this1.b1.iinertia;
						v1x = _this1.k1x + _this1.b2.velx - _this1.c1.r2y * _this1.b2.angvel - (_this1.b1.velx - _this1.c1.r1y * _this1.b1.angvel);
						v1y = _this1.k1y + _this1.b2.vely + _this1.c1.r2x * _this1.b2.angvel - (_this1.b1.vely + _this1.c1.r1x * _this1.b1.angvel);
						v2x = _this1.k2x + _this1.b2.velx - _this1.c2.r2y * _this1.b2.angvel - (_this1.b1.velx - _this1.c2.r1y * _this1.b1.angvel);
						v2y = _this1.k2y + _this1.b2.vely + _this1.c2.r2x * _this1.b2.angvel - (_this1.b1.vely + _this1.c2.r1x * _this1.b1.angvel);
						var ax = _this1.c1.jnAcc;
						var ay = _this1.c2.jnAcc;
						var jnx = v1x * _this1.nx + v1y * _this1.ny + _this1.surfacey + _this1.c1.bounce - (_this1.Ka * ax + _this1.Kb * ay);
						var jny = v2x * _this1.nx + v2y * _this1.ny + _this1.surfacey + _this1.c2.bounce - (_this1.Kb * ax + _this1.Kc * ay);
						var xx = -(_this1.kMassa * jnx + _this1.kMassb * jny);
						var xy = -(_this1.kMassb * jnx + _this1.kMassc * jny);
						if(xx >= 0 && xy >= 0) {
							jnx = xx - ax;
							jny = xy - ay;
							_this1.c1.jnAcc = xx;
							_this1.c2.jnAcc = xy;
						} else {
							xx = -_this1.c1.nMass * jnx;
							if(xx >= 0 && _this1.Kb * xx + jny >= 0) {
								jnx = xx - ax;
								jny = -ay;
								_this1.c1.jnAcc = xx;
								_this1.c2.jnAcc = 0;
							} else {
								xy = -_this1.c2.nMass * jny;
								if(xy >= 0 && _this1.Kb * xy + jnx >= 0) {
									jnx = -ax;
									jny = xy - ay;
									_this1.c1.jnAcc = 0;
									_this1.c2.jnAcc = xy;
								} else if(jnx >= 0 && jny >= 0) {
									jnx = -ax;
									jny = -ay;
									_this1.c1.jnAcc = _this1.c2.jnAcc = 0;
								} else {
									jnx = 0;
									jny = 0;
								}
							}
						}
						j = jnx + jny;
						jx2 = _this1.nx * j;
						jy2 = _this1.ny * j;
						_this1.b2.velx += jx2 * _this1.b2.imass;
						_this1.b2.vely += jy2 * _this1.b2.imass;
						_this1.b1.velx -= jx2 * _this1.b1.imass;
						_this1.b1.vely -= jy2 * _this1.b1.imass;
						_this1.b2.angvel += (_this1.rn1b * jnx + _this1.rn2b * jny) * _this1.b2.iinertia;
						_this1.b1.angvel -= (_this1.rn1a * jnx + _this1.rn2a * jny) * _this1.b1.iinertia;
					} else {
						if(_this1.radius != 0.0) {
							var dw = _this1.b2.angvel - _this1.b1.angvel;
							j = dw * _this1.rMass;
							jMax = _this1.rfric * _this1.c1.jnAcc;
							jOld = _this1.jrAcc;
							_this1.jrAcc -= j;
							if(_this1.jrAcc > jMax) {
								_this1.jrAcc = jMax;
							} else if(_this1.jrAcc < -jMax) {
								_this1.jrAcc = -jMax;
							}
							j = _this1.jrAcc - jOld;
							_this1.b2.angvel += j * _this1.b2.iinertia;
							_this1.b1.angvel -= j * _this1.b1.iinertia;
						}
						v1x = _this1.k1x + _this1.b2.velx - _this1.c1.r2y * _this1.b2.angvel - (_this1.b1.velx - _this1.c1.r1y * _this1.b1.angvel);
						v1y = _this1.k1y + _this1.b2.vely + _this1.c1.r2x * _this1.b2.angvel - (_this1.b1.vely + _this1.c1.r1x * _this1.b1.angvel);
						j = (_this1.c1.bounce + (_this1.nx * v1x + _this1.ny * v1y) + _this1.surfacey) * _this1.c1.nMass;
						jOld = _this1.c1.jnAcc;
						cjAcc = jOld - j;
						if(cjAcc < 0.0) {
							cjAcc = 0.0;
						}
						j = cjAcc - jOld;
						_this1.c1.jnAcc = cjAcc;
						jx2 = _this1.nx * j;
						jy2 = _this1.ny * j;
						_this1.b2.velx += jx2 * _this1.b2.imass;
						_this1.b2.vely += jy2 * _this1.b2.imass;
						_this1.b1.velx -= jx2 * _this1.b1.imass;
						_this1.b1.vely -= jy2 * _this1.b1.imass;
						_this1.b2.angvel += _this1.rn1b * j * _this1.b2.iinertia;
						_this1.b1.angvel -= _this1.rn1a * j * _this1.b1.iinertia;
					}
					var _this2 = arb.colarb;
					var jx3;
					var jy3;
					var j1;
					var jMax1;
					var jOld1;
					var cjAcc1;
					var v1x1 = _this2.k1x + _this2.b2.velx - _this2.c1.r2y * _this2.b2.angvel - (_this2.b1.velx - _this2.c1.r1y * _this2.b1.angvel);
					var v1y1 = _this2.k1y + _this2.b2.vely + _this2.c1.r2x * _this2.b2.angvel - (_this2.b1.vely + _this2.c1.r1x * _this2.b1.angvel);
					j1 = (v1y1 * _this2.nx - v1x1 * _this2.ny + _this2.surfacex) * _this2.c1.tMass;
					jMax1 = _this2.c1.friction * _this2.c1.jnAcc;
					jOld1 = _this2.c1.jtAcc;
					cjAcc1 = jOld1 - j1;
					if(cjAcc1 > jMax1) {
						cjAcc1 = jMax1;
					} else if(cjAcc1 < -jMax1) {
						cjAcc1 = -jMax1;
					}
					j1 = cjAcc1 - jOld1;
					_this2.c1.jtAcc = cjAcc1;
					jx3 = -_this2.ny * j1;
					jy3 = _this2.nx * j1;
					_this2.b2.velx += jx3 * _this2.b2.imass;
					_this2.b2.vely += jy3 * _this2.b2.imass;
					_this2.b1.velx -= jx3 * _this2.b1.imass;
					_this2.b1.vely -= jy3 * _this2.b1.imass;
					_this2.b2.angvel += _this2.rt1b * j1 * _this2.b2.iinertia;
					_this2.b1.angvel -= _this2.rt1a * j1 * _this2.b1.iinertia;
					if(_this2.hc2) {
						var v2x1 = _this2.k2x + _this2.b2.velx - _this2.c2.r2y * _this2.b2.angvel - (_this2.b1.velx - _this2.c2.r1y * _this2.b1.angvel);
						var v2y1 = _this2.k2y + _this2.b2.vely + _this2.c2.r2x * _this2.b2.angvel - (_this2.b1.vely + _this2.c2.r1x * _this2.b1.angvel);
						j1 = (v2y1 * _this2.nx - v2x1 * _this2.ny + _this2.surfacex) * _this2.c2.tMass;
						jMax1 = _this2.c2.friction * _this2.c2.jnAcc;
						jOld1 = _this2.c2.jtAcc;
						cjAcc1 = jOld1 - j1;
						if(cjAcc1 > jMax1) {
							cjAcc1 = jMax1;
						} else if(cjAcc1 < -jMax1) {
							cjAcc1 = -jMax1;
						}
						j1 = cjAcc1 - jOld1;
						_this2.c2.jtAcc = cjAcc1;
						jx3 = -_this2.ny * j1;
						jy3 = _this2.nx * j1;
						_this2.b2.velx += jx3 * _this2.b2.imass;
						_this2.b2.vely += jy3 * _this2.b2.imass;
						_this2.b1.velx -= jx3 * _this2.b1.imass;
						_this2.b1.vely -= jy3 * _this2.b1.imass;
						_this2.b2.angvel += _this2.rt2b * j1 * _this2.b2.iinertia;
						_this2.b1.angvel -= _this2.rt2a * j1 * _this2.b1.iinertia;
						v1x1 = _this2.k1x + _this2.b2.velx - _this2.c1.r2y * _this2.b2.angvel - (_this2.b1.velx - _this2.c1.r1y * _this2.b1.angvel);
						v1y1 = _this2.k1y + _this2.b2.vely + _this2.c1.r2x * _this2.b2.angvel - (_this2.b1.vely + _this2.c1.r1x * _this2.b1.angvel);
						v2x1 = _this2.k2x + _this2.b2.velx - _this2.c2.r2y * _this2.b2.angvel - (_this2.b1.velx - _this2.c2.r1y * _this2.b1.angvel);
						v2y1 = _this2.k2y + _this2.b2.vely + _this2.c2.r2x * _this2.b2.angvel - (_this2.b1.vely + _this2.c2.r1x * _this2.b1.angvel);
						var ax1 = _this2.c1.jnAcc;
						var ay1 = _this2.c2.jnAcc;
						var jnx1 = v1x1 * _this2.nx + v1y1 * _this2.ny + _this2.surfacey + _this2.c1.bounce - (_this2.Ka * ax1 + _this2.Kb * ay1);
						var jny1 = v2x1 * _this2.nx + v2y1 * _this2.ny + _this2.surfacey + _this2.c2.bounce - (_this2.Kb * ax1 + _this2.Kc * ay1);
						var xx1 = -(_this2.kMassa * jnx1 + _this2.kMassb * jny1);
						var xy1 = -(_this2.kMassb * jnx1 + _this2.kMassc * jny1);
						if(xx1 >= 0 && xy1 >= 0) {
							jnx1 = xx1 - ax1;
							jny1 = xy1 - ay1;
							_this2.c1.jnAcc = xx1;
							_this2.c2.jnAcc = xy1;
						} else {
							xx1 = -_this2.c1.nMass * jnx1;
							if(xx1 >= 0 && _this2.Kb * xx1 + jny1 >= 0) {
								jnx1 = xx1 - ax1;
								jny1 = -ay1;
								_this2.c1.jnAcc = xx1;
								_this2.c2.jnAcc = 0;
							} else {
								xy1 = -_this2.c2.nMass * jny1;
								if(xy1 >= 0 && _this2.Kb * xy1 + jnx1 >= 0) {
									jnx1 = -ax1;
									jny1 = xy1 - ay1;
									_this2.c1.jnAcc = 0;
									_this2.c2.jnAcc = xy1;
								} else if(jnx1 >= 0 && jny1 >= 0) {
									jnx1 = -ax1;
									jny1 = -ay1;
									_this2.c1.jnAcc = _this2.c2.jnAcc = 0;
								} else {
									jnx1 = 0;
									jny1 = 0;
								}
							}
						}
						j1 = jnx1 + jny1;
						jx3 = _this2.nx * j1;
						jy3 = _this2.ny * j1;
						_this2.b2.velx += jx3 * _this2.b2.imass;
						_this2.b2.vely += jy3 * _this2.b2.imass;
						_this2.b1.velx -= jx3 * _this2.b1.imass;
						_this2.b1.vely -= jy3 * _this2.b1.imass;
						_this2.b2.angvel += (_this2.rn1b * jnx1 + _this2.rn2b * jny1) * _this2.b2.iinertia;
						_this2.b1.angvel -= (_this2.rn1a * jnx1 + _this2.rn2a * jny1) * _this2.b1.iinertia;
					} else {
						if(_this2.radius != 0.0) {
							var dw1 = _this2.b2.angvel - _this2.b1.angvel;
							j1 = dw1 * _this2.rMass;
							jMax1 = _this2.rfric * _this2.c1.jnAcc;
							jOld1 = _this2.jrAcc;
							_this2.jrAcc -= j1;
							if(_this2.jrAcc > jMax1) {
								_this2.jrAcc = jMax1;
							} else if(_this2.jrAcc < -jMax1) {
								_this2.jrAcc = -jMax1;
							}
							j1 = _this2.jrAcc - jOld1;
							_this2.b2.angvel += j1 * _this2.b2.iinertia;
							_this2.b1.angvel -= j1 * _this2.b1.iinertia;
						}
						v1x1 = _this2.k1x + _this2.b2.velx - _this2.c1.r2y * _this2.b2.angvel - (_this2.b1.velx - _this2.c1.r1y * _this2.b1.angvel);
						v1y1 = _this2.k1y + _this2.b2.vely + _this2.c1.r2x * _this2.b2.angvel - (_this2.b1.vely + _this2.c1.r1x * _this2.b1.angvel);
						j1 = (_this2.c1.bounce + (_this2.nx * v1x1 + _this2.ny * v1y1) + _this2.surfacey) * _this2.c1.nMass;
						jOld1 = _this2.c1.jnAcc;
						cjAcc1 = jOld1 - j1;
						if(cjAcc1 < 0.0) {
							cjAcc1 = 0.0;
						}
						j1 = cjAcc1 - jOld1;
						_this2.c1.jnAcc = cjAcc1;
						jx3 = _this2.nx * j1;
						jy3 = _this2.ny * j1;
						_this2.b2.velx += jx3 * _this2.b2.imass;
						_this2.b2.vely += jy3 * _this2.b2.imass;
						_this2.b1.velx -= jx3 * _this2.b1.imass;
						_this2.b1.vely -= jy3 * _this2.b1.imass;
						_this2.b2.angvel += _this2.rn1b * j1 * _this2.b2.iinertia;
						_this2.b1.angvel -= _this2.rn1a * j1 * _this2.b1.iinertia;
					}
					var _this3 = arb.colarb;
					var jx4;
					var jy4;
					var j2;
					var jMax2;
					var jOld2;
					var cjAcc2;
					var v1x2 = _this3.k1x + _this3.b2.velx - _this3.c1.r2y * _this3.b2.angvel - (_this3.b1.velx - _this3.c1.r1y * _this3.b1.angvel);
					var v1y2 = _this3.k1y + _this3.b2.vely + _this3.c1.r2x * _this3.b2.angvel - (_this3.b1.vely + _this3.c1.r1x * _this3.b1.angvel);
					j2 = (v1y2 * _this3.nx - v1x2 * _this3.ny + _this3.surfacex) * _this3.c1.tMass;
					jMax2 = _this3.c1.friction * _this3.c1.jnAcc;
					jOld2 = _this3.c1.jtAcc;
					cjAcc2 = jOld2 - j2;
					if(cjAcc2 > jMax2) {
						cjAcc2 = jMax2;
					} else if(cjAcc2 < -jMax2) {
						cjAcc2 = -jMax2;
					}
					j2 = cjAcc2 - jOld2;
					_this3.c1.jtAcc = cjAcc2;
					jx4 = -_this3.ny * j2;
					jy4 = _this3.nx * j2;
					_this3.b2.velx += jx4 * _this3.b2.imass;
					_this3.b2.vely += jy4 * _this3.b2.imass;
					_this3.b1.velx -= jx4 * _this3.b1.imass;
					_this3.b1.vely -= jy4 * _this3.b1.imass;
					_this3.b2.angvel += _this3.rt1b * j2 * _this3.b2.iinertia;
					_this3.b1.angvel -= _this3.rt1a * j2 * _this3.b1.iinertia;
					if(_this3.hc2) {
						var v2x2 = _this3.k2x + _this3.b2.velx - _this3.c2.r2y * _this3.b2.angvel - (_this3.b1.velx - _this3.c2.r1y * _this3.b1.angvel);
						var v2y2 = _this3.k2y + _this3.b2.vely + _this3.c2.r2x * _this3.b2.angvel - (_this3.b1.vely + _this3.c2.r1x * _this3.b1.angvel);
						j2 = (v2y2 * _this3.nx - v2x2 * _this3.ny + _this3.surfacex) * _this3.c2.tMass;
						jMax2 = _this3.c2.friction * _this3.c2.jnAcc;
						jOld2 = _this3.c2.jtAcc;
						cjAcc2 = jOld2 - j2;
						if(cjAcc2 > jMax2) {
							cjAcc2 = jMax2;
						} else if(cjAcc2 < -jMax2) {
							cjAcc2 = -jMax2;
						}
						j2 = cjAcc2 - jOld2;
						_this3.c2.jtAcc = cjAcc2;
						jx4 = -_this3.ny * j2;
						jy4 = _this3.nx * j2;
						_this3.b2.velx += jx4 * _this3.b2.imass;
						_this3.b2.vely += jy4 * _this3.b2.imass;
						_this3.b1.velx -= jx4 * _this3.b1.imass;
						_this3.b1.vely -= jy4 * _this3.b1.imass;
						_this3.b2.angvel += _this3.rt2b * j2 * _this3.b2.iinertia;
						_this3.b1.angvel -= _this3.rt2a * j2 * _this3.b1.iinertia;
						v1x2 = _this3.k1x + _this3.b2.velx - _this3.c1.r2y * _this3.b2.angvel - (_this3.b1.velx - _this3.c1.r1y * _this3.b1.angvel);
						v1y2 = _this3.k1y + _this3.b2.vely + _this3.c1.r2x * _this3.b2.angvel - (_this3.b1.vely + _this3.c1.r1x * _this3.b1.angvel);
						v2x2 = _this3.k2x + _this3.b2.velx - _this3.c2.r2y * _this3.b2.angvel - (_this3.b1.velx - _this3.c2.r1y * _this3.b1.angvel);
						v2y2 = _this3.k2y + _this3.b2.vely + _this3.c2.r2x * _this3.b2.angvel - (_this3.b1.vely + _this3.c2.r1x * _this3.b1.angvel);
						var ax2 = _this3.c1.jnAcc;
						var ay2 = _this3.c2.jnAcc;
						var jnx2 = v1x2 * _this3.nx + v1y2 * _this3.ny + _this3.surfacey + _this3.c1.bounce - (_this3.Ka * ax2 + _this3.Kb * ay2);
						var jny2 = v2x2 * _this3.nx + v2y2 * _this3.ny + _this3.surfacey + _this3.c2.bounce - (_this3.Kb * ax2 + _this3.Kc * ay2);
						var xx2 = -(_this3.kMassa * jnx2 + _this3.kMassb * jny2);
						var xy2 = -(_this3.kMassb * jnx2 + _this3.kMassc * jny2);
						if(xx2 >= 0 && xy2 >= 0) {
							jnx2 = xx2 - ax2;
							jny2 = xy2 - ay2;
							_this3.c1.jnAcc = xx2;
							_this3.c2.jnAcc = xy2;
						} else {
							xx2 = -_this3.c1.nMass * jnx2;
							if(xx2 >= 0 && _this3.Kb * xx2 + jny2 >= 0) {
								jnx2 = xx2 - ax2;
								jny2 = -ay2;
								_this3.c1.jnAcc = xx2;
								_this3.c2.jnAcc = 0;
							} else {
								xy2 = -_this3.c2.nMass * jny2;
								if(xy2 >= 0 && _this3.Kb * xy2 + jnx2 >= 0) {
									jnx2 = -ax2;
									jny2 = xy2 - ay2;
									_this3.c1.jnAcc = 0;
									_this3.c2.jnAcc = xy2;
								} else if(jnx2 >= 0 && jny2 >= 0) {
									jnx2 = -ax2;
									jny2 = -ay2;
									_this3.c1.jnAcc = _this3.c2.jnAcc = 0;
								} else {
									jnx2 = 0;
									jny2 = 0;
								}
							}
						}
						j2 = jnx2 + jny2;
						jx4 = _this3.nx * j2;
						jy4 = _this3.ny * j2;
						_this3.b2.velx += jx4 * _this3.b2.imass;
						_this3.b2.vely += jy4 * _this3.b2.imass;
						_this3.b1.velx -= jx4 * _this3.b1.imass;
						_this3.b1.vely -= jy4 * _this3.b1.imass;
						_this3.b2.angvel += (_this3.rn1b * jnx2 + _this3.rn2b * jny2) * _this3.b2.iinertia;
						_this3.b1.angvel -= (_this3.rn1a * jnx2 + _this3.rn2a * jny2) * _this3.b1.iinertia;
					} else {
						if(_this3.radius != 0.0) {
							var dw2 = _this3.b2.angvel - _this3.b1.angvel;
							j2 = dw2 * _this3.rMass;
							jMax2 = _this3.rfric * _this3.c1.jnAcc;
							jOld2 = _this3.jrAcc;
							_this3.jrAcc -= j2;
							if(_this3.jrAcc > jMax2) {
								_this3.jrAcc = jMax2;
							} else if(_this3.jrAcc < -jMax2) {
								_this3.jrAcc = -jMax2;
							}
							j2 = _this3.jrAcc - jOld2;
							_this3.b2.angvel += j2 * _this3.b2.iinertia;
							_this3.b1.angvel -= j2 * _this3.b1.iinertia;
						}
						v1x2 = _this3.k1x + _this3.b2.velx - _this3.c1.r2y * _this3.b2.angvel - (_this3.b1.velx - _this3.c1.r1y * _this3.b1.angvel);
						v1y2 = _this3.k1y + _this3.b2.vely + _this3.c1.r2x * _this3.b2.angvel - (_this3.b1.vely + _this3.c1.r1x * _this3.b1.angvel);
						j2 = (_this3.c1.bounce + (_this3.nx * v1x2 + _this3.ny * v1y2) + _this3.surfacey) * _this3.c1.nMass;
						jOld2 = _this3.c1.jnAcc;
						cjAcc2 = jOld2 - j2;
						if(cjAcc2 < 0.0) {
							cjAcc2 = 0.0;
						}
						j2 = cjAcc2 - jOld2;
						_this3.c1.jnAcc = cjAcc2;
						jx4 = _this3.nx * j2;
						jy4 = _this3.ny * j2;
						_this3.b2.velx += jx4 * _this3.b2.imass;
						_this3.b2.vely += jy4 * _this3.b2.imass;
						_this3.b1.velx -= jx4 * _this3.b1.imass;
						_this3.b1.vely -= jy4 * _this3.b1.imass;
						_this3.b2.angvel += _this3.rn1b * j2 * _this3.b2.iinertia;
						_this3.b1.angvel -= _this3.rn1a * j2 * _this3.b1.iinertia;
					}
					var _this4 = arb.colarb;
					var jx5;
					var jy5;
					var j3;
					var jMax3;
					var jOld3;
					var cjAcc3;
					var v1x3 = _this4.k1x + _this4.b2.velx - _this4.c1.r2y * _this4.b2.angvel - (_this4.b1.velx - _this4.c1.r1y * _this4.b1.angvel);
					var v1y3 = _this4.k1y + _this4.b2.vely + _this4.c1.r2x * _this4.b2.angvel - (_this4.b1.vely + _this4.c1.r1x * _this4.b1.angvel);
					j3 = (v1y3 * _this4.nx - v1x3 * _this4.ny + _this4.surfacex) * _this4.c1.tMass;
					jMax3 = _this4.c1.friction * _this4.c1.jnAcc;
					jOld3 = _this4.c1.jtAcc;
					cjAcc3 = jOld3 - j3;
					if(cjAcc3 > jMax3) {
						cjAcc3 = jMax3;
					} else if(cjAcc3 < -jMax3) {
						cjAcc3 = -jMax3;
					}
					j3 = cjAcc3 - jOld3;
					_this4.c1.jtAcc = cjAcc3;
					jx5 = -_this4.ny * j3;
					jy5 = _this4.nx * j3;
					_this4.b2.velx += jx5 * _this4.b2.imass;
					_this4.b2.vely += jy5 * _this4.b2.imass;
					_this4.b1.velx -= jx5 * _this4.b1.imass;
					_this4.b1.vely -= jy5 * _this4.b1.imass;
					_this4.b2.angvel += _this4.rt1b * j3 * _this4.b2.iinertia;
					_this4.b1.angvel -= _this4.rt1a * j3 * _this4.b1.iinertia;
					if(_this4.hc2) {
						var v2x3 = _this4.k2x + _this4.b2.velx - _this4.c2.r2y * _this4.b2.angvel - (_this4.b1.velx - _this4.c2.r1y * _this4.b1.angvel);
						var v2y3 = _this4.k2y + _this4.b2.vely + _this4.c2.r2x * _this4.b2.angvel - (_this4.b1.vely + _this4.c2.r1x * _this4.b1.angvel);
						j3 = (v2y3 * _this4.nx - v2x3 * _this4.ny + _this4.surfacex) * _this4.c2.tMass;
						jMax3 = _this4.c2.friction * _this4.c2.jnAcc;
						jOld3 = _this4.c2.jtAcc;
						cjAcc3 = jOld3 - j3;
						if(cjAcc3 > jMax3) {
							cjAcc3 = jMax3;
						} else if(cjAcc3 < -jMax3) {
							cjAcc3 = -jMax3;
						}
						j3 = cjAcc3 - jOld3;
						_this4.c2.jtAcc = cjAcc3;
						jx5 = -_this4.ny * j3;
						jy5 = _this4.nx * j3;
						_this4.b2.velx += jx5 * _this4.b2.imass;
						_this4.b2.vely += jy5 * _this4.b2.imass;
						_this4.b1.velx -= jx5 * _this4.b1.imass;
						_this4.b1.vely -= jy5 * _this4.b1.imass;
						_this4.b2.angvel += _this4.rt2b * j3 * _this4.b2.iinertia;
						_this4.b1.angvel -= _this4.rt2a * j3 * _this4.b1.iinertia;
						v1x3 = _this4.k1x + _this4.b2.velx - _this4.c1.r2y * _this4.b2.angvel - (_this4.b1.velx - _this4.c1.r1y * _this4.b1.angvel);
						v1y3 = _this4.k1y + _this4.b2.vely + _this4.c1.r2x * _this4.b2.angvel - (_this4.b1.vely + _this4.c1.r1x * _this4.b1.angvel);
						v2x3 = _this4.k2x + _this4.b2.velx - _this4.c2.r2y * _this4.b2.angvel - (_this4.b1.velx - _this4.c2.r1y * _this4.b1.angvel);
						v2y3 = _this4.k2y + _this4.b2.vely + _this4.c2.r2x * _this4.b2.angvel - (_this4.b1.vely + _this4.c2.r1x * _this4.b1.angvel);
						var ax3 = _this4.c1.jnAcc;
						var ay3 = _this4.c2.jnAcc;
						var jnx3 = v1x3 * _this4.nx + v1y3 * _this4.ny + _this4.surfacey + _this4.c1.bounce - (_this4.Ka * ax3 + _this4.Kb * ay3);
						var jny3 = v2x3 * _this4.nx + v2y3 * _this4.ny + _this4.surfacey + _this4.c2.bounce - (_this4.Kb * ax3 + _this4.Kc * ay3);
						var xx3 = -(_this4.kMassa * jnx3 + _this4.kMassb * jny3);
						var xy3 = -(_this4.kMassb * jnx3 + _this4.kMassc * jny3);
						if(xx3 >= 0 && xy3 >= 0) {
							jnx3 = xx3 - ax3;
							jny3 = xy3 - ay3;
							_this4.c1.jnAcc = xx3;
							_this4.c2.jnAcc = xy3;
						} else {
							xx3 = -_this4.c1.nMass * jnx3;
							if(xx3 >= 0 && _this4.Kb * xx3 + jny3 >= 0) {
								jnx3 = xx3 - ax3;
								jny3 = -ay3;
								_this4.c1.jnAcc = xx3;
								_this4.c2.jnAcc = 0;
							} else {
								xy3 = -_this4.c2.nMass * jny3;
								if(xy3 >= 0 && _this4.Kb * xy3 + jnx3 >= 0) {
									jnx3 = -ax3;
									jny3 = xy3 - ay3;
									_this4.c1.jnAcc = 0;
									_this4.c2.jnAcc = xy3;
								} else if(jnx3 >= 0 && jny3 >= 0) {
									jnx3 = -ax3;
									jny3 = -ay3;
									_this4.c1.jnAcc = _this4.c2.jnAcc = 0;
								} else {
									jnx3 = 0;
									jny3 = 0;
								}
							}
						}
						j3 = jnx3 + jny3;
						jx5 = _this4.nx * j3;
						jy5 = _this4.ny * j3;
						_this4.b2.velx += jx5 * _this4.b2.imass;
						_this4.b2.vely += jy5 * _this4.b2.imass;
						_this4.b1.velx -= jx5 * _this4.b1.imass;
						_this4.b1.vely -= jy5 * _this4.b1.imass;
						_this4.b2.angvel += (_this4.rn1b * jnx3 + _this4.rn2b * jny3) * _this4.b2.iinertia;
						_this4.b1.angvel -= (_this4.rn1a * jnx3 + _this4.rn2a * jny3) * _this4.b1.iinertia;
					} else {
						if(_this4.radius != 0.0) {
							var dw3 = _this4.b2.angvel - _this4.b1.angvel;
							j3 = dw3 * _this4.rMass;
							jMax3 = _this4.rfric * _this4.c1.jnAcc;
							jOld3 = _this4.jrAcc;
							_this4.jrAcc -= j3;
							if(_this4.jrAcc > jMax3) {
								_this4.jrAcc = jMax3;
							} else if(_this4.jrAcc < -jMax3) {
								_this4.jrAcc = -jMax3;
							}
							j3 = _this4.jrAcc - jOld3;
							_this4.b2.angvel += j3 * _this4.b2.iinertia;
							_this4.b1.angvel -= j3 * _this4.b1.iinertia;
						}
						v1x3 = _this4.k1x + _this4.b2.velx - _this4.c1.r2y * _this4.b2.angvel - (_this4.b1.velx - _this4.c1.r1y * _this4.b1.angvel);
						v1y3 = _this4.k1y + _this4.b2.vely + _this4.c1.r2x * _this4.b2.angvel - (_this4.b1.vely + _this4.c1.r1x * _this4.b1.angvel);
						j3 = (_this4.c1.bounce + (_this4.nx * v1x3 + _this4.ny * v1y3) + _this4.surfacey) * _this4.c1.nMass;
						jOld3 = _this4.c1.jnAcc;
						cjAcc3 = jOld3 - j3;
						if(cjAcc3 < 0.0) {
							cjAcc3 = 0.0;
						}
						j3 = cjAcc3 - jOld3;
						_this4.c1.jnAcc = cjAcc3;
						jx5 = _this4.nx * j3;
						jy5 = _this4.ny * j3;
						_this4.b2.velx += jx5 * _this4.b2.imass;
						_this4.b2.vely += jy5 * _this4.b2.imass;
						_this4.b1.velx -= jx5 * _this4.b1.imass;
						_this4.b1.vely -= jy5 * _this4.b1.imass;
						_this4.b2.angvel += _this4.rn1b * j3 * _this4.b2.iinertia;
						_this4.b1.angvel -= _this4.rn1a * j3 * _this4.b1.iinertia;
					}
					b11.sweep_angvel = b11.angvel % MAX_VEL;
					b21.sweep_angvel = b21.angvel % MAX_VEL;
				}
			}
			if(arb != null && (arb.active && (arb.immState & 1) != 0) && arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL) {
				if(!b11.sweepFrozen && b11.type != 3) {
					b11.sweepFrozen = true;
					if(minTOI.failed) {
						b11.angvel = b11.sweep_angvel = 0;
					} else if(minTOI.slipped) {
						var b12 = b11;
						b12.sweep_angvel *= nape_Config.angularCCDSlipScale;
						b11.angvel = b12.sweep_angvel;
					} else {
						b11.angvel = b11.sweep_angvel;
					}
				}
				if(!b21.sweepFrozen && b21.type != 3) {
					b21.sweepFrozen = true;
					if(minTOI.failed) {
						b21.angvel = b21.sweep_angvel = 0;
					} else if(minTOI.slipped) {
						var b22 = b21;
						b22.sweep_angvel *= nape_Config.angularCCDSlipScale;
						b21.angvel = b22.sweep_angvel;
					} else {
						b21.angvel = b21.sweep_angvel;
					}
				}
			}
			var o3 = minTOI;
			o3.next = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
			zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = o3;
		}
		while(this.toiEvents.head != null) {
			var toi1 = this.toiEvents.pop_unsafe();
			var o4 = toi1;
			o4.next = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
			zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = o4;
		}
		var cx_ite5 = this.kinematics.head;
		while(cx_ite5 != null) {
			var cur = cx_ite5.elt;
			var delta2 = deltaTime - cur.sweepTime;
			if(delta2 != 0) {
				cur.sweepTime = deltaTime;
				var t6 = delta2;
				cur.posx += cur.velx * t6;
				cur.posy += cur.vely * t6;
				if(cur.angvel != 0) {
					var dr2 = cur.sweep_angvel * delta2;
					cur.rot += dr2;
					if(dr2 * dr2 > 0.0001) {
						cur.axisx = Math.sin(cur.rot);
						cur.axisy = Math.cos(cur.rot);
					} else {
						var d22 = dr2 * dr2;
						var p4 = 1 - 0.5 * d22;
						var m2 = 1 - d22 * d22 / 8;
						var nx2 = (p4 * cur.axisx + dr2 * cur.axisy) * m2;
						cur.axisy = (p4 * cur.axisy - dr2 * cur.axisx) * m2;
						cur.axisx = nx2;
					}
				}
			}
			cur.sweepTime = 0;
			cx_ite5 = cx_ite5.next;
		}
		var cx_ite6 = this.live.head;
		while(cx_ite6 != null) {
			var cur1 = cx_ite6.elt;
			if(!cur1.sweepFrozen) {
				var delta3 = deltaTime - cur1.sweepTime;
				if(delta3 != 0) {
					cur1.sweepTime = deltaTime;
					var t7 = delta3;
					cur1.posx += cur1.velx * t7;
					cur1.posy += cur1.vely * t7;
					if(cur1.angvel != 0) {
						var dr3 = cur1.sweep_angvel * delta3;
						cur1.rot += dr3;
						if(dr3 * dr3 > 0.0001) {
							cur1.axisx = Math.sin(cur1.rot);
							cur1.axisy = Math.cos(cur1.rot);
						} else {
							var d23 = dr3 * dr3;
							var p5 = 1 - 0.5 * d23;
							var m3 = 1 - d23 * d23 / 8;
							var nx3 = (p5 * cur1.axisx + dr3 * cur1.axisy) * m3;
							cur1.axisy = (p5 * cur1.axisy - dr3 * cur1.axisx) * m3;
							cur1.axisx = nx3;
						}
					}
				}
			}
			cur1.sweepTime = 0;
			cx_ite6 = cx_ite6.next;
		}
	}
	,continuousEvent: function(s1,s2,stat,in_arb,_) {
		if(s1.body.sweepFrozen && s2.body.sweepFrozen) {
			return in_arb;
		}
		if(s1.body.disableCCD || s2.body.disableCCD) {
			return in_arb;
		}
		var tmp;
		if(!(in_arb != null && in_arb.colarb == null)) {
			var b1 = s1.body;
			var b2 = s2.body;
			var con_ignore;
			con_ignore = false;
			var cx_ite = b1.constraints.head;
			while(cx_ite != null) {
				var con = cx_ite.elt;
				if(con.ignore && con.pair_exists(b1.id,b2.id)) {
					con_ignore = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
			var tmp1;
			var tmp2;
			if(!con_ignore) {
				var cur = s1;
				while(cur != null && cur.group == null) if(cur.ishape != null) {
					cur = cur.ishape.body;
				} else if(cur.icompound != null) {
					cur = cur.icompound.compound;
				} else {
					cur = cur.ibody.compound;
				}
				var g1 = cur == null ? null : cur.group;
				var tmp3;
				if(g1 == null) {
					tmp3 = false;
				} else {
					var cur1 = s2;
					while(cur1 != null && cur1.group == null) if(cur1.ishape != null) {
						cur1 = cur1.ishape.body;
					} else if(cur1.icompound != null) {
						cur1 = cur1.icompound.compound;
					} else {
						cur1 = cur1.ibody.compound;
					}
					var g2 = cur1 == null ? null : cur1.group;
					if(g2 == null) {
						tmp3 = false;
					} else {
						var ret = false;
						while(g1 != null && g2 != null) {
							if(g1 == g2) {
								ret = g1.ignore;
								break;
							}
							if(g1.depth < g2.depth) {
								g2 = g2.group;
							} else {
								g1 = g1.group;
							}
						}
						tmp3 = ret;
					}
				}
				tmp2 = !tmp3;
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				var tmp4;
				if(s1.sensorEnabled || s2.sensorEnabled) {
					var _this = s1.filter;
					var x = s2.filter;
					if((_this.sensorMask & x.sensorGroup) != 0) {
						tmp4 = (x.sensorMask & _this.sensorGroup) != 0;
					} else {
						tmp4 = false;
					}
				} else {
					tmp4 = false;
				}
				if(tmp4) {
					tmp1 = 2;
				} else {
					var tmp5;
					var tmp6;
					if(s1.fluidEnabled || s2.fluidEnabled) {
						var _this1 = s1.filter;
						var x1 = s2.filter;
						if((_this1.fluidMask & x1.fluidGroup) != 0) {
							tmp6 = (x1.fluidMask & _this1.fluidGroup) != 0;
						} else {
							tmp6 = false;
						}
					} else {
						tmp6 = false;
					}
					if(tmp6) {
						tmp5 = !(b1.imass == 0 && b2.imass == 0 && b1.iinertia == 0 && b2.iinertia == 0);
					} else {
						tmp5 = false;
					}
					if(tmp5) {
						tmp1 = 0;
					} else {
						var tmp7;
						var _this2 = s1.filter;
						var x2 = s2.filter;
						if((_this2.collisionMask & x2.collisionGroup) != 0 && (x2.collisionMask & _this2.collisionGroup) != 0) {
							tmp7 = !(b1.imass == 0 && b2.imass == 0 && b1.iinertia == 0 && b2.iinertia == 0);
						} else {
							tmp7 = false;
						}
						if(tmp7) {
							tmp1 = 1;
						} else {
							tmp1 = -1;
						}
					}
				}
			} else {
				tmp1 = -1;
			}
			tmp = tmp1 <= 0;
		} else {
			tmp = true;
		}
		if(tmp) {
			return in_arb;
		}
		var b11 = s1.body;
		var b21 = s2.body;
		if(stat || b11.bullet || b21.bullet) {
			var toi;
			if(zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool == null) {
				toi = new zpp_$nape_geom_ZPP_$ToiEvent();
			} else {
				toi = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
				zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = toi.next;
				toi.next = null;
			}
			toi.failed = false;
			toi.s1 = toi.s2 = null;
			toi.arbiter = null;
			var kin = b11.type == 3 || b21.type == 3;
			if(stat && !kin) {
				if(s1.body.type != 2) {
					toi.s2 = s1;
					toi.s1 = s2;
				} else {
					toi.s1 = s1;
					toi.s2 = s2;
				}
				toi.kinematic = false;
				zpp_$nape_geom_ZPP_$SweepDistance.staticSweep(toi,this.pre_dt,0,nape_Config.collisionSlopCCD);
			} else {
				toi.s1 = s1;
				toi.s2 = s2;
				toi.kinematic = kin;
				if(toi.s1.body.sweepFrozen || toi.s2.body.sweepFrozen) {
					if(toi.s1.body.sweepFrozen) {
						var tmp8 = toi.s1;
						toi.s1 = toi.s2;
						toi.s2 = tmp8;
						toi.frozen1 = false;
						toi.frozen2 = true;
					}
					zpp_$nape_geom_ZPP_$SweepDistance.staticSweep(toi,this.pre_dt,0,nape_Config.collisionSlopCCD);
				} else {
					zpp_$nape_geom_ZPP_$SweepDistance.dynamicSweep(toi,this.pre_dt,0,nape_Config.collisionSlopCCD);
				}
			}
			if(stat && toi.toi < 0 || toi.failed) {
				var o = toi;
				o.next = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
				zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = o;
			} else {
				this.toiEvents.add(toi);
				toi.frozen1 = toi.s1.body.sweepFrozen;
				toi.frozen2 = toi.s2.body.sweepFrozen;
				toi.arbiter = in_arb != null ? in_arb.colarb : null;
			}
		}
		return in_arb;
	}
	,bodyCbWake: function(b) {
		if(b.type == 2 && b.cbSet != null) {
			if(this.midstep) {
				var cx_ite = b.cbSet.bodylisteners.head;
				while(cx_ite != null) {
					var i = cx_ite.elt;
					if(i.event != 2) {
						cx_ite = cx_ite.next;
						continue;
					}
					var cb = this.push_callback(i);
					cb.event = 2;
					cb.body = b;
					cx_ite = cx_ite.next;
				}
			} else {
				b.component.woken = true;
			}
		}
	}
	,bodyCbSleep: function(b) {
		if(b.type == 2 && b.cbSet != null) {
			var cx_ite = b.cbSet.bodylisteners.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.event != 3) {
					cx_ite = cx_ite.next;
					continue;
				}
				var cb = this.push_callback(i);
				cb.event = 3;
				cb.body = b;
				cx_ite = cx_ite.next;
			}
		}
	}
	,constraintCbWake: function(con) {
		if(con.cbSet != null) {
			if(this.midstep) {
				var cx_ite = con.cbSet.conlisteners.head;
				while(cx_ite != null) {
					var i = cx_ite.elt;
					if(i.event != 2) {
						cx_ite = cx_ite.next;
						continue;
					}
					var cb = this.push_callback(i);
					cb.event = 2;
					cb.constraint = con;
					cx_ite = cx_ite.next;
				}
			} else {
				con.component.woken = true;
			}
		}
	}
	,constraintCbSleep: function(con) {
		if(con.cbSet != null) {
			var cx_ite = con.cbSet.conlisteners.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.event != 3) {
					cx_ite = cx_ite.next;
					continue;
				}
				var cb = this.push_callback(i);
				cb.event = 3;
				cb.constraint = con;
				cx_ite = cx_ite.next;
			}
		}
	}
	,constraintCbBreak: function(con) {
		if(con.cbSet != null) {
			var cx_ite = con.cbSet.conlisteners.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.event != 4) {
					cx_ite = cx_ite.next;
					continue;
				}
				var cb = this.push_callback(i);
				cb.event = 4;
				cb.constraint = con;
				cx_ite = cx_ite.next;
			}
		}
	}
	,nullListenerType: function(cb1,cb2) {
		var stack = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
		var cx_ite = cb1.interactors.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			stack.add(i);
			cx_ite = cx_ite.next;
		}
		if(cb1 != cb2) {
			var cx_ite1 = cb2.interactors.head;
			while(cx_ite1 != null) {
				var i1 = cx_ite1.elt;
				stack.add(i1);
				cx_ite1 = cx_ite1.next;
			}
		}
		while(stack.head != null) {
			var intx = stack.pop_unsafe();
			if(intx.icompound != null) {
				var comp = intx.icompound;
				var cx_ite2 = comp.bodies.head;
				while(cx_ite2 != null) {
					var i2 = cx_ite2.elt;
					stack.add(i2);
					cx_ite2 = cx_ite2.next;
				}
				var cx_ite3 = comp.compounds.head;
				while(cx_ite3 != null) {
					var i3 = cx_ite3.elt;
					stack.add(i3);
					cx_ite3 = cx_ite3.next;
				}
			} else {
				var xbody = intx.ibody != null ? intx.ibody : intx.ishape.body;
				var xshp = intx.ishape != null ? intx.ishape : null;
				var cx_ite4 = xbody.arbiters.head;
				while(cx_ite4 != null) {
					var xarb = cx_ite4.elt;
					if(xarb.present == 0) {
						cx_ite4 = cx_ite4.next;
						continue;
					}
					if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
						cx_ite4 = cx_ite4.next;
						continue;
					}
					this.MRCA_chains(xarb.ws1,xarb.ws2);
					var cx_ite5 = this.mrca1.head;
					while(cx_ite5 != null) {
						var i11 = cx_ite5.elt;
						if(i11.cbSet != cb1 && i11.cbSet != cb2) {
							cx_ite5 = cx_ite5.next;
							continue;
						}
						var cx_ite6 = this.mrca2.head;
						while(cx_ite6 != null) {
							var i21 = cx_ite6.elt;
							if(i11.cbSet == cb1 && i21.cbSet != cb2 || i11.cbSet == cb2 && i21.cbSet != cb1) {
								cx_ite6 = cx_ite6.next;
								continue;
							}
							var callbackset = zpp_$nape_phys_ZPP_$Interactor.get(i11,i21);
							if(callbackset != null) {
								while(callbackset.arbiters.head != null) {
									var arb = callbackset.arbiters.pop_unsafe();
									arb.present--;
								}
								this.remove_callbackset(callbackset);
							}
							cx_ite6 = cx_ite6.next;
						}
						cx_ite5 = cx_ite5.next;
					}
					cx_ite4 = cx_ite4.next;
				}
			}
		}
	}
	,nullInteractorType: function(intx,me) {
		if(me == null) {
			me = intx;
		}
		if(intx.icompound != null) {
			var comp = intx.icompound;
			var cx_ite = comp.bodies.head;
			while(cx_ite != null) {
				var body = cx_ite.elt;
				this.nullInteractorType(body,me);
				cx_ite = cx_ite.next;
			}
			var cx_ite1 = comp.compounds.head;
			while(cx_ite1 != null) {
				var comp1 = cx_ite1.elt;
				this.nullInteractorType(comp1,me);
				cx_ite1 = cx_ite1.next;
			}
		} else {
			var xbody = intx.ibody != null ? intx.ibody : intx.ishape.body;
			var xshp = intx.ishape != null ? intx.ishape : null;
			var cx_ite2 = xbody.arbiters.head;
			while(cx_ite2 != null) {
				var xarb = cx_ite2.elt;
				if(xarb.present == 0) {
					cx_ite2 = cx_ite2.next;
					continue;
				}
				if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
					cx_ite2 = cx_ite2.next;
					continue;
				}
				this.MRCA_chains(xarb.ws1,xarb.ws2);
				var cx_ite3 = this.mrca1.head;
				while(cx_ite3 != null) {
					var i1 = cx_ite3.elt;
					var cx_ite4 = this.mrca2.head;
					while(cx_ite4 != null) {
						var i2 = cx_ite4.elt;
						if(i1 != me && i2 != me) {
							cx_ite4 = cx_ite4.next;
							continue;
						}
						var callbackset = zpp_$nape_phys_ZPP_$Interactor.get(i1,i2);
						if(callbackset != null) {
							xarb.present--;
							callbackset.remove_arb(xarb);
							if(callbackset.arbiters.head == null) {
								this.remove_callbackset(callbackset);
							}
						}
						cx_ite4 = cx_ite4.next;
					}
					cx_ite3 = cx_ite3.next;
				}
				cx_ite2 = cx_ite2.next;
			}
		}
	}
	,freshListenerType: function(cb1,cb2) {
		var stack = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
		var cx_ite = cb1.interactors.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			stack.add(i);
			cx_ite = cx_ite.next;
		}
		if(cb1 != cb2) {
			var cx_ite1 = cb2.interactors.head;
			while(cx_ite1 != null) {
				var i1 = cx_ite1.elt;
				stack.add(i1);
				cx_ite1 = cx_ite1.next;
			}
		}
		while(stack.head != null) {
			var intx = stack.pop_unsafe();
			if(intx.icompound != null) {
				var comp = intx.icompound;
				var cx_ite2 = comp.bodies.head;
				while(cx_ite2 != null) {
					var i2 = cx_ite2.elt;
					stack.add(i2);
					cx_ite2 = cx_ite2.next;
				}
				var cx_ite3 = comp.compounds.head;
				while(cx_ite3 != null) {
					var i3 = cx_ite3.elt;
					stack.add(i3);
					cx_ite3 = cx_ite3.next;
				}
			} else {
				var xbody = intx.ibody != null ? intx.ibody : intx.ishape.body;
				var xshp = intx.ishape != null ? intx.ishape : null;
				var cx_ite4 = xbody.arbiters.head;
				while(cx_ite4 != null) {
					var xarb = cx_ite4.elt;
					if(!xarb.presentable) {
						cx_ite4 = cx_ite4.next;
						continue;
					}
					if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
						cx_ite4 = cx_ite4.next;
						continue;
					}
					this.MRCA_chains(xarb.ws1,xarb.ws2);
					var cx_ite5 = this.mrca1.head;
					while(cx_ite5 != null) {
						var i11 = cx_ite5.elt;
						if(i11.cbSet != cb1 && i11.cbSet != cb2) {
							cx_ite5 = cx_ite5.next;
							continue;
						}
						var cx_ite6 = this.mrca2.head;
						while(cx_ite6 != null) {
							var i21 = cx_ite6.elt;
							if(i11.cbSet == cb1 && i21.cbSet != cb2 || i11.cbSet == cb2 && i21.cbSet != cb1) {
								cx_ite6 = cx_ite6.next;
								continue;
							}
							var callbackset = zpp_$nape_phys_ZPP_$Interactor.get(i11,i21);
							if(callbackset == null) {
								callbackset = zpp_$nape_space_ZPP_$CallbackSet.get(i11,i21);
								this.add_callbackset(callbackset);
							}
							var tmp;
							var ret;
							ret = false;
							var cx_ite7 = callbackset.arbiters.head;
							while(cx_ite7 != null) {
								var npite = cx_ite7.elt;
								if(npite == xarb) {
									ret = true;
									break;
								}
								cx_ite7 = cx_ite7.next;
							}
							if(!ret) {
								var _this = callbackset.arbiters;
								var ret1;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool == null) {
									ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$Arbiter();
								} else {
									ret1 = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = ret1.next;
									ret1.next = null;
								}
								ret1.elt = xarb;
								var temp = ret1;
								temp.next = _this.head;
								_this.head = temp;
								_this.modified = true;
								_this.length++;
								tmp = true;
							} else {
								tmp = false;
							}
							if(tmp) {
								xarb.present++;
							}
							cx_ite6 = cx_ite6.next;
						}
						cx_ite5 = cx_ite5.next;
					}
					cx_ite4 = cx_ite4.next;
				}
			}
		}
	}
	,freshInteractorType: function(intx,me) {
		if(me == null) {
			me = intx;
		}
		if(intx.icompound != null) {
			var comp = intx.icompound;
			var cx_ite = comp.bodies.head;
			while(cx_ite != null) {
				var body = cx_ite.elt;
				this.freshInteractorType(body,me);
				cx_ite = cx_ite.next;
			}
			var cx_ite1 = comp.compounds.head;
			while(cx_ite1 != null) {
				var comp1 = cx_ite1.elt;
				this.freshInteractorType(comp1,me);
				cx_ite1 = cx_ite1.next;
			}
		} else {
			var xbody = intx.ibody != null ? intx.ibody : intx.ishape.body;
			var xshp = intx.ishape != null ? intx.ishape : null;
			var cx_ite2 = xbody.arbiters.head;
			while(cx_ite2 != null) {
				var xarb = cx_ite2.elt;
				if(!xarb.presentable) {
					cx_ite2 = cx_ite2.next;
					continue;
				}
				if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
					cx_ite2 = cx_ite2.next;
					continue;
				}
				this.MRCA_chains(xarb.ws1,xarb.ws2);
				var cx_ite3 = this.mrca1.head;
				while(cx_ite3 != null) {
					var i1 = cx_ite3.elt;
					var cx_ite4 = this.mrca2.head;
					while(cx_ite4 != null) {
						var i2 = cx_ite4.elt;
						if(i1 != me && i2 != me) {
							cx_ite4 = cx_ite4.next;
							continue;
						}
						var cb1 = i1.cbSet;
						var cb2 = i2.cbSet;
						cb1.validate();
						cb2.validate();
						var _this = cb1.manager;
						var ret = null;
						var pairs = cb1.cbpairs.length < cb2.cbpairs.length ? cb1.cbpairs : cb2.cbpairs;
						var cx_ite5 = pairs.head;
						while(cx_ite5 != null) {
							var p = cx_ite5.elt;
							if(p.a == cb1 && p.b == cb2 || p.a == cb2 && p.b == cb1) {
								ret = p;
								break;
							}
							cx_ite5 = cx_ite5.next;
						}
						if(ret == null) {
							var ret1;
							if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
								ret1 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
							} else {
								ret1 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
								zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret1.next;
								ret1.next = null;
							}
							ret1.zip_listeners = true;
							if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(cb1,cb2)) {
								ret1.a = cb1;
								ret1.b = cb2;
							} else {
								ret1.a = cb2;
								ret1.b = cb1;
							}
							ret = ret1;
							cb1.cbpairs.add(ret);
							if(cb2 != cb1) {
								cb2.cbpairs.add(ret);
							}
						}
						if(ret.zip_listeners) {
							ret.zip_listeners = false;
							ret.__validate();
						}
						if(ret.listeners.head != null) {
							var callbackset = zpp_$nape_phys_ZPP_$Interactor.get(i1,i2);
							if(callbackset == null) {
								callbackset = zpp_$nape_space_ZPP_$CallbackSet.get(i1,i2);
								this.add_callbackset(callbackset);
							}
							var tmp;
							var ret2;
							ret2 = false;
							var cx_ite6 = callbackset.arbiters.head;
							while(cx_ite6 != null) {
								var npite = cx_ite6.elt;
								if(npite == xarb) {
									ret2 = true;
									break;
								}
								cx_ite6 = cx_ite6.next;
							}
							if(!ret2) {
								var _this1 = callbackset.arbiters;
								var ret3;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool == null) {
									ret3 = new zpp_$nape_util_ZNPNode_$ZPP_$Arbiter();
								} else {
									ret3 = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = ret3.next;
									ret3.next = null;
								}
								ret3.elt = xarb;
								var temp = ret3;
								temp.next = _this1.head;
								_this1.head = temp;
								_this1.modified = true;
								_this1.length++;
								tmp = true;
							} else {
								tmp = false;
							}
							if(tmp) {
								xarb.present++;
							}
						}
						cx_ite4 = cx_ite4.next;
					}
					cx_ite3 = cx_ite3.next;
				}
				cx_ite2 = cx_ite2.next;
			}
		}
	}
	,wakeCompound: function(x) {
		var cx_ite = x.bodies.head;
		while(cx_ite != null) {
			var y = cx_ite.elt;
			var o = y;
			if(!o.world) {
				o.component.waket = this.stamp + (this.midstep ? 0 : 1);
				if(o.type == 3) {
					o.kinematicDelaySleep = true;
				}
				if(o.component.sleeping) {
					this.really_wake(o,false);
				}
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = x.constraints.head;
		while(cx_ite1 != null) {
			var i = cx_ite1.elt;
			this.wake_constraint(i);
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = x.compounds.head;
		while(cx_ite2 != null) {
			var i1 = cx_ite2.elt;
			this.wakeCompound(i1);
			cx_ite2 = cx_ite2.next;
		}
	}
	,wakeIsland: function(i) {
		while(i.comps.head != null) {
			var c = i.comps.pop_unsafe();
			c.waket = this.stamp + (this.midstep ? 0 : 1);
			if(c.isBody) {
				var b = c.body;
				this.live.add(b);
				var cx_ite = b.arbiters.head;
				while(cx_ite != null) {
					var arb = cx_ite.elt;
					if(arb.sleeping) {
						arb.sleeping = false;
						arb.up_stamp += this.stamp - arb.sleep_stamp;
						if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL) {
							var carb = arb.colarb;
							if(carb.stat) {
								var _this = this.c_arbiters_true;
								var ret;
								if(zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool == null) {
									ret = new zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter();
								} else {
									ret = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = ret.next;
									ret.next = null;
								}
								ret.elt = carb;
								var temp = ret;
								temp.next = _this.head;
								_this.head = temp;
								_this.modified = true;
								_this.length++;
							} else {
								var _this1 = this.c_arbiters_false;
								var ret1;
								if(zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool == null) {
									ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter();
								} else {
									ret1 = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = ret1.next;
									ret1.next = null;
								}
								ret1.elt = carb;
								var temp1 = ret1;
								temp1.next = _this1.head;
								_this1.head = temp1;
								_this1.modified = true;
								_this1.length++;
							}
						} else if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.FLUID) {
							var _this2 = this.f_arbiters;
							var o = arb.fluidarb;
							var ret2;
							if(zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool == null) {
								ret2 = new zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter();
							} else {
								ret2 = zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool = ret2.next;
								ret2.next = null;
							}
							ret2.elt = o;
							var temp2 = ret2;
							temp2.next = _this2.head;
							_this2.head = temp2;
							_this2.modified = true;
							_this2.length++;
						} else {
							var _this3 = this.s_arbiters;
							var o1 = arb.sensorarb;
							var ret3;
							if(zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool == null) {
								ret3 = new zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter();
							} else {
								ret3 = zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool = ret3.next;
								ret3.next = null;
							}
							ret3.elt = o1;
							var temp3 = ret3;
							temp3.next = _this3.head;
							_this3.head = temp3;
							_this3.modified = true;
							_this3.length++;
						}
					}
					cx_ite = cx_ite.next;
				}
				this.bodyCbWake(b);
				c.sleeping = false;
				c.island = null;
				c.parent = c;
				c.rank = 0;
				if(b.type != 1) {
					var cx_ite1 = b.shapes.head;
					while(cx_ite1 != null) {
						var shape = cx_ite1.elt;
						if(shape.node != null) {
							this.bphase.sync(shape);
						}
						cx_ite1 = cx_ite1.next;
					}
				}
			} else {
				var con = c.constraint;
				var _this4 = this.live_constraints;
				var ret4;
				if(zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool == null) {
					ret4 = new zpp_$nape_util_ZNPNode_$ZPP_$Constraint();
				} else {
					ret4 = zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool = ret4.next;
					ret4.next = null;
				}
				ret4.elt = con;
				var temp4 = ret4;
				temp4.next = _this4.head;
				_this4.head = temp4;
				_this4.modified = true;
				_this4.length++;
				this.constraintCbWake(con);
				c.sleeping = false;
				c.island = null;
				c.parent = c;
				c.rank = 0;
			}
		}
		var o2 = i;
		o2.next = zpp_$nape_space_ZPP_$Island.zpp_pool;
		zpp_$nape_space_ZPP_$Island.zpp_pool = o2;
	}
	,non_inlined_wake: function(o,fst) {
		if(fst == null) {
			fst = false;
		}
		var o1 = o;
		if(!o1.world) {
			o1.component.waket = this.stamp + (this.midstep ? 0 : 1);
			if(o1.type == 3) {
				o1.kinematicDelaySleep = true;
			}
			if(o1.component.sleeping) {
				this.really_wake(o1,fst);
			}
		}
	}
	,really_wake: function(o,fst) {
		if(fst == null) {
			fst = false;
		}
		if(o.component.island == null) {
			o.component.sleeping = false;
			if(o.type == 3 || o.type == 1) {
				var _this = this.staticsleep;
				var ret;
				if(zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool == null) {
					ret = new zpp_$nape_util_ZNPNode_$ZPP_$Body();
				} else {
					ret = zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool = ret.next;
					ret.next = null;
				}
				ret.elt = o;
				var temp = ret;
				temp.next = _this.head;
				_this.head = temp;
				_this.modified = true;
				_this.length++;
			} else {
				var _this1 = this.live;
				var ret1;
				if(zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool == null) {
					ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$Body();
				} else {
					ret1 = zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool = ret1.next;
					ret1.next = null;
				}
				ret1.elt = o;
				var temp1 = ret1;
				temp1.next = _this1.head;
				_this1.head = temp1;
				_this1.modified = true;
				_this1.length++;
			}
			var cx_ite = o.constraints.head;
			while(cx_ite != null) {
				var con = cx_ite.elt;
				if(con.space == this) {
					this.wake_constraint(con);
				}
				cx_ite = cx_ite.next;
			}
			var cx_ite1 = o.arbiters.head;
			while(cx_ite1 != null) {
				var arb = cx_ite1.elt;
				if(arb.sleeping) {
					arb.sleeping = false;
					arb.up_stamp += this.stamp + (this.midstep ? 0 : 1) - arb.sleep_stamp;
					if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL) {
						var carb = arb.colarb;
						if(carb.stat) {
							var _this2 = this.c_arbiters_true;
							var ret2;
							if(zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool == null) {
								ret2 = new zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter();
							} else {
								ret2 = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = ret2.next;
								ret2.next = null;
							}
							ret2.elt = carb;
							var temp2 = ret2;
							temp2.next = _this2.head;
							_this2.head = temp2;
							_this2.modified = true;
							_this2.length++;
						} else {
							var _this3 = this.c_arbiters_false;
							var ret3;
							if(zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool == null) {
								ret3 = new zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter();
							} else {
								ret3 = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = ret3.next;
								ret3.next = null;
							}
							ret3.elt = carb;
							var temp3 = ret3;
							temp3.next = _this3.head;
							_this3.head = temp3;
							_this3.modified = true;
							_this3.length++;
						}
					} else if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.FLUID) {
						var _this4 = this.f_arbiters;
						var o1 = arb.fluidarb;
						var ret4;
						if(zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool == null) {
							ret4 = new zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter();
						} else {
							ret4 = zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool = ret4.next;
							ret4.next = null;
						}
						ret4.elt = o1;
						var temp4 = ret4;
						temp4.next = _this4.head;
						_this4.head = temp4;
						_this4.modified = true;
						_this4.length++;
					} else {
						var _this5 = this.s_arbiters;
						var o2 = arb.sensorarb;
						var ret5;
						if(zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool == null) {
							ret5 = new zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter();
						} else {
							ret5 = zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool = ret5.next;
							ret5.next = null;
						}
						ret5.elt = o2;
						var temp5 = ret5;
						temp5.next = _this5.head;
						_this5.head = temp5;
						_this5.modified = true;
						_this5.length++;
					}
				}
				if(arb.type != zpp_$nape_dynamics_ZPP_$Arbiter.SENSOR && !arb.cleared && arb.up_stamp >= this.stamp && (arb.immState & 1) != 0) {
					if(arb.b1.type == 2 && arb.b1.component.sleeping) {
						var o3 = arb.b1;
						if(!o3.world) {
							o3.component.waket = this.stamp + (this.midstep ? 0 : 1);
							if(o3.type == 3) {
								o3.kinematicDelaySleep = true;
							}
							if(o3.component.sleeping) {
								this.really_wake(o3,false);
							}
						}
					}
					if(arb.b2.type == 2 && arb.b2.component.sleeping) {
						var o4 = arb.b2;
						if(!o4.world) {
							o4.component.waket = this.stamp + (this.midstep ? 0 : 1);
							if(o4.type == 3) {
								o4.kinematicDelaySleep = true;
							}
							if(o4.component.sleeping) {
								this.really_wake(o4,false);
							}
						}
					}
				}
				cx_ite1 = cx_ite1.next;
			}
			if(!fst && o.type == 2) {
				this.bodyCbWake(o);
			}
			if(!fst && !this.bphase.is_sweep && o.type != 1) {
				var cx_ite2 = o.shapes.head;
				while(cx_ite2 != null) {
					var shape = cx_ite2.elt;
					if(shape.node != null) {
						this.bphase.sync(shape);
					}
					cx_ite2 = cx_ite2.next;
				}
			}
		} else {
			this.wakeIsland(o.component.island);
		}
	}
	,wake_constraint: function(con,fst) {
		if(fst == null) {
			fst = false;
		}
		if(con.active) {
			con.component.waket = this.stamp + (this.midstep ? 0 : 1);
			if(con.component.sleeping) {
				if(con.component.island == null) {
					con.component.sleeping = false;
					var _this = this.live_constraints;
					var ret;
					if(zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool == null) {
						ret = new zpp_$nape_util_ZNPNode_$ZPP_$Constraint();
					} else {
						ret = zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool = ret.next;
						ret.next = null;
					}
					ret.elt = con;
					var temp = ret;
					temp.next = _this.head;
					_this.head = temp;
					_this.modified = true;
					_this.length++;
					con.wake_connected();
					if(!fst) {
						this.constraintCbWake(con);
					}
				} else {
					this.wakeIsland(con.component.island);
				}
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,doForests: function(dt) {
		var cx_ite = this.c_arbiters_false.head;
		while(cx_ite != null) {
			var arb = cx_ite.elt;
			if(!arb.cleared && arb.up_stamp == this.stamp && (arb.immState & 1) != 0) {
				if(arb.b1.type == 2 && arb.b2.type == 2) {
					var xr;
					if(arb.b1.component == arb.b1.component.parent) {
						xr = arb.b1.component;
					} else {
						var obj = arb.b1.component;
						var stack = null;
						while(obj != obj.parent) {
							var nxt = obj.parent;
							obj.parent = stack;
							stack = obj;
							obj = nxt;
						}
						while(stack != null) {
							var nxt1 = stack.parent;
							stack.parent = obj;
							stack = nxt1;
						}
						xr = obj;
					}
					var yr;
					if(arb.b2.component == arb.b2.component.parent) {
						yr = arb.b2.component;
					} else {
						var obj1 = arb.b2.component;
						var stack1 = null;
						while(obj1 != obj1.parent) {
							var nxt2 = obj1.parent;
							obj1.parent = stack1;
							stack1 = obj1;
							obj1 = nxt2;
						}
						while(stack1 != null) {
							var nxt3 = stack1.parent;
							stack1.parent = obj1;
							stack1 = nxt3;
						}
						yr = obj1;
					}
					if(xr != yr) {
						if(xr.rank < yr.rank) {
							xr.parent = yr;
						} else if(xr.rank > yr.rank) {
							yr.parent = xr;
						} else {
							yr.parent = xr;
							xr.rank++;
						}
					}
				}
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = this.f_arbiters.head;
		while(cx_ite1 != null) {
			var arb1 = cx_ite1.elt;
			if(!arb1.cleared && arb1.up_stamp == this.stamp && (arb1.immState & 1) != 0) {
				if(arb1.b1.type == 2 && arb1.b2.type == 2) {
					var xr1;
					if(arb1.b1.component == arb1.b1.component.parent) {
						xr1 = arb1.b1.component;
					} else {
						var obj2 = arb1.b1.component;
						var stack2 = null;
						while(obj2 != obj2.parent) {
							var nxt4 = obj2.parent;
							obj2.parent = stack2;
							stack2 = obj2;
							obj2 = nxt4;
						}
						while(stack2 != null) {
							var nxt5 = stack2.parent;
							stack2.parent = obj2;
							stack2 = nxt5;
						}
						xr1 = obj2;
					}
					var yr1;
					if(arb1.b2.component == arb1.b2.component.parent) {
						yr1 = arb1.b2.component;
					} else {
						var obj3 = arb1.b2.component;
						var stack3 = null;
						while(obj3 != obj3.parent) {
							var nxt6 = obj3.parent;
							obj3.parent = stack3;
							stack3 = obj3;
							obj3 = nxt6;
						}
						while(stack3 != null) {
							var nxt7 = stack3.parent;
							stack3.parent = obj3;
							stack3 = nxt7;
						}
						yr1 = obj3;
					}
					if(xr1 != yr1) {
						if(xr1.rank < yr1.rank) {
							xr1.parent = yr1;
						} else if(xr1.rank > yr1.rank) {
							yr1.parent = xr1;
						} else {
							yr1.parent = xr1;
							xr1.rank++;
						}
					}
				}
			}
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = this.live_constraints.head;
		while(cx_ite2 != null) {
			var con = cx_ite2.elt;
			con.forest();
			cx_ite2 = cx_ite2.next;
		}
		while(this.live.head != null) {
			var _this = this.live;
			var ret = _this.head.elt;
			_this.pop();
			var o = ret;
			var oc = o.component;
			var root;
			if(oc == oc.parent) {
				root = oc;
			} else {
				var obj4 = oc;
				var stack4 = null;
				while(obj4 != obj4.parent) {
					var nxt8 = obj4.parent;
					obj4.parent = stack4;
					stack4 = obj4;
					obj4 = nxt8;
				}
				while(stack4 != null) {
					var nxt9 = stack4.parent;
					stack4.parent = obj4;
					stack4 = nxt9;
				}
				root = obj4;
			}
			if(root.island == null) {
				if(zpp_$nape_space_ZPP_$Island.zpp_pool == null) {
					root.island = new zpp_$nape_space_ZPP_$Island();
				} else {
					root.island = zpp_$nape_space_ZPP_$Island.zpp_pool;
					zpp_$nape_space_ZPP_$Island.zpp_pool = root.island.next;
					root.island.next = null;
				}
				root.island.waket = 0;
				var _this1 = this.islands;
				var o1 = root.island;
				o1._inuse = true;
				var temp = o1;
				temp.next = _this1.next;
				_this1.next = temp;
				_this1.modified = true;
				_this1.length++;
				root.island.sleep = true;
			}
			oc.island = root.island;
			var _this2 = oc.island.comps;
			var ret1;
			if(zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool == null) {
				ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$Component();
			} else {
				ret1 = zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.elt = oc;
			var temp1 = ret1;
			temp1.next = _this2.head;
			_this2.head = temp1;
			_this2.modified = true;
			_this2.length++;
			var rest = o.atRest(dt);
			oc.island.sleep = oc.island.sleep && rest;
			if(oc.waket > oc.island.waket) {
				oc.island.waket = oc.waket;
			}
		}
		while(this.live_constraints.head != null) {
			var _this3 = this.live_constraints;
			var ret2 = _this3.head.elt;
			_this3.pop();
			var o2 = ret2;
			var oc1 = o2.component;
			var root1;
			if(oc1 == oc1.parent) {
				root1 = oc1;
			} else {
				var obj5 = oc1;
				var stack5 = null;
				while(obj5 != obj5.parent) {
					var nxt10 = obj5.parent;
					obj5.parent = stack5;
					stack5 = obj5;
					obj5 = nxt10;
				}
				while(stack5 != null) {
					var nxt11 = stack5.parent;
					stack5.parent = obj5;
					stack5 = nxt11;
				}
				root1 = obj5;
			}
			oc1.island = root1.island;
			var _this4 = oc1.island.comps;
			var ret3;
			if(zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool == null) {
				ret3 = new zpp_$nape_util_ZNPNode_$ZPP_$Component();
			} else {
				ret3 = zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool = ret3.next;
				ret3.next = null;
			}
			ret3.elt = oc1;
			var temp2 = ret3;
			temp2.next = _this4.head;
			_this4.head = temp2;
			_this4.modified = true;
			_this4.length++;
			if(oc1.waket > oc1.island.waket) {
				oc1.island.waket = oc1.waket;
			}
		}
		while(this.islands.next != null) {
			var _this5 = this.islands;
			var ret4 = _this5.next;
			_this5.pop();
			var i = ret4;
			if(i.sleep) {
				var cx_ite3 = i.comps.head;
				while(cx_ite3 != null) {
					var c = cx_ite3.elt;
					if(c.isBody) {
						var b = c.body;
						b.velx = 0;
						b.vely = 0;
						b.angvel = 0;
						c.sleeping = true;
						var cx_ite4 = b.shapes.head;
						while(cx_ite4 != null) {
							var shape = cx_ite4.elt;
							this.bphase.sync(shape);
							cx_ite4 = cx_ite4.next;
						}
						this.bodyCbSleep(b);
					} else {
						var con1 = c.constraint;
						this.constraintCbSleep(con1);
						c.sleeping = true;
					}
					cx_ite3 = cx_ite3.next;
				}
			} else {
				while(i.comps.head != null) {
					var _this6 = i.comps;
					var ret5 = _this6.head.elt;
					_this6.pop();
					var c1 = ret5;
					c1.waket = i.waket;
					if(c1.isBody) {
						var _this7 = this.live;
						var o3 = c1.body;
						var ret6;
						if(zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool == null) {
							ret6 = new zpp_$nape_util_ZNPNode_$ZPP_$Body();
						} else {
							ret6 = zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool = ret6.next;
							ret6.next = null;
						}
						ret6.elt = o3;
						var temp3 = ret6;
						temp3.next = _this7.head;
						_this7.head = temp3;
						_this7.modified = true;
						_this7.length++;
					} else {
						var _this8 = this.live_constraints;
						var o4 = c1.constraint;
						var ret7;
						if(zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool == null) {
							ret7 = new zpp_$nape_util_ZNPNode_$ZPP_$Constraint();
						} else {
							ret7 = zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool = ret7.next;
							ret7.next = null;
						}
						ret7.elt = o4;
						var temp4 = ret7;
						temp4.next = _this8.head;
						_this8.head = temp4;
						_this8.modified = true;
						_this8.length++;
					}
					c1.sleeping = false;
					c1.island = null;
					c1.parent = c1;
					c1.rank = 0;
				}
				var o5 = i;
				o5.next = zpp_$nape_space_ZPP_$Island.zpp_pool;
				zpp_$nape_space_ZPP_$Island.zpp_pool = o5;
			}
		}
	}
	,sleepArbiters: function() {
		var pre = null;
		var arbs = this.c_arbiters_true;
		var arbite = arbs.head;
		var fst = this.c_arbiters_false != null;
		if(fst && arbite == null) {
			fst = false;
			arbite = this.c_arbiters_false.head;
			arbs = this.c_arbiters_false;
			pre = null;
		}
		while(arbite != null) {
			var arb = arbite.elt;
			if(arb.b1.component.sleeping && arb.b2.component.sleeping) {
				arb.sleep_stamp = this.stamp;
				arb.sleeping = true;
				var old;
				var ret;
				if(pre == null) {
					old = arbs.head;
					ret = old.next;
					arbs.head = ret;
					if(arbs.head == null) {
						arbs.pushmod = true;
					}
				} else {
					old = pre.next;
					ret = old.next;
					pre.next = ret;
					if(ret == null) {
						arbs.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = o;
				arbs.modified = true;
				arbs.length--;
				arbs.pushmod = true;
				arbite = ret;
				if(fst && arbite == null) {
					fst = false;
					arbite = this.c_arbiters_false.head;
					arbs = this.c_arbiters_false;
					pre = null;
				}
				continue;
			}
			pre = arbite;
			arbite = arbite.next;
			if(fst && arbite == null) {
				fst = false;
				arbite = this.c_arbiters_false.head;
				arbs = this.c_arbiters_false;
				pre = null;
			}
		}
		var pre1 = null;
		var arbs1 = this.f_arbiters;
		var arbite1 = arbs1.head;
		var fst1 = false;
		if(fst1 && arbite1 == null) {
			fst1 = false;
			arbite1 = null.begin();
			arbs1 = null;
			pre1 = null;
		}
		while(arbite1 != null) {
			var arb1 = arbite1.elt;
			if(arb1.b1.component.sleeping && arb1.b2.component.sleeping) {
				arb1.sleep_stamp = this.stamp;
				arb1.sleeping = true;
				var old1;
				var ret1;
				if(pre1 == null) {
					old1 = arbs1.head;
					ret1 = old1.next;
					arbs1.head = ret1;
					if(arbs1.head == null) {
						arbs1.pushmod = true;
					}
				} else {
					old1 = pre1.next;
					ret1 = old1.next;
					pre1.next = ret1;
					if(ret1 == null) {
						arbs1.pushmod = true;
					}
				}
				var o1 = old1;
				o1.elt = null;
				o1.next = zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool = o1;
				arbs1.modified = true;
				arbs1.length--;
				arbs1.pushmod = true;
				arbite1 = ret1;
				if(fst1 && arbite1 == null) {
					fst1 = false;
					arbite1 = null.begin();
					arbs1 = null;
					pre1 = null;
				}
				continue;
			}
			pre1 = arbite1;
			arbite1 = arbite1.next;
			if(fst1 && arbite1 == null) {
				fst1 = false;
				arbite1 = null.begin();
				arbs1 = null;
				pre1 = null;
			}
		}
		var pre2 = null;
		var arbs2 = this.s_arbiters;
		var arbite2 = arbs2.head;
		var fst2 = false;
		if(fst2 && arbite2 == null) {
			fst2 = false;
			arbite2 = null.begin();
			arbs2 = null;
			pre2 = null;
		}
		while(arbite2 != null) {
			var arb2 = arbite2.elt;
			if(arb2.b1.component.sleeping && arb2.b2.component.sleeping) {
				arb2.sleep_stamp = this.stamp;
				arb2.sleeping = true;
				var old2;
				var ret2;
				if(pre2 == null) {
					old2 = arbs2.head;
					ret2 = old2.next;
					arbs2.head = ret2;
					if(arbs2.head == null) {
						arbs2.pushmod = true;
					}
				} else {
					old2 = pre2.next;
					ret2 = old2.next;
					pre2.next = ret2;
					if(ret2 == null) {
						arbs2.pushmod = true;
					}
				}
				var o2 = old2;
				o2.elt = null;
				o2.next = zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool = o2;
				arbs2.modified = true;
				arbs2.length--;
				arbs2.pushmod = true;
				arbite2 = ret2;
				if(fst2 && arbite2 == null) {
					fst2 = false;
					arbite2 = null.begin();
					arbs2 = null;
					pre2 = null;
				}
				continue;
			}
			pre2 = arbite2;
			arbite2 = arbite2.next;
			if(fst2 && arbite2 == null) {
				fst2 = false;
				arbite2 = null.begin();
				arbs2 = null;
				pre2 = null;
			}
		}
	}
	,static_validation: function(body) {
		if(body.shapes.head != null) {
			if(body.shapes.head == null) {
				throw new js__$Boot_HaxeError("Error: Body bounds only makes sense if it contains shapes");
			}
			if(body.zip_aabb) {
				body.zip_aabb = false;
				body.aabb.minx = Infinity;
				body.aabb.miny = Infinity;
				body.aabb.maxx = -Infinity;
				body.aabb.maxy = -Infinity;
				var cx_ite = body.shapes.head;
				while(cx_ite != null) {
					var s = cx_ite.elt;
					if(s.zip_aabb) {
						if(s.body != null) {
							s.zip_aabb = false;
							if(s.type == 0) {
								var _this = s.circle;
								if(_this.zip_worldCOM) {
									if(_this.body != null) {
										_this.zip_worldCOM = false;
										if(_this.zip_localCOM) {
											_this.zip_localCOM = false;
											if(_this.type == 1) {
												var _this1 = _this.polygon;
												if(_this1.lverts.next == null) {
													throw new js__$Boot_HaxeError("Error: An empty polygon has no meaningful localCOM");
												}
												if(_this1.lverts.next.next == null) {
													_this1.localCOMx = _this1.lverts.next.x;
													_this1.localCOMy = _this1.lverts.next.y;
												} else if(_this1.lverts.next.next.next == null) {
													_this1.localCOMx = _this1.lverts.next.x;
													_this1.localCOMy = _this1.lverts.next.y;
													var t = 1.0;
													_this1.localCOMx += _this1.lverts.next.next.x * t;
													_this1.localCOMy += _this1.lverts.next.next.y * t;
													var t1 = 0.5;
													_this1.localCOMx *= t1;
													_this1.localCOMy *= t1;
												} else {
													_this1.localCOMx = 0;
													_this1.localCOMy = 0;
													var area = 0.0;
													var cx_ite1 = _this1.lverts.next;
													var u = cx_ite1;
													cx_ite1 = cx_ite1.next;
													var v = cx_ite1;
													cx_ite1 = cx_ite1.next;
													while(cx_ite1 != null) {
														var w = cx_ite1;
														area += v.x * (w.y - u.y);
														var cf = w.y * v.x - w.x * v.y;
														_this1.localCOMx += (v.x + w.x) * cf;
														_this1.localCOMy += (v.y + w.y) * cf;
														u = v;
														v = w;
														cx_ite1 = cx_ite1.next;
													}
													cx_ite1 = _this1.lverts.next;
													var w1 = cx_ite1;
													area += v.x * (w1.y - u.y);
													var cf1 = w1.y * v.x - w1.x * v.y;
													_this1.localCOMx += (v.x + w1.x) * cf1;
													_this1.localCOMy += (v.y + w1.y) * cf1;
													u = v;
													v = w1;
													cx_ite1 = cx_ite1.next;
													var w2 = cx_ite1;
													area += v.x * (w2.y - u.y);
													var cf2 = w2.y * v.x - w2.x * v.y;
													_this1.localCOMx += (v.x + w2.x) * cf2;
													_this1.localCOMy += (v.y + w2.y) * cf2;
													area = 1 / (3 * area);
													var t2 = area;
													_this1.localCOMx *= t2;
													_this1.localCOMy *= t2;
												}
											}
											if(_this.wrap_localCOM != null) {
												_this.wrap_localCOM.zpp_inner.x = _this.localCOMx;
												_this.wrap_localCOM.zpp_inner.y = _this.localCOMy;
											}
										}
										var _this2 = _this.body;
										if(_this2.zip_axis) {
											_this2.zip_axis = false;
											_this2.axisx = Math.sin(_this2.rot);
											_this2.axisy = Math.cos(_this2.rot);
										}
										_this.worldCOMx = _this.body.posx + (_this.body.axisy * _this.localCOMx - _this.body.axisx * _this.localCOMy);
										_this.worldCOMy = _this.body.posy + (_this.localCOMx * _this.body.axisx + _this.localCOMy * _this.body.axisy);
									}
								}
								var rx = _this.radius;
								var ry = _this.radius;
								_this.aabb.minx = _this.worldCOMx - rx;
								_this.aabb.miny = _this.worldCOMy - ry;
								_this.aabb.maxx = _this.worldCOMx + rx;
								_this.aabb.maxy = _this.worldCOMy + ry;
							} else {
								var _this3 = s.polygon;
								if(_this3.zip_gverts) {
									if(_this3.body != null) {
										_this3.zip_gverts = false;
										_this3.validate_lverts();
										var _this4 = _this3.body;
										if(_this4.zip_axis) {
											_this4.zip_axis = false;
											_this4.axisx = Math.sin(_this4.rot);
											_this4.axisy = Math.cos(_this4.rot);
										}
										var li = _this3.lverts.next;
										var cx_ite2 = _this3.gverts.next;
										while(cx_ite2 != null) {
											var g = cx_ite2;
											var l = li;
											li = li.next;
											g.x = _this3.body.posx + (_this3.body.axisy * l.x - _this3.body.axisx * l.y);
											g.y = _this3.body.posy + (l.x * _this3.body.axisx + l.y * _this3.body.axisy);
											cx_ite2 = cx_ite2.next;
										}
									}
								}
								if(_this3.lverts.next == null) {
									throw new js__$Boot_HaxeError("Error: An empty polygon has no meaningful bounds");
								}
								var p0 = _this3.gverts.next;
								_this3.aabb.minx = p0.x;
								_this3.aabb.miny = p0.y;
								_this3.aabb.maxx = p0.x;
								_this3.aabb.maxy = p0.y;
								var cx_ite3 = _this3.gverts.next.next;
								while(cx_ite3 != null) {
									var p = cx_ite3;
									if(p.x < _this3.aabb.minx) {
										_this3.aabb.minx = p.x;
									}
									if(p.x > _this3.aabb.maxx) {
										_this3.aabb.maxx = p.x;
									}
									if(p.y < _this3.aabb.miny) {
										_this3.aabb.miny = p.y;
									}
									if(p.y > _this3.aabb.maxy) {
										_this3.aabb.maxy = p.y;
									}
									cx_ite3 = cx_ite3.next;
								}
							}
						}
					}
					var _this5 = body.aabb;
					var x = s.aabb;
					if(x.minx < _this5.minx) {
						_this5.minx = x.minx;
					}
					if(x.maxx > _this5.maxx) {
						_this5.maxx = x.maxx;
					}
					if(x.miny < _this5.miny) {
						_this5.miny = x.miny;
					}
					if(x.maxy > _this5.maxy) {
						_this5.maxy = x.maxy;
					}
					cx_ite = cx_ite.next;
				}
			}
		}
		body.validate_mass();
		body.validate_inertia();
		if(body.velx != 0 || body.vely != 0 || body.angvel != 0) {
			throw new js__$Boot_HaxeError("Error: Static body cannot have any real velocity, only kinematic or surface velocities");
		}
		var cx_ite4 = body.shapes.head;
		while(cx_ite4 != null) {
			var s1 = cx_ite4.elt;
			if(s1.type == 1) {
				var _this6 = s1.polygon;
				if(_this6.zip_sanitation) {
					_this6.zip_sanitation = false;
					_this6.splice_collinear_real();
				}
				var res = s1.polygon.valid();
				if(zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID = new nape_shape_ValidationResult();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(res != zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID) {
					throw new js__$Boot_HaxeError("Error: Cannot simulate with an invalid Polygon : " + s1.polygon.outer.toString() + " is invalid : " + res.toString());
				}
				var _this7 = s1.polygon;
				if(_this7.zip_gaxi) {
					if(_this7.body != null) {
						_this7.zip_gaxi = false;
						_this7.validate_laxi();
						var _this8 = _this7.body;
						if(_this8.zip_axis) {
							_this8.zip_axis = false;
							_this8.axisx = Math.sin(_this8.rot);
							_this8.axisy = Math.cos(_this8.rot);
						}
						if(_this7.zip_gverts) {
							if(_this7.body != null) {
								_this7.zip_gverts = false;
								_this7.validate_lverts();
								var _this9 = _this7.body;
								if(_this9.zip_axis) {
									_this9.zip_axis = false;
									_this9.axisx = Math.sin(_this9.rot);
									_this9.axisy = Math.cos(_this9.rot);
								}
								var li1 = _this7.lverts.next;
								var cx_ite5 = _this7.gverts.next;
								while(cx_ite5 != null) {
									var g1 = cx_ite5;
									var l1 = li1;
									li1 = li1.next;
									g1.x = _this7.body.posx + (_this7.body.axisy * l1.x - _this7.body.axisx * l1.y);
									g1.y = _this7.body.posy + (l1.x * _this7.body.axisx + l1.y * _this7.body.axisy);
									cx_ite5 = cx_ite5.next;
								}
							}
						}
						var ite = _this7.edges.head;
						var cx_ite6 = _this7.gverts.next;
						var u1 = cx_ite6;
						cx_ite6 = cx_ite6.next;
						while(cx_ite6 != null) {
							var v1 = cx_ite6;
							var e = ite.elt;
							ite = ite.next;
							e.gp0 = u1;
							e.gp1 = v1;
							e.gnormx = _this7.body.axisy * e.lnormx - _this7.body.axisx * e.lnormy;
							e.gnormy = e.lnormx * _this7.body.axisx + e.lnormy * _this7.body.axisy;
							e.gprojection = _this7.body.posx * e.gnormx + _this7.body.posy * e.gnormy + e.lprojection;
							if(e.wrap_gnorm != null) {
								e.wrap_gnorm.zpp_inner.x = e.gnormx;
								e.wrap_gnorm.zpp_inner.y = e.gnormy;
							}
							e.tp0 = e.gp0.y * e.gnormx - e.gp0.x * e.gnormy;
							e.tp1 = e.gp1.y * e.gnormx - e.gp1.x * e.gnormy;
							u1 = v1;
							cx_ite6 = cx_ite6.next;
						}
						var v2 = _this7.gverts.next;
						var e1 = ite.elt;
						ite = ite.next;
						e1.gp0 = u1;
						e1.gp1 = v2;
						e1.gnormx = _this7.body.axisy * e1.lnormx - _this7.body.axisx * e1.lnormy;
						e1.gnormy = e1.lnormx * _this7.body.axisx + e1.lnormy * _this7.body.axisy;
						e1.gprojection = _this7.body.posx * e1.gnormx + _this7.body.posy * e1.gnormy + e1.lprojection;
						if(e1.wrap_gnorm != null) {
							e1.wrap_gnorm.zpp_inner.x = e1.gnormx;
							e1.wrap_gnorm.zpp_inner.y = e1.gnormy;
						}
						e1.tp0 = e1.gp0.y * e1.gnormx - e1.gp0.x * e1.gnormy;
						e1.tp1 = e1.gp1.y * e1.gnormx - e1.gp1.x * e1.gnormy;
					}
				}
			}
			cx_ite4 = cx_ite4.next;
		}
		body.sweepFrozen = true;
	}
	,validation: function() {
		var _this = this.cbsets;
		if(!_this.cbsets.empty()) {
			var set_ite = _this.cbsets.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var cb = set_ite.data;
				cb.validate();
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		var cx_ite = this.live.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			cur.sweepRadius = 0;
			var cx_ite1 = cur.shapes.head;
			while(cx_ite1 != null) {
				var s = cx_ite1.elt;
				if(s.type == 1) {
					var _this1 = s.polygon;
					if(_this1.zip_sanitation) {
						_this1.zip_sanitation = false;
						_this1.splice_collinear_real();
					}
					var res = s.polygon.valid();
					if(zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID == null) {
						zpp_$nape_util_ZPP_$Flags.internal = true;
						zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID = new nape_shape_ValidationResult();
						zpp_$nape_util_ZPP_$Flags.internal = false;
					}
					if(res != zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID) {
						throw new js__$Boot_HaxeError("Error: Cannot simulate with an invalid Polygon : " + s.polygon.outer.toString() + " is invalid : " + res.toString());
					}
					var _this2 = s.polygon;
					if(_this2.zip_gaxi) {
						if(_this2.body != null) {
							_this2.zip_gaxi = false;
							_this2.validate_laxi();
							var _this3 = _this2.body;
							if(_this3.zip_axis) {
								_this3.zip_axis = false;
								_this3.axisx = Math.sin(_this3.rot);
								_this3.axisy = Math.cos(_this3.rot);
							}
							if(_this2.zip_gverts) {
								if(_this2.body != null) {
									_this2.zip_gverts = false;
									_this2.validate_lverts();
									var _this4 = _this2.body;
									if(_this4.zip_axis) {
										_this4.zip_axis = false;
										_this4.axisx = Math.sin(_this4.rot);
										_this4.axisy = Math.cos(_this4.rot);
									}
									var li = _this2.lverts.next;
									var cx_ite2 = _this2.gverts.next;
									while(cx_ite2 != null) {
										var g = cx_ite2;
										var l = li;
										li = li.next;
										g.x = _this2.body.posx + (_this2.body.axisy * l.x - _this2.body.axisx * l.y);
										g.y = _this2.body.posy + (l.x * _this2.body.axisx + l.y * _this2.body.axisy);
										cx_ite2 = cx_ite2.next;
									}
								}
							}
							var ite = _this2.edges.head;
							var cx_ite3 = _this2.gverts.next;
							var u = cx_ite3;
							cx_ite3 = cx_ite3.next;
							while(cx_ite3 != null) {
								var v = cx_ite3;
								var e = ite.elt;
								ite = ite.next;
								e.gp0 = u;
								e.gp1 = v;
								e.gnormx = _this2.body.axisy * e.lnormx - _this2.body.axisx * e.lnormy;
								e.gnormy = e.lnormx * _this2.body.axisx + e.lnormy * _this2.body.axisy;
								e.gprojection = _this2.body.posx * e.gnormx + _this2.body.posy * e.gnormy + e.lprojection;
								if(e.wrap_gnorm != null) {
									e.wrap_gnorm.zpp_inner.x = e.gnormx;
									e.wrap_gnorm.zpp_inner.y = e.gnormy;
								}
								e.tp0 = e.gp0.y * e.gnormx - e.gp0.x * e.gnormy;
								e.tp1 = e.gp1.y * e.gnormx - e.gp1.x * e.gnormy;
								u = v;
								cx_ite3 = cx_ite3.next;
							}
							var v1 = _this2.gverts.next;
							var e1 = ite.elt;
							ite = ite.next;
							e1.gp0 = u;
							e1.gp1 = v1;
							e1.gnormx = _this2.body.axisy * e1.lnormx - _this2.body.axisx * e1.lnormy;
							e1.gnormy = e1.lnormx * _this2.body.axisx + e1.lnormy * _this2.body.axisy;
							e1.gprojection = _this2.body.posx * e1.gnormx + _this2.body.posy * e1.gnormy + e1.lprojection;
							if(e1.wrap_gnorm != null) {
								e1.wrap_gnorm.zpp_inner.x = e1.gnormx;
								e1.wrap_gnorm.zpp_inner.y = e1.gnormy;
							}
							e1.tp0 = e1.gp0.y * e1.gnormx - e1.gp0.x * e1.gnormy;
							e1.tp1 = e1.gp1.y * e1.gnormx - e1.gp1.x * e1.gnormy;
						}
					}
				}
				s.validate_sweepRadius();
				if(s.sweepRadius > cur.sweepRadius) {
					cur.sweepRadius = s.sweepRadius;
				}
				cx_ite1 = cx_ite1.next;
			}
			cur.validate_mass();
			cur.validate_inertia();
			if(cur.shapes.head != null) {
				if(cur.shapes.head == null) {
					throw new js__$Boot_HaxeError("Error: Body bounds only makes sense if it contains shapes");
				}
				if(cur.zip_aabb) {
					cur.zip_aabb = false;
					cur.aabb.minx = Infinity;
					cur.aabb.miny = Infinity;
					cur.aabb.maxx = -Infinity;
					cur.aabb.maxy = -Infinity;
					var cx_ite4 = cur.shapes.head;
					while(cx_ite4 != null) {
						var s1 = cx_ite4.elt;
						if(s1.zip_aabb) {
							if(s1.body != null) {
								s1.zip_aabb = false;
								if(s1.type == 0) {
									var _this5 = s1.circle;
									if(_this5.zip_worldCOM) {
										if(_this5.body != null) {
											_this5.zip_worldCOM = false;
											if(_this5.zip_localCOM) {
												_this5.zip_localCOM = false;
												if(_this5.type == 1) {
													var _this6 = _this5.polygon;
													if(_this6.lverts.next == null) {
														throw new js__$Boot_HaxeError("Error: An empty polygon has no meaningful localCOM");
													}
													if(_this6.lverts.next.next == null) {
														_this6.localCOMx = _this6.lverts.next.x;
														_this6.localCOMy = _this6.lverts.next.y;
													} else if(_this6.lverts.next.next.next == null) {
														_this6.localCOMx = _this6.lverts.next.x;
														_this6.localCOMy = _this6.lverts.next.y;
														var t = 1.0;
														_this6.localCOMx += _this6.lverts.next.next.x * t;
														_this6.localCOMy += _this6.lverts.next.next.y * t;
														var t1 = 0.5;
														_this6.localCOMx *= t1;
														_this6.localCOMy *= t1;
													} else {
														_this6.localCOMx = 0;
														_this6.localCOMy = 0;
														var area = 0.0;
														var cx_ite5 = _this6.lverts.next;
														var u1 = cx_ite5;
														cx_ite5 = cx_ite5.next;
														var v2 = cx_ite5;
														cx_ite5 = cx_ite5.next;
														while(cx_ite5 != null) {
															var w = cx_ite5;
															area += v2.x * (w.y - u1.y);
															var cf = w.y * v2.x - w.x * v2.y;
															_this6.localCOMx += (v2.x + w.x) * cf;
															_this6.localCOMy += (v2.y + w.y) * cf;
															u1 = v2;
															v2 = w;
															cx_ite5 = cx_ite5.next;
														}
														cx_ite5 = _this6.lverts.next;
														var w1 = cx_ite5;
														area += v2.x * (w1.y - u1.y);
														var cf1 = w1.y * v2.x - w1.x * v2.y;
														_this6.localCOMx += (v2.x + w1.x) * cf1;
														_this6.localCOMy += (v2.y + w1.y) * cf1;
														u1 = v2;
														v2 = w1;
														cx_ite5 = cx_ite5.next;
														var w2 = cx_ite5;
														area += v2.x * (w2.y - u1.y);
														var cf2 = w2.y * v2.x - w2.x * v2.y;
														_this6.localCOMx += (v2.x + w2.x) * cf2;
														_this6.localCOMy += (v2.y + w2.y) * cf2;
														area = 1 / (3 * area);
														var t2 = area;
														_this6.localCOMx *= t2;
														_this6.localCOMy *= t2;
													}
												}
												if(_this5.wrap_localCOM != null) {
													_this5.wrap_localCOM.zpp_inner.x = _this5.localCOMx;
													_this5.wrap_localCOM.zpp_inner.y = _this5.localCOMy;
												}
											}
											var _this7 = _this5.body;
											if(_this7.zip_axis) {
												_this7.zip_axis = false;
												_this7.axisx = Math.sin(_this7.rot);
												_this7.axisy = Math.cos(_this7.rot);
											}
											_this5.worldCOMx = _this5.body.posx + (_this5.body.axisy * _this5.localCOMx - _this5.body.axisx * _this5.localCOMy);
											_this5.worldCOMy = _this5.body.posy + (_this5.localCOMx * _this5.body.axisx + _this5.localCOMy * _this5.body.axisy);
										}
									}
									var rx = _this5.radius;
									var ry = _this5.radius;
									_this5.aabb.minx = _this5.worldCOMx - rx;
									_this5.aabb.miny = _this5.worldCOMy - ry;
									_this5.aabb.maxx = _this5.worldCOMx + rx;
									_this5.aabb.maxy = _this5.worldCOMy + ry;
								} else {
									var _this8 = s1.polygon;
									if(_this8.zip_gverts) {
										if(_this8.body != null) {
											_this8.zip_gverts = false;
											_this8.validate_lverts();
											var _this9 = _this8.body;
											if(_this9.zip_axis) {
												_this9.zip_axis = false;
												_this9.axisx = Math.sin(_this9.rot);
												_this9.axisy = Math.cos(_this9.rot);
											}
											var li1 = _this8.lverts.next;
											var cx_ite6 = _this8.gverts.next;
											while(cx_ite6 != null) {
												var g1 = cx_ite6;
												var l1 = li1;
												li1 = li1.next;
												g1.x = _this8.body.posx + (_this8.body.axisy * l1.x - _this8.body.axisx * l1.y);
												g1.y = _this8.body.posy + (l1.x * _this8.body.axisx + l1.y * _this8.body.axisy);
												cx_ite6 = cx_ite6.next;
											}
										}
									}
									if(_this8.lverts.next == null) {
										throw new js__$Boot_HaxeError("Error: An empty polygon has no meaningful bounds");
									}
									var p0 = _this8.gverts.next;
									_this8.aabb.minx = p0.x;
									_this8.aabb.miny = p0.y;
									_this8.aabb.maxx = p0.x;
									_this8.aabb.maxy = p0.y;
									var cx_ite7 = _this8.gverts.next.next;
									while(cx_ite7 != null) {
										var p = cx_ite7;
										if(p.x < _this8.aabb.minx) {
											_this8.aabb.minx = p.x;
										}
										if(p.x > _this8.aabb.maxx) {
											_this8.aabb.maxx = p.x;
										}
										if(p.y < _this8.aabb.miny) {
											_this8.aabb.miny = p.y;
										}
										if(p.y > _this8.aabb.maxy) {
											_this8.aabb.maxy = p.y;
										}
										cx_ite7 = cx_ite7.next;
									}
								}
							}
						}
						var _this10 = cur.aabb;
						var x = s1.aabb;
						if(x.minx < _this10.minx) {
							_this10.minx = x.minx;
						}
						if(x.maxx > _this10.maxx) {
							_this10.maxx = x.maxx;
						}
						if(x.miny < _this10.miny) {
							_this10.miny = x.miny;
						}
						if(x.maxy > _this10.maxy) {
							_this10.maxy = x.maxy;
						}
						cx_ite4 = cx_ite4.next;
					}
				}
				cur.validate_worldCOM();
			}
			cur.validate_gravMass();
			if(cur.zip_axis) {
				cur.zip_axis = false;
				cur.axisx = Math.sin(cur.rot);
				cur.axisy = Math.cos(cur.rot);
			}
			if(!cur.nomove && cur.type == 2 && cur.mass == 0) {
				throw new js__$Boot_HaxeError("Error: Dynamic Body cannot be simulated with 0 mass unless allowMovement is false");
			}
			if(!cur.norotate && cur.type == 2 && cur.inertia == 0) {
				throw new js__$Boot_HaxeError("Error: Dynamic Body cannot be simulated with 0 inertia unless allowRotation is false");
			}
			if(cur.component.woken && cur.cbSet != null) {
				var cx_ite8 = cur.cbSet.bodylisteners.head;
				while(cx_ite8 != null) {
					var i = cx_ite8.elt;
					if(i.event != 2) {
						cx_ite8 = cx_ite8.next;
						continue;
					}
					var cb1 = this.push_callback(i);
					cb1.event = 2;
					cb1.body = cur;
					cx_ite8 = cx_ite8.next;
				}
			}
			cur.component.woken = false;
			var cx_ite9 = cur.shapes.head;
			while(cx_ite9 != null) {
				var shape = cx_ite9.elt;
				this.bphase.sync(shape);
				cx_ite9 = cx_ite9.next;
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite10 = this.kinematics.head;
		while(cx_ite10 != null) {
			var cur1 = cx_ite10.elt;
			cur1.sweepRadius = 0;
			var cx_ite11 = cur1.shapes.head;
			while(cx_ite11 != null) {
				var s2 = cx_ite11.elt;
				if(s2.type == 1) {
					var _this11 = s2.polygon;
					if(_this11.zip_sanitation) {
						_this11.zip_sanitation = false;
						_this11.splice_collinear_real();
					}
					var res1 = s2.polygon.valid();
					if(zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID == null) {
						zpp_$nape_util_ZPP_$Flags.internal = true;
						zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID = new nape_shape_ValidationResult();
						zpp_$nape_util_ZPP_$Flags.internal = false;
					}
					if(res1 != zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID) {
						throw new js__$Boot_HaxeError("Error: Cannot simulate with an invalid Polygon : " + s2.polygon.outer.toString() + " is invalid : " + res1.toString());
					}
					var _this12 = s2.polygon;
					if(_this12.zip_gaxi) {
						if(_this12.body != null) {
							_this12.zip_gaxi = false;
							_this12.validate_laxi();
							var _this13 = _this12.body;
							if(_this13.zip_axis) {
								_this13.zip_axis = false;
								_this13.axisx = Math.sin(_this13.rot);
								_this13.axisy = Math.cos(_this13.rot);
							}
							if(_this12.zip_gverts) {
								if(_this12.body != null) {
									_this12.zip_gverts = false;
									_this12.validate_lverts();
									var _this14 = _this12.body;
									if(_this14.zip_axis) {
										_this14.zip_axis = false;
										_this14.axisx = Math.sin(_this14.rot);
										_this14.axisy = Math.cos(_this14.rot);
									}
									var li2 = _this12.lverts.next;
									var cx_ite12 = _this12.gverts.next;
									while(cx_ite12 != null) {
										var g2 = cx_ite12;
										var l2 = li2;
										li2 = li2.next;
										g2.x = _this12.body.posx + (_this12.body.axisy * l2.x - _this12.body.axisx * l2.y);
										g2.y = _this12.body.posy + (l2.x * _this12.body.axisx + l2.y * _this12.body.axisy);
										cx_ite12 = cx_ite12.next;
									}
								}
							}
							var ite1 = _this12.edges.head;
							var cx_ite13 = _this12.gverts.next;
							var u2 = cx_ite13;
							cx_ite13 = cx_ite13.next;
							while(cx_ite13 != null) {
								var v3 = cx_ite13;
								var e2 = ite1.elt;
								ite1 = ite1.next;
								e2.gp0 = u2;
								e2.gp1 = v3;
								e2.gnormx = _this12.body.axisy * e2.lnormx - _this12.body.axisx * e2.lnormy;
								e2.gnormy = e2.lnormx * _this12.body.axisx + e2.lnormy * _this12.body.axisy;
								e2.gprojection = _this12.body.posx * e2.gnormx + _this12.body.posy * e2.gnormy + e2.lprojection;
								if(e2.wrap_gnorm != null) {
									e2.wrap_gnorm.zpp_inner.x = e2.gnormx;
									e2.wrap_gnorm.zpp_inner.y = e2.gnormy;
								}
								e2.tp0 = e2.gp0.y * e2.gnormx - e2.gp0.x * e2.gnormy;
								e2.tp1 = e2.gp1.y * e2.gnormx - e2.gp1.x * e2.gnormy;
								u2 = v3;
								cx_ite13 = cx_ite13.next;
							}
							var v4 = _this12.gverts.next;
							var e3 = ite1.elt;
							ite1 = ite1.next;
							e3.gp0 = u2;
							e3.gp1 = v4;
							e3.gnormx = _this12.body.axisy * e3.lnormx - _this12.body.axisx * e3.lnormy;
							e3.gnormy = e3.lnormx * _this12.body.axisx + e3.lnormy * _this12.body.axisy;
							e3.gprojection = _this12.body.posx * e3.gnormx + _this12.body.posy * e3.gnormy + e3.lprojection;
							if(e3.wrap_gnorm != null) {
								e3.wrap_gnorm.zpp_inner.x = e3.gnormx;
								e3.wrap_gnorm.zpp_inner.y = e3.gnormy;
							}
							e3.tp0 = e3.gp0.y * e3.gnormx - e3.gp0.x * e3.gnormy;
							e3.tp1 = e3.gp1.y * e3.gnormx - e3.gp1.x * e3.gnormy;
						}
					}
				}
				s2.validate_sweepRadius();
				if(s2.sweepRadius > cur1.sweepRadius) {
					cur1.sweepRadius = s2.sweepRadius;
				}
				cx_ite11 = cx_ite11.next;
			}
			cur1.validate_mass();
			cur1.validate_inertia();
			if(cur1.shapes.head != null) {
				if(cur1.shapes.head == null) {
					throw new js__$Boot_HaxeError("Error: Body bounds only makes sense if it contains shapes");
				}
				if(cur1.zip_aabb) {
					cur1.zip_aabb = false;
					cur1.aabb.minx = Infinity;
					cur1.aabb.miny = Infinity;
					cur1.aabb.maxx = -Infinity;
					cur1.aabb.maxy = -Infinity;
					var cx_ite14 = cur1.shapes.head;
					while(cx_ite14 != null) {
						var s3 = cx_ite14.elt;
						if(s3.zip_aabb) {
							if(s3.body != null) {
								s3.zip_aabb = false;
								if(s3.type == 0) {
									var _this15 = s3.circle;
									if(_this15.zip_worldCOM) {
										if(_this15.body != null) {
											_this15.zip_worldCOM = false;
											if(_this15.zip_localCOM) {
												_this15.zip_localCOM = false;
												if(_this15.type == 1) {
													var _this16 = _this15.polygon;
													if(_this16.lverts.next == null) {
														throw new js__$Boot_HaxeError("Error: An empty polygon has no meaningful localCOM");
													}
													if(_this16.lverts.next.next == null) {
														_this16.localCOMx = _this16.lverts.next.x;
														_this16.localCOMy = _this16.lverts.next.y;
													} else if(_this16.lverts.next.next.next == null) {
														_this16.localCOMx = _this16.lverts.next.x;
														_this16.localCOMy = _this16.lverts.next.y;
														var t3 = 1.0;
														_this16.localCOMx += _this16.lverts.next.next.x * t3;
														_this16.localCOMy += _this16.lverts.next.next.y * t3;
														var t4 = 0.5;
														_this16.localCOMx *= t4;
														_this16.localCOMy *= t4;
													} else {
														_this16.localCOMx = 0;
														_this16.localCOMy = 0;
														var area1 = 0.0;
														var cx_ite15 = _this16.lverts.next;
														var u3 = cx_ite15;
														cx_ite15 = cx_ite15.next;
														var v5 = cx_ite15;
														cx_ite15 = cx_ite15.next;
														while(cx_ite15 != null) {
															var w3 = cx_ite15;
															area1 += v5.x * (w3.y - u3.y);
															var cf3 = w3.y * v5.x - w3.x * v5.y;
															_this16.localCOMx += (v5.x + w3.x) * cf3;
															_this16.localCOMy += (v5.y + w3.y) * cf3;
															u3 = v5;
															v5 = w3;
															cx_ite15 = cx_ite15.next;
														}
														cx_ite15 = _this16.lverts.next;
														var w4 = cx_ite15;
														area1 += v5.x * (w4.y - u3.y);
														var cf4 = w4.y * v5.x - w4.x * v5.y;
														_this16.localCOMx += (v5.x + w4.x) * cf4;
														_this16.localCOMy += (v5.y + w4.y) * cf4;
														u3 = v5;
														v5 = w4;
														cx_ite15 = cx_ite15.next;
														var w5 = cx_ite15;
														area1 += v5.x * (w5.y - u3.y);
														var cf5 = w5.y * v5.x - w5.x * v5.y;
														_this16.localCOMx += (v5.x + w5.x) * cf5;
														_this16.localCOMy += (v5.y + w5.y) * cf5;
														area1 = 1 / (3 * area1);
														var t5 = area1;
														_this16.localCOMx *= t5;
														_this16.localCOMy *= t5;
													}
												}
												if(_this15.wrap_localCOM != null) {
													_this15.wrap_localCOM.zpp_inner.x = _this15.localCOMx;
													_this15.wrap_localCOM.zpp_inner.y = _this15.localCOMy;
												}
											}
											var _this17 = _this15.body;
											if(_this17.zip_axis) {
												_this17.zip_axis = false;
												_this17.axisx = Math.sin(_this17.rot);
												_this17.axisy = Math.cos(_this17.rot);
											}
											_this15.worldCOMx = _this15.body.posx + (_this15.body.axisy * _this15.localCOMx - _this15.body.axisx * _this15.localCOMy);
											_this15.worldCOMy = _this15.body.posy + (_this15.localCOMx * _this15.body.axisx + _this15.localCOMy * _this15.body.axisy);
										}
									}
									var rx1 = _this15.radius;
									var ry1 = _this15.radius;
									_this15.aabb.minx = _this15.worldCOMx - rx1;
									_this15.aabb.miny = _this15.worldCOMy - ry1;
									_this15.aabb.maxx = _this15.worldCOMx + rx1;
									_this15.aabb.maxy = _this15.worldCOMy + ry1;
								} else {
									var _this18 = s3.polygon;
									if(_this18.zip_gverts) {
										if(_this18.body != null) {
											_this18.zip_gverts = false;
											_this18.validate_lverts();
											var _this19 = _this18.body;
											if(_this19.zip_axis) {
												_this19.zip_axis = false;
												_this19.axisx = Math.sin(_this19.rot);
												_this19.axisy = Math.cos(_this19.rot);
											}
											var li3 = _this18.lverts.next;
											var cx_ite16 = _this18.gverts.next;
											while(cx_ite16 != null) {
												var g3 = cx_ite16;
												var l3 = li3;
												li3 = li3.next;
												g3.x = _this18.body.posx + (_this18.body.axisy * l3.x - _this18.body.axisx * l3.y);
												g3.y = _this18.body.posy + (l3.x * _this18.body.axisx + l3.y * _this18.body.axisy);
												cx_ite16 = cx_ite16.next;
											}
										}
									}
									if(_this18.lverts.next == null) {
										throw new js__$Boot_HaxeError("Error: An empty polygon has no meaningful bounds");
									}
									var p01 = _this18.gverts.next;
									_this18.aabb.minx = p01.x;
									_this18.aabb.miny = p01.y;
									_this18.aabb.maxx = p01.x;
									_this18.aabb.maxy = p01.y;
									var cx_ite17 = _this18.gverts.next.next;
									while(cx_ite17 != null) {
										var p1 = cx_ite17;
										if(p1.x < _this18.aabb.minx) {
											_this18.aabb.minx = p1.x;
										}
										if(p1.x > _this18.aabb.maxx) {
											_this18.aabb.maxx = p1.x;
										}
										if(p1.y < _this18.aabb.miny) {
											_this18.aabb.miny = p1.y;
										}
										if(p1.y > _this18.aabb.maxy) {
											_this18.aabb.maxy = p1.y;
										}
										cx_ite17 = cx_ite17.next;
									}
								}
							}
						}
						var _this20 = cur1.aabb;
						var x1 = s3.aabb;
						if(x1.minx < _this20.minx) {
							_this20.minx = x1.minx;
						}
						if(x1.maxx > _this20.maxx) {
							_this20.maxx = x1.maxx;
						}
						if(x1.miny < _this20.miny) {
							_this20.miny = x1.miny;
						}
						if(x1.maxy > _this20.maxy) {
							_this20.maxy = x1.maxy;
						}
						cx_ite14 = cx_ite14.next;
					}
				}
				cur1.validate_worldCOM();
			}
			cur1.validate_gravMass();
			if(cur1.zip_axis) {
				cur1.zip_axis = false;
				cur1.axisx = Math.sin(cur1.rot);
				cur1.axisy = Math.cos(cur1.rot);
			}
			if(!cur1.nomove && cur1.type == 2 && cur1.mass == 0) {
				throw new js__$Boot_HaxeError("Error: Dynamic Body cannot be simulated with 0 mass unless allowMovement is false");
			}
			if(!cur1.norotate && cur1.type == 2 && cur1.inertia == 0) {
				throw new js__$Boot_HaxeError("Error: Dynamic Body cannot be simulated with 0 inertia unless allowRotation is false");
			}
			var cx_ite18 = cur1.shapes.head;
			while(cx_ite18 != null) {
				var shape1 = cx_ite18.elt;
				this.bphase.sync(shape1);
				cx_ite18 = cx_ite18.next;
			}
			cx_ite10 = cx_ite10.next;
		}
		var cx_ite19 = this.live_constraints.head;
		while(cx_ite19 != null) {
			var con = cx_ite19.elt;
			if(con.active) {
				con.validate();
				if(con.component.woken && con.cbSet != null) {
					var cx_ite20 = con.cbSet.conlisteners.head;
					while(cx_ite20 != null) {
						var i1 = cx_ite20.elt;
						if(i1.event != 2) {
							cx_ite20 = cx_ite20.next;
							continue;
						}
						var cb2 = this.push_callback(i1);
						cb2.event = 2;
						cb2.constraint = con;
						cx_ite20 = cx_ite20.next;
					}
				}
				con.component.woken = false;
			}
			cx_ite19 = cx_ite19.next;
		}
	}
	,updateVel: function(dt) {
		var pre = null;
		var linDrag = 1 - dt * this.global_lin_drag;
		var angDrag = 1 - dt * this.global_ang_drag;
		var cx_ite = this.live.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			if(cur.smass != 0.0) {
				var time = dt * cur.imass;
				cur.velx = linDrag * cur.velx + (cur.forcex + this.gravityx * cur.gravMass) * time;
				cur.vely = linDrag * cur.vely + (cur.forcey + this.gravityy * cur.gravMass) * time;
			}
			if(cur.sinertia != 0.0) {
				var dpx = 0.0;
				var dpy = 0.0;
				dpx = cur.worldCOMx - cur.posx;
				dpy = cur.worldCOMy - cur.posy;
				var torque = cur.torque + (this.gravityy * dpx - this.gravityx * dpy) * cur.gravMass;
				cur.angvel = angDrag * cur.angvel + torque * dt * cur.iinertia;
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
	}
	,updatePos: function(dt) {
		var MAX_VEL = 2 * Math.PI / dt;
		var cx_ite = this.live.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			cur.pre_posx = cur.posx;
			cur.pre_posy = cur.posy;
			cur.pre_rot = cur.rot;
			cur.sweepTime = 0;
			cur.sweep_angvel = cur.angvel % MAX_VEL;
			var delta = dt - cur.sweepTime;
			if(delta != 0) {
				cur.sweepTime = dt;
				var t = delta;
				cur.posx += cur.velx * t;
				cur.posy += cur.vely * t;
				if(cur.angvel != 0) {
					var dr = cur.sweep_angvel * delta;
					cur.rot += dr;
					if(dr * dr > 0.0001) {
						cur.axisx = Math.sin(cur.rot);
						cur.axisy = Math.cos(cur.rot);
					} else {
						var d2 = dr * dr;
						var p = 1 - 0.5 * d2;
						var m = 1 - d2 * d2 / 8;
						var nx = (p * cur.axisx + dr * cur.axisy) * m;
						cur.axisy = (p * cur.axisy - dr * cur.axisx) * m;
						cur.axisx = nx;
					}
				}
			}
			if(!cur.disableCCD) {
				var linThreshold = nape_Config.staticCCDLinearThreshold * cur.sweepRadius;
				var angThreshold = nape_Config.staticCCDAngularThreshold;
				if((cur.velx * cur.velx + cur.vely * cur.vely) * dt * dt > linThreshold * linThreshold || cur.angvel * cur.angvel * dt * dt > angThreshold * angThreshold || cur.type == 3) {
					var angvel = cur.sweep_angvel;
					if(angvel < 0) {
						angvel = -angvel;
					}
					var iangvel = 1 / angvel;
					var cx_ite1 = cur.shapes.head;
					while(cx_ite1 != null) {
						var s = cx_ite1.elt;
						var aabb = s.aabb;
						var minx = aabb.minx;
						var miny = aabb.miny;
						var maxx = aabb.maxx;
						var maxy = aabb.maxy;
						var count = angvel * dt * s.sweepCoef * 0.0083333333333333332 | 0;
						if(count > 8) {
							count = 8;
						}
						var anginc = angvel * dt / count;
						var delta1 = dt - cur.sweepTime;
						if(delta1 != 0) {
							cur.sweepTime = dt;
							var t1 = delta1;
							cur.posx += cur.velx * t1;
							cur.posy += cur.vely * t1;
							if(cur.angvel != 0) {
								var dr1 = cur.sweep_angvel * delta1;
								cur.rot += dr1;
								if(dr1 * dr1 > 0.0001) {
									cur.axisx = Math.sin(cur.rot);
									cur.axisy = Math.cos(cur.rot);
								} else {
									var d21 = dr1 * dr1;
									var p1 = 1 - 0.5 * d21;
									var m1 = 1 - d21 * d21 / 8;
									var nx1 = (p1 * cur.axisx + dr1 * cur.axisy) * m1;
									cur.axisy = (p1 * cur.axisy - dr1 * cur.axisx) * m1;
									cur.axisx = nx1;
								}
							}
						}
						if(s.type == 0) {
							var _this = s.circle;
							_this.worldCOMx = _this.body.posx + (_this.body.axisy * _this.localCOMx - _this.body.axisx * _this.localCOMy);
							_this.worldCOMy = _this.body.posy + (_this.localCOMx * _this.body.axisx + _this.localCOMy * _this.body.axisy);
							_this.aabb.minx = _this.worldCOMx - _this.radius;
							_this.aabb.miny = _this.worldCOMy - _this.radius;
							_this.aabb.maxx = _this.worldCOMx + _this.radius;
							_this.aabb.maxy = _this.worldCOMy + _this.radius;
						} else {
							var _this1 = s.polygon;
							var li = _this1.lverts.next;
							var p0 = _this1.gverts.next;
							var l = li;
							li = li.next;
							p0.x = _this1.body.posx + (_this1.body.axisy * l.x - _this1.body.axisx * l.y);
							p0.y = _this1.body.posy + (l.x * _this1.body.axisx + l.y * _this1.body.axisy);
							_this1.aabb.minx = p0.x;
							_this1.aabb.miny = p0.y;
							_this1.aabb.maxx = p0.x;
							_this1.aabb.maxy = p0.y;
							var cx_ite2 = _this1.gverts.next.next;
							while(cx_ite2 != null) {
								var p2 = cx_ite2;
								var l1 = li;
								li = li.next;
								p2.x = _this1.body.posx + (_this1.body.axisy * l1.x - _this1.body.axisx * l1.y);
								p2.y = _this1.body.posy + (l1.x * _this1.body.axisx + l1.y * _this1.body.axisy);
								if(p2.x < _this1.aabb.minx) {
									_this1.aabb.minx = p2.x;
								}
								if(p2.x > _this1.aabb.maxx) {
									_this1.aabb.maxx = p2.x;
								}
								if(p2.y < _this1.aabb.miny) {
									_this1.aabb.miny = p2.y;
								}
								if(p2.y > _this1.aabb.maxy) {
									_this1.aabb.maxy = p2.y;
								}
								cx_ite2 = cx_ite2.next;
							}
						}
						if(minx < aabb.minx) {
							aabb.minx = minx;
						} else {
							minx = aabb.minx;
						}
						if(miny < aabb.miny) {
							aabb.miny = miny;
						} else {
							miny = aabb.miny;
						}
						if(maxx > aabb.maxx) {
							aabb.maxx = maxx;
						} else {
							maxx = aabb.maxx;
						}
						if(maxy > aabb.maxy) {
							aabb.maxy = maxy;
						} else {
							maxy = aabb.maxy;
						}
						var _g1 = 1;
						var _g = count;
						while(_g1 < _g) {
							var i = _g1++;
							var dt1 = anginc * i * iangvel;
							var delta2 = dt1 - cur.sweepTime;
							if(delta2 != 0) {
								cur.sweepTime = dt1;
								var t2 = delta2;
								cur.posx += cur.velx * t2;
								cur.posy += cur.vely * t2;
								if(cur.angvel != 0) {
									var dr2 = cur.sweep_angvel * delta2;
									cur.rot += dr2;
									if(dr2 * dr2 > 0.0001) {
										cur.axisx = Math.sin(cur.rot);
										cur.axisy = Math.cos(cur.rot);
									} else {
										var d22 = dr2 * dr2;
										var p3 = 1 - 0.5 * d22;
										var m2 = 1 - d22 * d22 / 8;
										var nx2 = (p3 * cur.axisx + dr2 * cur.axisy) * m2;
										cur.axisy = (p3 * cur.axisy - dr2 * cur.axisx) * m2;
										cur.axisx = nx2;
									}
								}
							}
							if(s.type == 0) {
								var _this2 = s.circle;
								_this2.worldCOMx = _this2.body.posx + (_this2.body.axisy * _this2.localCOMx - _this2.body.axisx * _this2.localCOMy);
								_this2.worldCOMy = _this2.body.posy + (_this2.localCOMx * _this2.body.axisx + _this2.localCOMy * _this2.body.axisy);
								_this2.aabb.minx = _this2.worldCOMx - _this2.radius;
								_this2.aabb.miny = _this2.worldCOMy - _this2.radius;
								_this2.aabb.maxx = _this2.worldCOMx + _this2.radius;
								_this2.aabb.maxy = _this2.worldCOMy + _this2.radius;
							} else {
								var _this3 = s.polygon;
								var li1 = _this3.lverts.next;
								var p01 = _this3.gverts.next;
								var l2 = li1;
								li1 = li1.next;
								p01.x = _this3.body.posx + (_this3.body.axisy * l2.x - _this3.body.axisx * l2.y);
								p01.y = _this3.body.posy + (l2.x * _this3.body.axisx + l2.y * _this3.body.axisy);
								_this3.aabb.minx = p01.x;
								_this3.aabb.miny = p01.y;
								_this3.aabb.maxx = p01.x;
								_this3.aabb.maxy = p01.y;
								var cx_ite3 = _this3.gverts.next.next;
								while(cx_ite3 != null) {
									var p4 = cx_ite3;
									var l3 = li1;
									li1 = li1.next;
									p4.x = _this3.body.posx + (_this3.body.axisy * l3.x - _this3.body.axisx * l3.y);
									p4.y = _this3.body.posy + (l3.x * _this3.body.axisx + l3.y * _this3.body.axisy);
									if(p4.x < _this3.aabb.minx) {
										_this3.aabb.minx = p4.x;
									}
									if(p4.x > _this3.aabb.maxx) {
										_this3.aabb.maxx = p4.x;
									}
									if(p4.y < _this3.aabb.miny) {
										_this3.aabb.miny = p4.y;
									}
									if(p4.y > _this3.aabb.maxy) {
										_this3.aabb.maxy = p4.y;
									}
									cx_ite3 = cx_ite3.next;
								}
							}
							if(minx < aabb.minx) {
								aabb.minx = minx;
							} else {
								minx = aabb.minx;
							}
							if(miny < aabb.miny) {
								aabb.miny = miny;
							} else {
								miny = aabb.miny;
							}
							if(maxx > aabb.maxx) {
								aabb.maxx = maxx;
							} else {
								maxx = aabb.maxx;
							}
							if(maxy > aabb.maxy) {
								aabb.maxy = maxy;
							} else {
								maxy = aabb.maxy;
							}
						}
						this.bphase.sync(s);
						cx_ite1 = cx_ite1.next;
					}
					cur.sweepFrozen = false;
					if(cur.type == 2 && cur.bulletEnabled) {
						var linThreshold2 = nape_Config.bulletCCDLinearThreshold * cur.sweepRadius;
						var angThreshold2 = nape_Config.bulletCCDAngularThreshold;
						if((cur.velx * cur.velx + cur.vely * cur.vely) * dt * dt > linThreshold2 * linThreshold2 || cur.angvel * cur.angvel * dt * dt > angThreshold2 * angThreshold2) {
							cur.bullet = true;
						}
					}
				} else {
					cur.sweepFrozen = true;
					cur.bullet = false;
				}
			} else {
				cur.sweepFrozen = true;
				cur.bullet = false;
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite4 = this.kinematics.head;
		while(cx_ite4 != null) {
			var cur1 = cx_ite4.elt;
			cur1.pre_posx = cur1.posx;
			cur1.pre_posy = cur1.posy;
			cur1.pre_rot = cur1.rot;
			cur1.sweepTime = 0;
			cur1.sweep_angvel = cur1.angvel % MAX_VEL;
			var delta3 = dt - cur1.sweepTime;
			if(delta3 != 0) {
				cur1.sweepTime = dt;
				var t3 = delta3;
				cur1.posx += cur1.velx * t3;
				cur1.posy += cur1.vely * t3;
				if(cur1.angvel != 0) {
					var dr3 = cur1.sweep_angvel * delta3;
					cur1.rot += dr3;
					if(dr3 * dr3 > 0.0001) {
						cur1.axisx = Math.sin(cur1.rot);
						cur1.axisy = Math.cos(cur1.rot);
					} else {
						var d23 = dr3 * dr3;
						var p5 = 1 - 0.5 * d23;
						var m3 = 1 - d23 * d23 / 8;
						var nx3 = (p5 * cur1.axisx + dr3 * cur1.axisy) * m3;
						cur1.axisy = (p5 * cur1.axisy - dr3 * cur1.axisx) * m3;
						cur1.axisx = nx3;
					}
				}
			}
			if(!cur1.disableCCD) {
				var linThreshold1 = nape_Config.staticCCDLinearThreshold * cur1.sweepRadius;
				var angThreshold1 = nape_Config.staticCCDAngularThreshold;
				if((cur1.velx * cur1.velx + cur1.vely * cur1.vely) * dt * dt > linThreshold1 * linThreshold1 || cur1.angvel * cur1.angvel * dt * dt > angThreshold1 * angThreshold1 || cur1.type == 3) {
					var angvel1 = cur1.sweep_angvel;
					if(angvel1 < 0) {
						angvel1 = -angvel1;
					}
					var iangvel1 = 1 / angvel1;
					var cx_ite5 = cur1.shapes.head;
					while(cx_ite5 != null) {
						var s1 = cx_ite5.elt;
						var aabb1 = s1.aabb;
						var minx1 = aabb1.minx;
						var miny1 = aabb1.miny;
						var maxx1 = aabb1.maxx;
						var maxy1 = aabb1.maxy;
						var count1 = angvel1 * dt * s1.sweepCoef * 0.0083333333333333332 | 0;
						if(count1 > 8) {
							count1 = 8;
						}
						var anginc1 = angvel1 * dt / count1;
						var delta4 = dt - cur1.sweepTime;
						if(delta4 != 0) {
							cur1.sweepTime = dt;
							var t4 = delta4;
							cur1.posx += cur1.velx * t4;
							cur1.posy += cur1.vely * t4;
							if(cur1.angvel != 0) {
								var dr4 = cur1.sweep_angvel * delta4;
								cur1.rot += dr4;
								if(dr4 * dr4 > 0.0001) {
									cur1.axisx = Math.sin(cur1.rot);
									cur1.axisy = Math.cos(cur1.rot);
								} else {
									var d24 = dr4 * dr4;
									var p6 = 1 - 0.5 * d24;
									var m4 = 1 - d24 * d24 / 8;
									var nx4 = (p6 * cur1.axisx + dr4 * cur1.axisy) * m4;
									cur1.axisy = (p6 * cur1.axisy - dr4 * cur1.axisx) * m4;
									cur1.axisx = nx4;
								}
							}
						}
						if(s1.type == 0) {
							var _this4 = s1.circle;
							_this4.worldCOMx = _this4.body.posx + (_this4.body.axisy * _this4.localCOMx - _this4.body.axisx * _this4.localCOMy);
							_this4.worldCOMy = _this4.body.posy + (_this4.localCOMx * _this4.body.axisx + _this4.localCOMy * _this4.body.axisy);
							_this4.aabb.minx = _this4.worldCOMx - _this4.radius;
							_this4.aabb.miny = _this4.worldCOMy - _this4.radius;
							_this4.aabb.maxx = _this4.worldCOMx + _this4.radius;
							_this4.aabb.maxy = _this4.worldCOMy + _this4.radius;
						} else {
							var _this5 = s1.polygon;
							var li2 = _this5.lverts.next;
							var p02 = _this5.gverts.next;
							var l4 = li2;
							li2 = li2.next;
							p02.x = _this5.body.posx + (_this5.body.axisy * l4.x - _this5.body.axisx * l4.y);
							p02.y = _this5.body.posy + (l4.x * _this5.body.axisx + l4.y * _this5.body.axisy);
							_this5.aabb.minx = p02.x;
							_this5.aabb.miny = p02.y;
							_this5.aabb.maxx = p02.x;
							_this5.aabb.maxy = p02.y;
							var cx_ite6 = _this5.gverts.next.next;
							while(cx_ite6 != null) {
								var p7 = cx_ite6;
								var l5 = li2;
								li2 = li2.next;
								p7.x = _this5.body.posx + (_this5.body.axisy * l5.x - _this5.body.axisx * l5.y);
								p7.y = _this5.body.posy + (l5.x * _this5.body.axisx + l5.y * _this5.body.axisy);
								if(p7.x < _this5.aabb.minx) {
									_this5.aabb.minx = p7.x;
								}
								if(p7.x > _this5.aabb.maxx) {
									_this5.aabb.maxx = p7.x;
								}
								if(p7.y < _this5.aabb.miny) {
									_this5.aabb.miny = p7.y;
								}
								if(p7.y > _this5.aabb.maxy) {
									_this5.aabb.maxy = p7.y;
								}
								cx_ite6 = cx_ite6.next;
							}
						}
						if(minx1 < aabb1.minx) {
							aabb1.minx = minx1;
						} else {
							minx1 = aabb1.minx;
						}
						if(miny1 < aabb1.miny) {
							aabb1.miny = miny1;
						} else {
							miny1 = aabb1.miny;
						}
						if(maxx1 > aabb1.maxx) {
							aabb1.maxx = maxx1;
						} else {
							maxx1 = aabb1.maxx;
						}
						if(maxy1 > aabb1.maxy) {
							aabb1.maxy = maxy1;
						} else {
							maxy1 = aabb1.maxy;
						}
						var _g11 = 1;
						var _g2 = count1;
						while(_g11 < _g2) {
							var i1 = _g11++;
							var dt2 = anginc1 * i1 * iangvel1;
							var delta5 = dt2 - cur1.sweepTime;
							if(delta5 != 0) {
								cur1.sweepTime = dt2;
								var t5 = delta5;
								cur1.posx += cur1.velx * t5;
								cur1.posy += cur1.vely * t5;
								if(cur1.angvel != 0) {
									var dr5 = cur1.sweep_angvel * delta5;
									cur1.rot += dr5;
									if(dr5 * dr5 > 0.0001) {
										cur1.axisx = Math.sin(cur1.rot);
										cur1.axisy = Math.cos(cur1.rot);
									} else {
										var d25 = dr5 * dr5;
										var p8 = 1 - 0.5 * d25;
										var m5 = 1 - d25 * d25 / 8;
										var nx5 = (p8 * cur1.axisx + dr5 * cur1.axisy) * m5;
										cur1.axisy = (p8 * cur1.axisy - dr5 * cur1.axisx) * m5;
										cur1.axisx = nx5;
									}
								}
							}
							if(s1.type == 0) {
								var _this6 = s1.circle;
								_this6.worldCOMx = _this6.body.posx + (_this6.body.axisy * _this6.localCOMx - _this6.body.axisx * _this6.localCOMy);
								_this6.worldCOMy = _this6.body.posy + (_this6.localCOMx * _this6.body.axisx + _this6.localCOMy * _this6.body.axisy);
								_this6.aabb.minx = _this6.worldCOMx - _this6.radius;
								_this6.aabb.miny = _this6.worldCOMy - _this6.radius;
								_this6.aabb.maxx = _this6.worldCOMx + _this6.radius;
								_this6.aabb.maxy = _this6.worldCOMy + _this6.radius;
							} else {
								var _this7 = s1.polygon;
								var li3 = _this7.lverts.next;
								var p03 = _this7.gverts.next;
								var l6 = li3;
								li3 = li3.next;
								p03.x = _this7.body.posx + (_this7.body.axisy * l6.x - _this7.body.axisx * l6.y);
								p03.y = _this7.body.posy + (l6.x * _this7.body.axisx + l6.y * _this7.body.axisy);
								_this7.aabb.minx = p03.x;
								_this7.aabb.miny = p03.y;
								_this7.aabb.maxx = p03.x;
								_this7.aabb.maxy = p03.y;
								var cx_ite7 = _this7.gverts.next.next;
								while(cx_ite7 != null) {
									var p9 = cx_ite7;
									var l7 = li3;
									li3 = li3.next;
									p9.x = _this7.body.posx + (_this7.body.axisy * l7.x - _this7.body.axisx * l7.y);
									p9.y = _this7.body.posy + (l7.x * _this7.body.axisx + l7.y * _this7.body.axisy);
									if(p9.x < _this7.aabb.minx) {
										_this7.aabb.minx = p9.x;
									}
									if(p9.x > _this7.aabb.maxx) {
										_this7.aabb.maxx = p9.x;
									}
									if(p9.y < _this7.aabb.miny) {
										_this7.aabb.miny = p9.y;
									}
									if(p9.y > _this7.aabb.maxy) {
										_this7.aabb.maxy = p9.y;
									}
									cx_ite7 = cx_ite7.next;
								}
							}
							if(minx1 < aabb1.minx) {
								aabb1.minx = minx1;
							} else {
								minx1 = aabb1.minx;
							}
							if(miny1 < aabb1.miny) {
								aabb1.miny = miny1;
							} else {
								miny1 = aabb1.miny;
							}
							if(maxx1 > aabb1.maxx) {
								aabb1.maxx = maxx1;
							} else {
								maxx1 = aabb1.maxx;
							}
							if(maxy1 > aabb1.maxy) {
								aabb1.maxy = maxy1;
							} else {
								maxy1 = aabb1.maxy;
							}
						}
						this.bphase.sync(s1);
						cx_ite5 = cx_ite5.next;
					}
					cur1.sweepFrozen = false;
					if(cur1.type == 2 && cur1.bulletEnabled) {
						var linThreshold21 = nape_Config.bulletCCDLinearThreshold * cur1.sweepRadius;
						var angThreshold21 = nape_Config.bulletCCDAngularThreshold;
						if((cur1.velx * cur1.velx + cur1.vely * cur1.vely) * dt * dt > linThreshold21 * linThreshold21 || cur1.angvel * cur1.angvel * dt * dt > angThreshold21 * angThreshold21) {
							cur1.bullet = true;
						}
					}
				} else {
					cur1.sweepFrozen = true;
					cur1.bullet = false;
				}
			} else {
				cur1.sweepFrozen = true;
				cur1.bullet = false;
			}
			cx_ite4 = cx_ite4.next;
		}
	}
	,presteparb: function(arb,dt,cont) {
		if(cont == null) {
			cont = false;
		}
		var _gthis = this;
		if(!arb.cleared && (arb.b1.component.sleeping && arb.b2.component.sleeping)) {
			arb.sleep_stamp = this.stamp;
			arb.sleeping = true;
			return true;
		}
		if(!arb.cleared || arb.present != 0 || arb.intchange) {
			var endcb = !cont && arb.up_stamp == this.stamp - 1 && !arb.cleared && !arb.intchange;
			var begcb = arb.fresh && !arb.cleared && !arb.intchange;
			if(endcb) {
				arb.endGenerated = this.stamp;
			}
			if(begcb || endcb || arb.cleared || arb.intchange) {
				var s1 = arb.ws1;
				var s2 = arb.ws2;
				var _this = this.mrca1;
				while(_this.head != null) {
					var ret = _this.head;
					_this.head = ret.next;
					var o = ret;
					o.elt = null;
					o.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = o;
					if(_this.head == null) {
						_this.pushmod = true;
					}
					_this.modified = true;
					_this.length--;
				}
				_this.pushmod = true;
				var _this1 = this.mrca2;
				while(_this1.head != null) {
					var ret1 = _this1.head;
					_this1.head = ret1.next;
					var o1 = ret1;
					o1.elt = null;
					o1.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = o1;
					if(_this1.head == null) {
						_this1.pushmod = true;
					}
					_this1.modified = true;
					_this1.length--;
				}
				_this1.pushmod = true;
				if(s1.cbSet != null) {
					var _this2 = this.mrca1;
					var ret2;
					if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
						ret2 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
					} else {
						ret2 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret2.next;
						ret2.next = null;
					}
					ret2.elt = s1;
					var temp = ret2;
					temp.next = _this2.head;
					_this2.head = temp;
					_this2.modified = true;
					_this2.length++;
				}
				if(s1.body.cbSet != null) {
					var _this3 = this.mrca1;
					var o2 = s1.body;
					var ret3;
					if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
						ret3 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
					} else {
						ret3 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret3.next;
						ret3.next = null;
					}
					ret3.elt = o2;
					var temp1 = ret3;
					temp1.next = _this3.head;
					_this3.head = temp1;
					_this3.modified = true;
					_this3.length++;
				}
				if(s2.cbSet != null) {
					var _this4 = this.mrca2;
					var ret4;
					if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
						ret4 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
					} else {
						ret4 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret4.next;
						ret4.next = null;
					}
					ret4.elt = s2;
					var temp2 = ret4;
					temp2.next = _this4.head;
					_this4.head = temp2;
					_this4.modified = true;
					_this4.length++;
				}
				if(s2.body.cbSet != null) {
					var _this5 = this.mrca2;
					var o3 = s2.body;
					var ret5;
					if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
						ret5 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
					} else {
						ret5 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret5.next;
						ret5.next = null;
					}
					ret5.elt = o3;
					var temp3 = ret5;
					temp3.next = _this5.head;
					_this5.head = temp3;
					_this5.modified = true;
					_this5.length++;
				}
				var c1 = s1.body.compound;
				var c2 = s2.body.compound;
				while(c1 != c2) {
					var d1 = c1 == null ? 0 : c1.depth;
					var d2 = c2 == null ? 0 : c2.depth;
					if(d1 < d2) {
						if(c2.cbSet != null) {
							var _this6 = this.mrca2;
							var ret6;
							if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
								ret6 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
							} else {
								ret6 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret6.next;
								ret6.next = null;
							}
							ret6.elt = c2;
							var temp4 = ret6;
							temp4.next = _this6.head;
							_this6.head = temp4;
							_this6.modified = true;
							_this6.length++;
						}
						c2 = c2.compound;
					} else {
						if(c1.cbSet != null) {
							var _this7 = this.mrca1;
							var ret7;
							if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
								ret7 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
							} else {
								ret7 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret7.next;
								ret7.next = null;
							}
							ret7.elt = c1;
							var temp5 = ret7;
							temp5.next = _this7.head;
							_this7.head = temp5;
							_this7.modified = true;
							_this7.length++;
						}
						c1 = c1.compound;
					}
				}
				var cx_ite = this.mrca1.head;
				while(cx_ite != null) {
					var i1 = cx_ite.elt;
					var cx_ite1 = this.mrca2.head;
					while(cx_ite1 != null) {
						var i2 = cx_ite1.elt;
						var cb1 = i1.cbSet;
						var cb2 = i2.cbSet;
						var _this8 = cb1.manager;
						var ret8 = null;
						var pairs = cb1.cbpairs.length < cb2.cbpairs.length ? cb1.cbpairs : cb2.cbpairs;
						var cx_ite2 = pairs.head;
						while(cx_ite2 != null) {
							var p = cx_ite2.elt;
							if(p.a == cb1 && p.b == cb2 || p.a == cb2 && p.b == cb1) {
								ret8 = p;
								break;
							}
							cx_ite2 = cx_ite2.next;
						}
						if(ret8 == null) {
							var ret9;
							if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
								ret9 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
							} else {
								ret9 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
								zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret9.next;
								ret9.next = null;
							}
							ret9.zip_listeners = true;
							if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(cb1,cb2)) {
								ret9.a = cb1;
								ret9.b = cb2;
							} else {
								ret9.a = cb2;
								ret9.b = cb1;
							}
							ret8 = ret9;
							cb1.cbpairs.add(ret8);
							if(cb2 != cb1) {
								cb2.cbpairs.add(ret8);
							}
						}
						if(ret8.zip_listeners) {
							ret8.zip_listeners = false;
							ret8.__validate();
						}
						if(ret8.listeners.head == null) {
							cx_ite1 = cx_ite1.next;
							continue;
						}
						var callbackset = zpp_$nape_phys_ZPP_$Interactor.get(i1,i2);
						if(begcb || arb.intchange) {
							if(callbackset == null) {
								callbackset = zpp_$nape_space_ZPP_$CallbackSet.get(i1,i2);
								this.add_callbackset(callbackset);
							}
							var _this9 = cb1.manager;
							var ret10 = null;
							var pairs1 = cb1.cbpairs.length < cb2.cbpairs.length ? cb1.cbpairs : cb2.cbpairs;
							var cx_ite3 = pairs1.head;
							while(cx_ite3 != null) {
								var p1 = cx_ite3.elt;
								if(p1.a == cb1 && p1.b == cb2 || p1.a == cb2 && p1.b == cb1) {
									ret10 = p1;
									break;
								}
								cx_ite3 = cx_ite3.next;
							}
							if(ret10 == null) {
								var ret11;
								if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
									ret11 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
								} else {
									ret11 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
									zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret11.next;
									ret11.next = null;
								}
								ret11.zip_listeners = true;
								if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(cb1,cb2)) {
									ret11.a = cb1;
									ret11.b = cb2;
								} else {
									ret11.a = cb2;
									ret11.b = cb1;
								}
								ret10 = ret11;
								cb1.cbpairs.add(ret10);
								if(cb2 != cb1) {
									cb2.cbpairs.add(ret10);
								}
							}
							if(ret10.zip_listeners) {
								ret10.zip_listeners = false;
								ret10.__validate();
							}
							var cx_ite4 = ret10.listeners.head;
							while(cx_ite4 != null) {
								var x = cx_ite4.elt;
								if(x.event == 0) {
									if((x.itype & arb.type) != 0 && callbackset.empty_arb(x.itype)) {
										var cb = _gthis.push_callback(x);
										cb.event = 0;
										var o11 = callbackset.int1;
										var o21 = callbackset.int2;
										var tmp;
										var _this10 = x.options1;
										var xs = o11.cbTypes;
										if(_this10.nonemptyintersection(xs,_this10.includes) && !_this10.nonemptyintersection(xs,_this10.excludes)) {
											var _this11 = x.options2;
											var xs1 = o21.cbTypes;
											if(_this11.nonemptyintersection(xs1,_this11.includes)) {
												tmp = !_this11.nonemptyintersection(xs1,_this11.excludes);
											} else {
												tmp = false;
											}
										} else {
											tmp = false;
										}
										if(tmp) {
											cb.int1 = o11;
											cb.int2 = o21;
										} else {
											cb.int1 = o21;
											cb.int2 = o11;
										}
										cb.set = callbackset;
									}
								}
								cx_ite4 = cx_ite4.next;
							}
							var tmp1;
							var ret12;
							ret12 = false;
							var cx_ite5 = callbackset.arbiters.head;
							while(cx_ite5 != null) {
								var npite = cx_ite5.elt;
								if(npite == arb) {
									ret12 = true;
									break;
								}
								cx_ite5 = cx_ite5.next;
							}
							if(!ret12) {
								var _this12 = callbackset.arbiters;
								var ret13;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool == null) {
									ret13 = new zpp_$nape_util_ZNPNode_$ZPP_$Arbiter();
								} else {
									ret13 = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = ret13.next;
									ret13.next = null;
								}
								ret13.elt = arb;
								var temp6 = ret13;
								temp6.next = _this12.head;
								_this12.head = temp6;
								_this12.modified = true;
								_this12.length++;
								tmp1 = true;
							} else {
								tmp1 = false;
							}
							if(tmp1) {
								arb.present++;
							}
						} else {
							arb.present--;
							callbackset.remove_arb(arb);
							var _this13 = cb1.manager;
							var ret14 = null;
							var pairs2 = cb1.cbpairs.length < cb2.cbpairs.length ? cb1.cbpairs : cb2.cbpairs;
							var cx_ite6 = pairs2.head;
							while(cx_ite6 != null) {
								var p2 = cx_ite6.elt;
								if(p2.a == cb1 && p2.b == cb2 || p2.a == cb2 && p2.b == cb1) {
									ret14 = p2;
									break;
								}
								cx_ite6 = cx_ite6.next;
							}
							if(ret14 == null) {
								var ret15;
								if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
									ret15 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
								} else {
									ret15 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
									zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret15.next;
									ret15.next = null;
								}
								ret15.zip_listeners = true;
								if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(cb1,cb2)) {
									ret15.a = cb1;
									ret15.b = cb2;
								} else {
									ret15.a = cb2;
									ret15.b = cb1;
								}
								ret14 = ret15;
								cb1.cbpairs.add(ret14);
								if(cb2 != cb1) {
									cb2.cbpairs.add(ret14);
								}
							}
							if(ret14.zip_listeners) {
								ret14.zip_listeners = false;
								ret14.__validate();
							}
							var cx_ite7 = ret14.listeners.head;
							while(cx_ite7 != null) {
								var x1 = cx_ite7.elt;
								if(x1.event == 1) {
									if((x1.itype & arb.type) != 0 && callbackset.empty_arb(x1.itype)) {
										var cb3 = _gthis.push_callback(x1);
										cb3.event = 1;
										var o12 = callbackset.int1;
										var o22 = callbackset.int2;
										var tmp2;
										var _this14 = x1.options1;
										var xs2 = o12.cbTypes;
										if(_this14.nonemptyintersection(xs2,_this14.includes) && !_this14.nonemptyintersection(xs2,_this14.excludes)) {
											var _this15 = x1.options2;
											var xs3 = o22.cbTypes;
											if(_this15.nonemptyintersection(xs3,_this15.includes)) {
												tmp2 = !_this15.nonemptyintersection(xs3,_this15.excludes);
											} else {
												tmp2 = false;
											}
										} else {
											tmp2 = false;
										}
										if(tmp2) {
											cb3.int1 = o12;
											cb3.int2 = o22;
										} else {
											cb3.int1 = o22;
											cb3.int2 = o12;
										}
										cb3.set = callbackset;
									}
								}
								cx_ite7 = cx_ite7.next;
							}
							if(callbackset.arbiters.head == null) {
								this.remove_callbackset(callbackset);
							}
						}
						cx_ite1 = cx_ite1.next;
					}
					cx_ite = cx_ite.next;
				}
			}
			arb.fresh = false;
			arb.intchange = false;
		}
		if(arb.cleared || arb.up_stamp + (arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL ? nape_Config.arbiterExpirationDelay : 0) < this.stamp) {
			if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.SENSOR) {
				var _this16 = arb.sensorarb;
				if(!_this16.cleared) {
					var _this17 = _this16.b1.arbiters;
					var pre = null;
					var cur = _this17.head;
					var ret16 = false;
					while(cur != null) {
						if(cur.elt == _this16) {
							var old;
							var ret17;
							if(pre == null) {
								old = _this17.head;
								ret17 = old.next;
								_this17.head = ret17;
								if(_this17.head == null) {
									_this17.pushmod = true;
								}
							} else {
								old = pre.next;
								ret17 = old.next;
								pre.next = ret17;
								if(ret17 == null) {
									_this17.pushmod = true;
								}
							}
							var o4 = old;
							o4.elt = null;
							o4.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o4;
							_this17.modified = true;
							_this17.length--;
							_this17.pushmod = true;
							ret16 = true;
							break;
						}
						pre = cur;
						cur = cur.next;
					}
					var _this18 = _this16.b2.arbiters;
					var pre1 = null;
					var cur1 = _this18.head;
					var ret18 = false;
					while(cur1 != null) {
						if(cur1.elt == _this16) {
							var old1;
							var ret19;
							if(pre1 == null) {
								old1 = _this18.head;
								ret19 = old1.next;
								_this18.head = ret19;
								if(_this18.head == null) {
									_this18.pushmod = true;
								}
							} else {
								old1 = pre1.next;
								ret19 = old1.next;
								pre1.next = ret19;
								if(ret19 == null) {
									_this18.pushmod = true;
								}
							}
							var o5 = old1;
							o5.elt = null;
							o5.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o5;
							_this18.modified = true;
							_this18.length--;
							_this18.pushmod = true;
							ret18 = true;
							break;
						}
						pre1 = cur1;
						cur1 = cur1.next;
					}
					if(_this16.pair != null) {
						_this16.pair.arb = null;
						_this16.pair = null;
					}
				}
				_this16.b1 = _this16.b2 = null;
				_this16.active = false;
				_this16.intchange = false;
				var o6 = _this16;
				o6.next = zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool;
				zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool = o6;
			} else if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.FLUID) {
				var _this19 = arb.fluidarb;
				if(!_this19.cleared) {
					var _this20 = _this19.b1.arbiters;
					var pre2 = null;
					var cur2 = _this20.head;
					var ret20 = false;
					while(cur2 != null) {
						if(cur2.elt == _this19) {
							var old2;
							var ret21;
							if(pre2 == null) {
								old2 = _this20.head;
								ret21 = old2.next;
								_this20.head = ret21;
								if(_this20.head == null) {
									_this20.pushmod = true;
								}
							} else {
								old2 = pre2.next;
								ret21 = old2.next;
								pre2.next = ret21;
								if(ret21 == null) {
									_this20.pushmod = true;
								}
							}
							var o7 = old2;
							o7.elt = null;
							o7.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o7;
							_this20.modified = true;
							_this20.length--;
							_this20.pushmod = true;
							ret20 = true;
							break;
						}
						pre2 = cur2;
						cur2 = cur2.next;
					}
					var _this21 = _this19.b2.arbiters;
					var pre3 = null;
					var cur3 = _this21.head;
					var ret22 = false;
					while(cur3 != null) {
						if(cur3.elt == _this19) {
							var old3;
							var ret23;
							if(pre3 == null) {
								old3 = _this21.head;
								ret23 = old3.next;
								_this21.head = ret23;
								if(_this21.head == null) {
									_this21.pushmod = true;
								}
							} else {
								old3 = pre3.next;
								ret23 = old3.next;
								pre3.next = ret23;
								if(ret23 == null) {
									_this21.pushmod = true;
								}
							}
							var o8 = old3;
							o8.elt = null;
							o8.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o8;
							_this21.modified = true;
							_this21.length--;
							_this21.pushmod = true;
							ret22 = true;
							break;
						}
						pre3 = cur3;
						cur3 = cur3.next;
					}
					if(_this19.pair != null) {
						_this19.pair.arb = null;
						_this19.pair = null;
					}
				}
				_this19.b1 = _this19.b2 = null;
				_this19.active = false;
				_this19.intchange = false;
				var o9 = _this19;
				o9.next = zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool;
				zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool = o9;
				_this19.pre_dt = -1.0;
			} else {
				var _this22 = arb.colarb;
				if(!_this22.cleared) {
					var _this23 = _this22.b1.arbiters;
					var pre4 = null;
					var cur4 = _this23.head;
					var ret24 = false;
					while(cur4 != null) {
						if(cur4.elt == _this22) {
							var old4;
							var ret25;
							if(pre4 == null) {
								old4 = _this23.head;
								ret25 = old4.next;
								_this23.head = ret25;
								if(_this23.head == null) {
									_this23.pushmod = true;
								}
							} else {
								old4 = pre4.next;
								ret25 = old4.next;
								pre4.next = ret25;
								if(ret25 == null) {
									_this23.pushmod = true;
								}
							}
							var o10 = old4;
							o10.elt = null;
							o10.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o10;
							_this23.modified = true;
							_this23.length--;
							_this23.pushmod = true;
							ret24 = true;
							break;
						}
						pre4 = cur4;
						cur4 = cur4.next;
					}
					var _this24 = _this22.b2.arbiters;
					var pre5 = null;
					var cur5 = _this24.head;
					var ret26 = false;
					while(cur5 != null) {
						if(cur5.elt == _this22) {
							var old5;
							var ret27;
							if(pre5 == null) {
								old5 = _this24.head;
								ret27 = old5.next;
								_this24.head = ret27;
								if(_this24.head == null) {
									_this24.pushmod = true;
								}
							} else {
								old5 = pre5.next;
								ret27 = old5.next;
								pre5.next = ret27;
								if(ret27 == null) {
									_this24.pushmod = true;
								}
							}
							var o13 = old5;
							o13.elt = null;
							o13.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o13;
							_this24.modified = true;
							_this24.length--;
							_this24.pushmod = true;
							ret26 = true;
							break;
						}
						pre5 = cur5;
						cur5 = cur5.next;
					}
					if(_this22.pair != null) {
						_this22.pair.arb = null;
						_this22.pair = null;
					}
				}
				_this22.b1 = _this22.b2 = null;
				_this22.active = false;
				_this22.intchange = false;
				while(_this22.contacts.next != null) {
					var _this25 = _this22.contacts;
					var ret28 = _this25.next;
					_this25.pop();
					var o14 = ret28;
					o14.arbiter = null;
					o14.next = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
					zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = o14;
					var _this26 = _this22.innards;
					var ret29 = _this26.next;
					_this26.next = ret29.next;
					ret29._inuse = false;
					if(_this26.next == null) {
						_this26.pushmod = true;
					}
					_this26.modified = true;
					_this26.length--;
				}
				var o15 = _this22;
				o15.userdef_dyn_fric = false;
				o15.userdef_stat_fric = false;
				o15.userdef_restitution = false;
				o15.userdef_rfric = false;
				o15.__ref_edge1 = o15.__ref_edge2 = null;
				o15.next = zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool;
				zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool = o15;
				_this22.pre_dt = -1.0;
			}
			return true;
		}
		var pact = arb.active;
		arb.active = arb.presentable = arb.up_stamp == this.stamp;
		if((arb.immState & 1) != 0) {
			if(arb.active && arb.type != zpp_$nape_dynamics_ZPP_$Arbiter.SENSOR) {
				if(arb.colarb != null) {
					var _this27 = arb.colarb;
					if(_this27.invalidated) {
						_this27.invalidated = false;
						if(!_this27.userdef_restitution) {
							if(_this27.s1.material.elasticity <= -Infinity || _this27.s2.material.elasticity <= -Infinity) {
								_this27.restitution = 0;
							} else if(_this27.s1.material.elasticity >= Infinity || _this27.s2.material.elasticity >= Infinity) {
								_this27.restitution = 1;
							} else {
								_this27.restitution = (_this27.s1.material.elasticity + _this27.s2.material.elasticity) / 2;
							}
							if(_this27.restitution < 0) {
								_this27.restitution = 0;
							}
							if(_this27.restitution > 1) {
								_this27.restitution = 1;
							}
						}
						if(!_this27.userdef_dyn_fric) {
							_this27.dyn_fric = Math.sqrt(_this27.s1.material.dynamicFriction * _this27.s2.material.dynamicFriction);
						}
						if(!_this27.userdef_stat_fric) {
							_this27.stat_fric = Math.sqrt(_this27.s1.material.staticFriction * _this27.s2.material.staticFriction);
						}
						if(!_this27.userdef_rfric) {
							_this27.rfric = Math.sqrt(_this27.s1.material.rollingFriction * _this27.s2.material.rollingFriction);
						}
					}
					if(_this27.pre_dt == -1.0) {
						_this27.pre_dt = dt;
					}
					var dtratio = dt / _this27.pre_dt;
					_this27.pre_dt = dt;
					var mass_sum = _this27.b1.smass + _this27.b2.smass;
					_this27.hc2 = false;
					var fst = true;
					var statType = _this27.b1.type != 2 || _this27.b2.type != 2;
					var bias = statType ? _this27.continuous ? nape_Config.contactContinuousStaticBiasCoef : nape_Config.contactStaticBiasCoef : _this27.continuous ? nape_Config.contactContinuousBiasCoef : nape_Config.contactBiasCoef;
					_this27.biasCoef = bias;
					_this27.continuous = false;
					var pre6 = null;
					var prei = null;
					var cx_itei = _this27.innards.next;
					var cx_ite8 = _this27.contacts.next;
					while(cx_ite8 != null) {
						var c = cx_ite8;
						if(c.stamp + nape_Config.arbiterExpirationDelay < _this27.stamp) {
							var _this28 = _this27.contacts;
							var old6;
							var ret30;
							if(pre6 == null) {
								old6 = _this28.next;
								ret30 = old6.next;
								_this28.next = ret30;
								if(_this28.next == null) {
									_this28.pushmod = true;
								}
							} else {
								old6 = pre6.next;
								ret30 = old6.next;
								pre6.next = ret30;
								if(ret30 == null) {
									_this28.pushmod = true;
								}
							}
							old6._inuse = false;
							_this28.modified = true;
							_this28.length--;
							_this28.pushmod = true;
							cx_ite8 = ret30;
							var _this29 = _this27.innards;
							var old7;
							var ret31;
							if(prei == null) {
								old7 = _this29.next;
								ret31 = old7.next;
								_this29.next = ret31;
								if(_this29.next == null) {
									_this29.pushmod = true;
								}
							} else {
								old7 = prei.next;
								ret31 = old7.next;
								prei.next = ret31;
								if(ret31 == null) {
									_this29.pushmod = true;
								}
							}
							old7._inuse = false;
							_this29.modified = true;
							_this29.length--;
							_this29.pushmod = true;
							cx_itei = ret31;
							var o16 = c;
							o16.arbiter = null;
							o16.next = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
							zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = o16;
							continue;
						}
						var ci = c.inner;
						var pact1 = c.active;
						c.active = c.stamp == _this27.stamp;
						if(c.active) {
							if(fst) {
								fst = false;
								_this27.c1 = ci;
								_this27.oc1 = c;
							} else {
								_this27.hc2 = true;
								_this27.c2 = ci;
								_this27.oc2 = c;
							}
							ci.r2x = c.px - _this27.b2.posx;
							ci.r2y = c.py - _this27.b2.posy;
							ci.r1x = c.px - _this27.b1.posx;
							ci.r1y = c.py - _this27.b1.posy;
							var x2 = ci.r2x * _this27.nx + ci.r2y * _this27.ny;
							var kt = mass_sum + _this27.b2.sinertia * (x2 * x2);
							var x3 = ci.r1x * _this27.nx + ci.r1y * _this27.ny;
							kt += _this27.b1.sinertia * (x3 * x3);
							ci.tMass = kt < nape_Config.epsilon * nape_Config.epsilon ? 0 : 1.0 / kt;
							var x4 = _this27.ny * ci.r2x - _this27.nx * ci.r2y;
							var nt = mass_sum + _this27.b2.sinertia * (x4 * x4);
							var x5 = _this27.ny * ci.r1x - _this27.nx * ci.r1y;
							nt += _this27.b1.sinertia * (x5 * x5);
							ci.nMass = nt < nape_Config.epsilon * nape_Config.epsilon ? 0 : 1.0 / nt;
							var vrx = 0.0;
							var vry = 0.0;
							var ang = _this27.b2.angvel + _this27.b2.kinangvel;
							vrx = _this27.b2.velx + _this27.b2.kinvelx - ci.r2y * ang;
							vry = _this27.b2.vely + _this27.b2.kinvely + ci.r2x * ang;
							ang = _this27.b1.angvel + _this27.b1.kinangvel;
							vrx -= _this27.b1.velx + _this27.b1.kinvelx - ci.r1y * ang;
							vry -= _this27.b1.vely + _this27.b1.kinvely + ci.r1x * ang;
							var vdot = _this27.nx * vrx + _this27.ny * vry;
							c.elasticity = _this27.restitution;
							ci.bounce = vdot * c.elasticity;
							if(ci.bounce > -nape_Config.elasticThreshold) {
								ci.bounce = 0;
							}
							vdot = vry * _this27.nx - vrx * _this27.ny;
							var thr = nape_Config.staticFrictionThreshold;
							if(vdot * vdot > thr * thr) {
								ci.friction = _this27.dyn_fric;
							} else {
								ci.friction = _this27.stat_fric;
							}
							ci.jnAcc *= dtratio;
							ci.jtAcc *= dtratio;
						}
						if(pact1 != c.active) {
							_this27.contacts.modified = true;
						}
						pre6 = cx_ite8;
						prei = cx_itei;
						cx_itei = cx_itei.next;
						cx_ite8 = cx_ite8.next;
					}
					if(_this27.hc2) {
						_this27.hpc2 = true;
						if(_this27.oc1.posOnly) {
							var tmp3 = _this27.c1;
							_this27.c1 = _this27.c2;
							_this27.c2 = tmp3;
							var tmp21 = _this27.oc1;
							_this27.oc1 = _this27.oc2;
							_this27.oc2 = tmp21;
							_this27.hc2 = false;
						} else if(_this27.oc2.posOnly) {
							_this27.hc2 = false;
						}
						if(_this27.oc1.posOnly) {
							fst = true;
						}
					} else {
						_this27.hpc2 = false;
					}
					_this27.jrAcc *= dtratio;
					if(!fst) {
						_this27.rn1a = _this27.ny * _this27.c1.r1x - _this27.nx * _this27.c1.r1y;
						_this27.rt1a = _this27.c1.r1x * _this27.nx + _this27.c1.r1y * _this27.ny;
						_this27.rn1b = _this27.ny * _this27.c1.r2x - _this27.nx * _this27.c1.r2y;
						_this27.rt1b = _this27.c1.r2x * _this27.nx + _this27.c1.r2y * _this27.ny;
						_this27.k1x = _this27.b2.kinvelx - _this27.c1.r2y * _this27.b2.kinangvel - (_this27.b1.kinvelx - _this27.c1.r1y * _this27.b1.kinangvel);
						_this27.k1y = _this27.b2.kinvely + _this27.c1.r2x * _this27.b2.kinangvel - (_this27.b1.kinvely + _this27.c1.r1x * _this27.b1.kinangvel);
					}
					if(_this27.hc2) {
						_this27.rn2a = _this27.ny * _this27.c2.r1x - _this27.nx * _this27.c2.r1y;
						_this27.rt2a = _this27.c2.r1x * _this27.nx + _this27.c2.r1y * _this27.ny;
						_this27.rn2b = _this27.ny * _this27.c2.r2x - _this27.nx * _this27.c2.r2y;
						_this27.rt2b = _this27.c2.r2x * _this27.nx + _this27.c2.r2y * _this27.ny;
						_this27.k2x = _this27.b2.kinvelx - _this27.c2.r2y * _this27.b2.kinangvel - (_this27.b1.kinvelx - _this27.c2.r1y * _this27.b1.kinangvel);
						_this27.k2y = _this27.b2.kinvely + _this27.c2.r2x * _this27.b2.kinangvel - (_this27.b1.kinvely + _this27.c2.r1x * _this27.b1.kinangvel);
						_this27.kMassa = mass_sum + _this27.b1.sinertia * _this27.rn1a * _this27.rn1a + _this27.b2.sinertia * _this27.rn1b * _this27.rn1b;
						_this27.kMassb = mass_sum + _this27.b1.sinertia * _this27.rn1a * _this27.rn2a + _this27.b2.sinertia * _this27.rn1b * _this27.rn2b;
						_this27.kMassc = mass_sum + _this27.b1.sinertia * _this27.rn2a * _this27.rn2a + _this27.b2.sinertia * _this27.rn2b * _this27.rn2b;
						var norm = _this27.kMassa * _this27.kMassa + 2 * _this27.kMassb * _this27.kMassb + _this27.kMassc * _this27.kMassc;
						if(norm < nape_Config.illConditionedThreshold * (_this27.kMassa * _this27.kMassc - _this27.kMassb * _this27.kMassb)) {
							_this27.Ka = _this27.kMassa;
							_this27.Kb = _this27.kMassb;
							_this27.Kc = _this27.kMassc;
							var det = _this27.kMassa * _this27.kMassc - _this27.kMassb * _this27.kMassb;
							if(det != det) {
								_this27.kMassa = _this27.kMassb = _this27.kMassc = 0;
							} else if(det == 0) {
								var flag = 0;
								if(_this27.kMassa != 0) {
									_this27.kMassa = 1 / _this27.kMassa;
								} else {
									_this27.kMassa = 0;
									flag |= 1;
								}
								if(_this27.kMassc != 0) {
									_this27.kMassc = 1 / _this27.kMassc;
								} else {
									_this27.kMassc = 0;
									flag |= 2;
								}
								_this27.kMassb = 0;
							} else {
								det = 1 / det;
								var t = _this27.kMassc * det;
								_this27.kMassc = _this27.kMassa * det;
								_this27.kMassa = t;
								_this27.kMassb *= -det;
							}
						} else {
							_this27.hc2 = false;
							if(_this27.oc2.dist < _this27.oc1.dist) {
								var t1 = _this27.c1;
								_this27.c1 = _this27.c2;
								_this27.c2 = t1;
							}
							_this27.oc2.active = false;
							_this27.contacts.modified = true;
						}
					}
					_this27.surfacex = _this27.b2.svelx;
					_this27.surfacey = _this27.b2.svely;
					var t2 = 1.0;
					_this27.surfacex += _this27.b1.svelx * t2;
					_this27.surfacey += _this27.b1.svely * t2;
					_this27.surfacex = -_this27.surfacex;
					_this27.surfacey = -_this27.surfacey;
					_this27.rMass = _this27.b1.sinertia + _this27.b2.sinertia;
					if(_this27.rMass != 0) {
						_this27.rMass = 1 / _this27.rMass;
					}
					if(fst) {
						arb.active = false;
					}
				} else {
					var _this30 = arb.fluidarb;
					if(_this30.pre_dt == -1.0) {
						_this30.pre_dt = dt;
					}
					var dtratio1 = dt / _this30.pre_dt;
					_this30.pre_dt = dt;
					_this30.r1x = _this30.centroidx - _this30.b1.posx;
					_this30.r1y = _this30.centroidy - _this30.b1.posy;
					_this30.r2x = _this30.centroidx - _this30.b2.posx;
					_this30.r2y = _this30.centroidy - _this30.b2.posy;
					var g1x = 0.0;
					var g1y = 0.0;
					if(_this30.ws1.fluidEnabled && _this30.ws1.fluidProperties.wrap_gravity != null) {
						g1x = _this30.ws1.fluidProperties.gravityx;
						g1y = _this30.ws1.fluidProperties.gravityy;
					} else {
						g1x = this.gravityx;
						g1y = this.gravityy;
					}
					var g2x = 0.0;
					var g2y = 0.0;
					if(_this30.ws2.fluidEnabled && _this30.ws2.fluidProperties.wrap_gravity != null) {
						g2x = _this30.ws2.fluidProperties.gravityx;
						g2y = _this30.ws2.fluidProperties.gravityy;
					} else {
						g2x = this.gravityx;
						g2y = this.gravityy;
					}
					var buoyx = 0;
					var buoyy = 0;
					if(_this30.ws1.fluidEnabled && _this30.ws2.fluidEnabled) {
						var mass1 = _this30.overlap * _this30.ws1.fluidProperties.density;
						var mass2 = _this30.overlap * _this30.ws2.fluidProperties.density;
						if(mass1 > mass2) {
							var t3 = mass1 + mass2;
							buoyx -= g1x * t3;
							buoyy -= g1y * t3;
						} else if(mass1 < mass2) {
							var t4 = mass1 + mass2;
							buoyx += g2x * t4;
							buoyy += g2y * t4;
						} else {
							var gx = 0.0;
							var gy = 0.0;
							gx = g1x + g2x;
							gy = g1y + g2y;
							var t5 = 0.5;
							gx *= t5;
							gy *= t5;
							if(_this30.ws1.worldCOMx * gx + _this30.ws1.worldCOMy * gy > _this30.ws2.worldCOMx * gx + _this30.ws2.worldCOMy * gy) {
								var t6 = mass1 + mass2;
								buoyx -= gx * t6;
								buoyy -= gy * t6;
							} else {
								var t7 = mass1 + mass2;
								buoyx += gx * t7;
								buoyy += gy * t7;
							}
						}
					} else if(_this30.ws1.fluidEnabled) {
						var mass = _this30.overlap * _this30.ws1.fluidProperties.density;
						var t8 = mass;
						buoyx -= g1x * t8;
						buoyy -= g1y * t8;
					} else if(_this30.ws2.fluidEnabled) {
						var mass3 = _this30.overlap * _this30.ws2.fluidProperties.density;
						var t9 = mass3;
						buoyx += g2x * t9;
						buoyy += g2y * t9;
					}
					var t10 = dt;
					buoyx *= t10;
					buoyy *= t10;
					_this30.buoyx = buoyx;
					_this30.buoyy = buoyy;
					if(_this30.b1.type == 2) {
						var t11 = _this30.b1.imass;
						_this30.b1.velx -= buoyx * t11;
						_this30.b1.vely -= buoyy * t11;
						_this30.b1.angvel -= (buoyy * _this30.r1x - buoyx * _this30.r1y) * _this30.b1.iinertia;
					}
					if(_this30.b2.type == 2) {
						var t12 = _this30.b2.imass;
						_this30.b2.velx += buoyx * t12;
						_this30.b2.vely += buoyy * t12;
						_this30.b2.angvel += (buoyy * _this30.r2x - buoyx * _this30.r2y) * _this30.b2.iinertia;
					}
					if((!_this30.ws1.fluidEnabled || _this30.ws1.fluidProperties.viscosity == 0) && (!_this30.ws2.fluidEnabled || _this30.ws2.fluidProperties.viscosity == 0)) {
						_this30.nodrag = true;
						_this30.dampx = 0;
						_this30.dampy = 0;
						_this30.adamp = 0;
					} else {
						_this30.nodrag = false;
						var tViscosity = 0.0;
						if(_this30.ws1.fluidEnabled) {
							_this30.ws2.validate_angDrag();
							tViscosity += _this30.ws1.fluidProperties.viscosity * _this30.ws2.angDrag * _this30.overlap / _this30.ws2.area;
						}
						if(_this30.ws2.fluidEnabled) {
							_this30.ws1.validate_angDrag();
							tViscosity += _this30.ws2.fluidProperties.viscosity * _this30.ws1.angDrag * _this30.overlap / _this30.ws1.area;
						}
						if(tViscosity != 0) {
							var iSum = _this30.b1.sinertia + _this30.b2.sinertia;
							if(iSum != 0) {
								_this30.wMass = 1 / iSum;
							} else {
								_this30.wMass = 0.0;
							}
							var biasCoef;
							tViscosity *= 0.0004;
							var omega = 2 * Math.PI * tViscosity;
							_this30.agamma = 1 / (dt * omega * (2 + omega * dt));
							var ig = 1 / (1 + _this30.agamma);
							biasCoef = dt * omega * omega * _this30.agamma;
							_this30.agamma *= ig;
							_this30.wMass *= ig;
						} else {
							_this30.wMass = 0.0;
							_this30.agamma = 0.0;
						}
						var vrnx = _this30.b2.velx + _this30.b2.kinvelx - _this30.r2y * (_this30.b2.angvel + _this30.b2.kinangvel) - (_this30.b1.velx + _this30.b1.kinvelx - _this30.r1y * (_this30.b2.angvel + _this30.b2.kinangvel));
						var vrny = _this30.b2.vely + _this30.b2.kinvely + _this30.r2x * (_this30.b2.angvel + _this30.b2.kinangvel) - (_this30.b1.vely + _this30.b1.kinvely + _this30.r1x * (_this30.b1.angvel + _this30.b1.kinangvel));
						if(!(vrnx * vrnx + vrny * vrny < nape_Config.epsilon * nape_Config.epsilon)) {
							var d = vrnx * vrnx + vrny * vrny;
							var imag = 1.0 / Math.sqrt(d);
							var t13 = imag;
							vrnx *= t13;
							vrny *= t13;
							_this30.nx = vrnx;
							_this30.ny = vrny;
						}
						var tViscosity1 = 0.0;
						if(_this30.ws1.fluidEnabled) {
							var f = -_this30.ws1.fluidProperties.viscosity * _this30.overlap / _this30.ws2.area;
							if(_this30.ws2.type == 0) {
								tViscosity1 -= f * _this30.ws2.circle.radius * nape_Config.fluidLinearDrag / (2 * _this30.ws2.circle.radius * Math.PI);
							} else {
								var poly = _this30.ws2.polygon;
								var bord = 0.0;
								var acc = 0.0;
								var cx_ite9 = poly.edges.head;
								while(cx_ite9 != null) {
									var ex = cx_ite9.elt;
									bord += ex.length;
									var fact = f * ex.length * (ex.gnormx * _this30.nx + ex.gnormy * _this30.ny);
									if(fact > 0) {
										fact *= -nape_Config.fluidVacuumDrag;
										fact = fact;
									}
									acc -= fact * 0.5 * nape_Config.fluidLinearDrag;
									cx_ite9 = cx_ite9.next;
								}
								tViscosity1 += acc / bord;
							}
						}
						if(_this30.ws2.fluidEnabled) {
							var f1 = -_this30.ws2.fluidProperties.viscosity * _this30.overlap / _this30.ws1.area;
							if(_this30.ws1.type == 0) {
								tViscosity1 -= f1 * _this30.ws1.circle.radius * nape_Config.fluidLinearDrag / (2 * _this30.ws1.circle.radius * Math.PI);
							} else {
								var poly1 = _this30.ws1.polygon;
								var bord1 = 0.0;
								var acc1 = 0.0;
								var cx_ite10 = poly1.edges.head;
								while(cx_ite10 != null) {
									var ex1 = cx_ite10.elt;
									bord1 += ex1.length;
									var fact1 = f1 * ex1.length * (ex1.gnormx * _this30.nx + ex1.gnormy * _this30.ny);
									if(fact1 > 0) {
										fact1 *= -nape_Config.fluidVacuumDrag;
										fact1 = fact1;
									}
									acc1 -= fact1 * 0.5 * nape_Config.fluidLinearDrag;
									cx_ite10 = cx_ite10.next;
								}
								tViscosity1 += acc1 / bord1;
							}
						}
						if(tViscosity1 != 0) {
							var m = _this30.b1.smass + _this30.b2.smass;
							var Ka = 0.0;
							var Kb = 0.0;
							var Kc = 0.0;
							Ka = m;
							Kb = 0;
							Kc = m;
							if(_this30.b1.sinertia != 0) {
								var X = _this30.r1x * _this30.b1.sinertia;
								var Y = _this30.r1y * _this30.b1.sinertia;
								Ka += Y * _this30.r1y;
								Kb += -Y * _this30.r1x;
								Kc += X * _this30.r1x;
							}
							if(_this30.b2.sinertia != 0) {
								var X1 = _this30.r2x * _this30.b2.sinertia;
								var Y1 = _this30.r2y * _this30.b2.sinertia;
								Ka += Y1 * _this30.r2y;
								Kb += -Y1 * _this30.r2x;
								Kc += X1 * _this30.r2x;
							}
							var det1 = Ka * Kc - Kb * Kb;
							if(det1 != det1) {
								Kc = 0;
								Kb = Kc;
								Ka = Kb;
							} else if(det1 == 0) {
								var flag1 = 0;
								if(Ka != 0) {
									Ka = 1 / Ka;
								} else {
									Ka = 0;
									flag1 |= 1;
								}
								if(Kc != 0) {
									Kc = 1 / Kc;
								} else {
									Kc = 0;
									flag1 |= 2;
								}
								Kb = 0;
							} else {
								det1 = 1 / det1;
								var t14 = Kc * det1;
								Kc = Ka * det1;
								Ka = t14;
								Kb *= -det1;
							}
							_this30.vMassa = Ka;
							_this30.vMassb = Kb;
							_this30.vMassc = Kc;
							var biasCoef1;
							var omega1 = 2 * Math.PI * tViscosity1;
							_this30.lgamma = 1 / (dt * omega1 * (2 + omega1 * dt));
							var ig1 = 1 / (1 + _this30.lgamma);
							biasCoef1 = dt * omega1 * omega1 * _this30.lgamma;
							_this30.lgamma *= ig1;
							var X2 = ig1;
							_this30.vMassa *= X2;
							_this30.vMassb *= X2;
							_this30.vMassc *= X2;
						} else {
							_this30.vMassa = 0;
							_this30.vMassb = 0;
							_this30.vMassc = 0;
							_this30.lgamma = 0.0;
						}
					}
					var t15 = dtratio1;
					_this30.dampx *= t15;
					_this30.dampy *= t15;
					_this30.adamp *= dtratio1;
				}
			}
		} else if(arb.colarb != null) {
			var _this31 = arb.colarb;
			var fst1 = true;
			var pre7 = null;
			var prei1 = null;
			var cx_itei1 = _this31.innards.next;
			_this31.hc2 = false;
			var cx_ite11 = _this31.contacts.next;
			while(cx_ite11 != null) {
				var c3 = cx_ite11;
				if(c3.stamp + nape_Config.arbiterExpirationDelay < _this31.stamp) {
					var _this32 = _this31.contacts;
					var old8;
					var ret32;
					if(pre7 == null) {
						old8 = _this32.next;
						ret32 = old8.next;
						_this32.next = ret32;
						if(_this32.next == null) {
							_this32.pushmod = true;
						}
					} else {
						old8 = pre7.next;
						ret32 = old8.next;
						pre7.next = ret32;
						if(ret32 == null) {
							_this32.pushmod = true;
						}
					}
					old8._inuse = false;
					_this32.modified = true;
					_this32.length--;
					_this32.pushmod = true;
					cx_ite11 = ret32;
					var _this33 = _this31.innards;
					var old9;
					var ret33;
					if(prei1 == null) {
						old9 = _this33.next;
						ret33 = old9.next;
						_this33.next = ret33;
						if(_this33.next == null) {
							_this33.pushmod = true;
						}
					} else {
						old9 = prei1.next;
						ret33 = old9.next;
						prei1.next = ret33;
						if(ret33 == null) {
							_this33.pushmod = true;
						}
					}
					old9._inuse = false;
					_this33.modified = true;
					_this33.length--;
					_this33.pushmod = true;
					cx_itei1 = ret33;
					var o17 = c3;
					o17.arbiter = null;
					o17.next = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
					zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = o17;
					continue;
				}
				var ci1 = c3.inner;
				var pact2 = c3.active;
				c3.active = c3.stamp == _this31.stamp;
				if(c3.active) {
					if(fst1) {
						fst1 = false;
						_this31.c1 = ci1;
						_this31.oc1 = c3;
					} else {
						_this31.hc2 = true;
						_this31.c2 = ci1;
						_this31.oc2 = c3;
					}
				}
				if(pact2 != c3.active) {
					_this31.contacts.modified = true;
				}
				pre7 = cx_ite11;
				prei1 = cx_itei1;
				cx_itei1 = cx_itei1.next;
				cx_ite11 = cx_ite11.next;
			}
			if(_this31.hc2) {
				_this31.hpc2 = true;
				if(_this31.oc1.posOnly) {
					var tmp4 = _this31.c1;
					_this31.c1 = _this31.c2;
					_this31.c2 = tmp4;
					var tmp22 = _this31.oc1;
					_this31.oc1 = _this31.oc2;
					_this31.oc2 = tmp22;
					_this31.hc2 = false;
				} else if(_this31.oc2.posOnly) {
					_this31.hc2 = false;
				}
				if(_this31.oc1.posOnly) {
					fst1 = true;
				}
			} else {
				_this31.hpc2 = false;
			}
			if(fst1) {
				arb.active = false;
			}
		}
		if(pact != arb.active) {
			arb.b1.arbiters.modified = true;
			arb.b2.arbiters.modified = true;
			this.c_arbiters_true.modified = this.c_arbiters_false.modified = true;
			this.s_arbiters.modified = this.f_arbiters.modified = true;
		}
		return false;
	}
	,prestep: function(dt) {
		var pre = null;
		var cx_ite = this.live_constraints.head;
		while(cx_ite != null) {
			var con = cx_ite.elt;
			if(con.preStep(dt)) {
				cx_ite = this.live_constraints.erase(pre);
				con.broken();
				this.constraintCbBreak(con);
				if(con.removeOnBreak) {
					con.component.sleeping = true;
					this.midstep = false;
					if(con.compound != null) {
						con.compound.wrap_constraints.remove(con.outer);
					} else {
						this.wrap_constraints.remove(con.outer);
					}
					this.midstep = true;
				} else {
					con.active = false;
				}
				con.clearcache();
				continue;
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		var pre1 = null;
		var arbs = this.c_arbiters_true;
		var arbite = arbs.head;
		var fst = this.c_arbiters_false != null;
		if(fst && arbite == null) {
			fst = false;
			arbite = this.c_arbiters_false.head;
			arbs = this.c_arbiters_false;
			pre1 = null;
		}
		while(arbite != null) {
			var arb = arbite.elt;
			if(this.presteparb(arb,dt)) {
				var old;
				var ret;
				if(pre1 == null) {
					old = arbs.head;
					ret = old.next;
					arbs.head = ret;
					if(arbs.head == null) {
						arbs.pushmod = true;
					}
				} else {
					old = pre1.next;
					ret = old.next;
					pre1.next = ret;
					if(ret == null) {
						arbs.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = o;
				arbs.modified = true;
				arbs.length--;
				arbs.pushmod = true;
				arbite = ret;
				if(fst && arbite == null) {
					fst = false;
					arbite = this.c_arbiters_false.head;
					arbs = this.c_arbiters_false;
					pre1 = null;
				}
				continue;
			}
			pre1 = arbite;
			arbite = arbite.next;
			if(fst && arbite == null) {
				fst = false;
				arbite = this.c_arbiters_false.head;
				arbs = this.c_arbiters_false;
				pre1 = null;
			}
		}
		var pre2 = null;
		var arbs1 = this.f_arbiters;
		var arbite1 = arbs1.head;
		var fst1 = false;
		if(fst1 && arbite1 == null) {
			fst1 = false;
			arbite1 = null.begin();
			arbs1 = null;
			pre2 = null;
		}
		while(arbite1 != null) {
			var arb1 = arbite1.elt;
			if(this.presteparb(arb1,dt)) {
				var old1;
				var ret1;
				if(pre2 == null) {
					old1 = arbs1.head;
					ret1 = old1.next;
					arbs1.head = ret1;
					if(arbs1.head == null) {
						arbs1.pushmod = true;
					}
				} else {
					old1 = pre2.next;
					ret1 = old1.next;
					pre2.next = ret1;
					if(ret1 == null) {
						arbs1.pushmod = true;
					}
				}
				var o1 = old1;
				o1.elt = null;
				o1.next = zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool = o1;
				arbs1.modified = true;
				arbs1.length--;
				arbs1.pushmod = true;
				arbite1 = ret1;
				if(fst1 && arbite1 == null) {
					fst1 = false;
					arbite1 = null.begin();
					arbs1 = null;
					pre2 = null;
				}
				continue;
			}
			pre2 = arbite1;
			arbite1 = arbite1.next;
			if(fst1 && arbite1 == null) {
				fst1 = false;
				arbite1 = null.begin();
				arbs1 = null;
				pre2 = null;
			}
		}
		var pre3 = null;
		var arbs2 = this.s_arbiters;
		var arbite2 = arbs2.head;
		var fst2 = false;
		if(fst2 && arbite2 == null) {
			fst2 = false;
			arbite2 = null.begin();
			arbs2 = null;
			pre3 = null;
		}
		while(arbite2 != null) {
			var arb2 = arbite2.elt;
			if(this.presteparb(arb2,dt)) {
				var old2;
				var ret2;
				if(pre3 == null) {
					old2 = arbs2.head;
					ret2 = old2.next;
					arbs2.head = ret2;
					if(arbs2.head == null) {
						arbs2.pushmod = true;
					}
				} else {
					old2 = pre3.next;
					ret2 = old2.next;
					pre3.next = ret2;
					if(ret2 == null) {
						arbs2.pushmod = true;
					}
				}
				var o2 = old2;
				o2.elt = null;
				o2.next = zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool = o2;
				arbs2.modified = true;
				arbs2.length--;
				arbs2.pushmod = true;
				arbite2 = ret2;
				if(fst2 && arbite2 == null) {
					fst2 = false;
					arbite2 = null.begin();
					arbs2 = null;
					pre3 = null;
				}
				continue;
			}
			pre3 = arbite2;
			arbite2 = arbite2.next;
			if(fst2 && arbite2 == null) {
				fst2 = false;
				arbite2 = null.begin();
				arbs2 = null;
				pre3 = null;
			}
		}
	}
	,warmStart: function() {
		var cx_ite = this.f_arbiters.head;
		while(cx_ite != null) {
			var arb = cx_ite.elt;
			if(arb.active && (arb.immState & 1) != 0) {
				var t = arb.b1.imass;
				arb.b1.velx -= arb.dampx * t;
				arb.b1.vely -= arb.dampy * t;
				var t1 = arb.b2.imass;
				arb.b2.velx += arb.dampx * t1;
				arb.b2.vely += arb.dampy * t1;
				arb.b1.angvel -= arb.b1.iinertia * (arb.dampy * arb.r1x - arb.dampx * arb.r1y);
				arb.b2.angvel += arb.b2.iinertia * (arb.dampy * arb.r2x - arb.dampx * arb.r2y);
				arb.b1.angvel -= arb.adamp * arb.b1.iinertia;
				arb.b2.angvel += arb.adamp * arb.b2.iinertia;
			}
			cx_ite = cx_ite.next;
		}
		var arbi = this.c_arbiters_false.head;
		var fst = true;
		if(arbi == null) {
			arbi = this.c_arbiters_true.head;
			fst = false;
		}
		while(arbi != null) {
			var arb1 = arbi.elt;
			if(arb1.active && (arb1.immState & 1) != 0) {
				var jx = arb1.nx * arb1.c1.jnAcc - arb1.ny * arb1.c1.jtAcc;
				var jy = arb1.ny * arb1.c1.jnAcc + arb1.nx * arb1.c1.jtAcc;
				var t2 = arb1.b1.imass;
				arb1.b1.velx -= jx * t2;
				arb1.b1.vely -= jy * t2;
				arb1.b1.angvel -= arb1.b1.iinertia * (jy * arb1.c1.r1x - jx * arb1.c1.r1y);
				var t3 = arb1.b2.imass;
				arb1.b2.velx += jx * t3;
				arb1.b2.vely += jy * t3;
				arb1.b2.angvel += arb1.b2.iinertia * (jy * arb1.c1.r2x - jx * arb1.c1.r2y);
				if(arb1.hc2) {
					var jx1 = arb1.nx * arb1.c2.jnAcc - arb1.ny * arb1.c2.jtAcc;
					var jy1 = arb1.ny * arb1.c2.jnAcc + arb1.nx * arb1.c2.jtAcc;
					var t4 = arb1.b1.imass;
					arb1.b1.velx -= jx1 * t4;
					arb1.b1.vely -= jy1 * t4;
					arb1.b1.angvel -= arb1.b1.iinertia * (jy1 * arb1.c2.r1x - jx1 * arb1.c2.r1y);
					var t5 = arb1.b2.imass;
					arb1.b2.velx += jx1 * t5;
					arb1.b2.vely += jy1 * t5;
					arb1.b2.angvel += arb1.b2.iinertia * (jy1 * arb1.c2.r2x - jx1 * arb1.c2.r2y);
				}
				arb1.b2.angvel += arb1.jrAcc * arb1.b2.iinertia;
				arb1.b1.angvel -= arb1.jrAcc * arb1.b1.iinertia;
			}
			arbi = arbi.next;
			if(fst && arbi == null) {
				arbi = this.c_arbiters_true.head;
				fst = false;
			}
		}
		var cx_ite1 = this.live_constraints.head;
		while(cx_ite1 != null) {
			var con = cx_ite1.elt;
			con.warmStart();
			cx_ite1 = cx_ite1.next;
		}
	}
	,iterateVel: function(times) {
		var _g1 = 0;
		var _g = times;
		while(_g1 < _g) {
			var i = _g1++;
			var cx_ite = this.f_arbiters.head;
			while(cx_ite != null) {
				var arb = cx_ite.elt;
				if(arb.active && (arb.immState & 1) != 0) {
					if(!arb.nodrag) {
						var w1 = arb.b1.angvel + arb.b1.kinangvel;
						var w2 = arb.b2.angvel + arb.b2.kinangvel;
						var jx = arb.b1.velx + arb.b1.kinvelx - arb.r1y * w1 - (arb.b2.velx + arb.b2.kinvelx - arb.r2y * w2);
						var jy = arb.b1.vely + arb.b1.kinvely + arb.r1x * w1 - (arb.b2.vely + arb.b2.kinvely + arb.r2x * w2);
						var t = arb.vMassa * jx + arb.vMassb * jy;
						jy = arb.vMassb * jx + arb.vMassc * jy;
						jx = t;
						var t1 = arb.lgamma;
						jx -= arb.dampx * t1;
						jy -= arb.dampy * t1;
						var t2 = 1.0;
						arb.dampx += jx * t2;
						arb.dampy += jy * t2;
						var t3 = arb.b1.imass;
						arb.b1.velx -= jx * t3;
						arb.b1.vely -= jy * t3;
						var t4 = arb.b2.imass;
						arb.b2.velx += jx * t4;
						arb.b2.vely += jy * t4;
						arb.b1.angvel -= arb.b1.iinertia * (jy * arb.r1x - jx * arb.r1y);
						arb.b2.angvel += arb.b2.iinertia * (jy * arb.r2x - jx * arb.r2y);
						var j_damp = (w1 - w2) * arb.wMass - arb.adamp * arb.agamma;
						arb.adamp += j_damp;
						arb.b1.angvel -= j_damp * arb.b1.iinertia;
						arb.b2.angvel += j_damp * arb.b2.iinertia;
					}
				}
				cx_ite = cx_ite.next;
			}
			var pre = null;
			var cx_ite1 = this.live_constraints.head;
			while(cx_ite1 != null) {
				var con = cx_ite1.elt;
				if(con.applyImpulseVel()) {
					cx_ite1 = this.live_constraints.erase(pre);
					con.broken();
					this.constraintCbBreak(con);
					if(con.removeOnBreak) {
						con.component.sleeping = true;
						this.midstep = false;
						if(con.compound != null) {
							con.compound.wrap_constraints.remove(con.outer);
						} else {
							this.wrap_constraints.remove(con.outer);
						}
						this.midstep = true;
					} else {
						con.active = false;
					}
					con.clearcache();
					continue;
				}
				pre = cx_ite1;
				cx_ite1 = cx_ite1.next;
			}
			var arbi = this.c_arbiters_false.head;
			var fst = true;
			if(arbi == null) {
				arbi = this.c_arbiters_true.head;
				fst = false;
			}
			while(arbi != null) {
				var arb1 = arbi.elt;
				if(arb1.active && (arb1.immState & 1) != 0) {
					var jx1;
					var jy1;
					var j;
					var jMax;
					var jOld;
					var cjAcc;
					var v1x = arb1.k1x + arb1.b2.velx - arb1.c1.r2y * arb1.b2.angvel - (arb1.b1.velx - arb1.c1.r1y * arb1.b1.angvel);
					var v1y = arb1.k1y + arb1.b2.vely + arb1.c1.r2x * arb1.b2.angvel - (arb1.b1.vely + arb1.c1.r1x * arb1.b1.angvel);
					j = (v1y * arb1.nx - v1x * arb1.ny + arb1.surfacex) * arb1.c1.tMass;
					jMax = arb1.c1.friction * arb1.c1.jnAcc;
					jOld = arb1.c1.jtAcc;
					cjAcc = jOld - j;
					if(cjAcc > jMax) {
						cjAcc = jMax;
					} else if(cjAcc < -jMax) {
						cjAcc = -jMax;
					}
					j = cjAcc - jOld;
					arb1.c1.jtAcc = cjAcc;
					jx1 = -arb1.ny * j;
					jy1 = arb1.nx * j;
					arb1.b2.velx += jx1 * arb1.b2.imass;
					arb1.b2.vely += jy1 * arb1.b2.imass;
					arb1.b1.velx -= jx1 * arb1.b1.imass;
					arb1.b1.vely -= jy1 * arb1.b1.imass;
					arb1.b2.angvel += arb1.rt1b * j * arb1.b2.iinertia;
					arb1.b1.angvel -= arb1.rt1a * j * arb1.b1.iinertia;
					if(arb1.hc2) {
						var v2x = arb1.k2x + arb1.b2.velx - arb1.c2.r2y * arb1.b2.angvel - (arb1.b1.velx - arb1.c2.r1y * arb1.b1.angvel);
						var v2y = arb1.k2y + arb1.b2.vely + arb1.c2.r2x * arb1.b2.angvel - (arb1.b1.vely + arb1.c2.r1x * arb1.b1.angvel);
						j = (v2y * arb1.nx - v2x * arb1.ny + arb1.surfacex) * arb1.c2.tMass;
						jMax = arb1.c2.friction * arb1.c2.jnAcc;
						jOld = arb1.c2.jtAcc;
						cjAcc = jOld - j;
						if(cjAcc > jMax) {
							cjAcc = jMax;
						} else if(cjAcc < -jMax) {
							cjAcc = -jMax;
						}
						j = cjAcc - jOld;
						arb1.c2.jtAcc = cjAcc;
						jx1 = -arb1.ny * j;
						jy1 = arb1.nx * j;
						arb1.b2.velx += jx1 * arb1.b2.imass;
						arb1.b2.vely += jy1 * arb1.b2.imass;
						arb1.b1.velx -= jx1 * arb1.b1.imass;
						arb1.b1.vely -= jy1 * arb1.b1.imass;
						arb1.b2.angvel += arb1.rt2b * j * arb1.b2.iinertia;
						arb1.b1.angvel -= arb1.rt2a * j * arb1.b1.iinertia;
						v1x = arb1.k1x + arb1.b2.velx - arb1.c1.r2y * arb1.b2.angvel - (arb1.b1.velx - arb1.c1.r1y * arb1.b1.angvel);
						v1y = arb1.k1y + arb1.b2.vely + arb1.c1.r2x * arb1.b2.angvel - (arb1.b1.vely + arb1.c1.r1x * arb1.b1.angvel);
						v2x = arb1.k2x + arb1.b2.velx - arb1.c2.r2y * arb1.b2.angvel - (arb1.b1.velx - arb1.c2.r1y * arb1.b1.angvel);
						v2y = arb1.k2y + arb1.b2.vely + arb1.c2.r2x * arb1.b2.angvel - (arb1.b1.vely + arb1.c2.r1x * arb1.b1.angvel);
						var ax = arb1.c1.jnAcc;
						var ay = arb1.c2.jnAcc;
						var jnx = v1x * arb1.nx + v1y * arb1.ny + arb1.surfacey + arb1.c1.bounce - (arb1.Ka * ax + arb1.Kb * ay);
						var jny = v2x * arb1.nx + v2y * arb1.ny + arb1.surfacey + arb1.c2.bounce - (arb1.Kb * ax + arb1.Kc * ay);
						var xx = -(arb1.kMassa * jnx + arb1.kMassb * jny);
						var xy = -(arb1.kMassb * jnx + arb1.kMassc * jny);
						if(xx >= 0 && xy >= 0) {
							jnx = xx - ax;
							jny = xy - ay;
							arb1.c1.jnAcc = xx;
							arb1.c2.jnAcc = xy;
						} else {
							xx = -arb1.c1.nMass * jnx;
							if(xx >= 0 && arb1.Kb * xx + jny >= 0) {
								jnx = xx - ax;
								jny = -ay;
								arb1.c1.jnAcc = xx;
								arb1.c2.jnAcc = 0;
							} else {
								xy = -arb1.c2.nMass * jny;
								if(xy >= 0 && arb1.Kb * xy + jnx >= 0) {
									jnx = -ax;
									jny = xy - ay;
									arb1.c1.jnAcc = 0;
									arb1.c2.jnAcc = xy;
								} else if(jnx >= 0 && jny >= 0) {
									jnx = -ax;
									jny = -ay;
									arb1.c1.jnAcc = arb1.c2.jnAcc = 0;
								} else {
									jnx = 0;
									jny = 0;
								}
							}
						}
						j = jnx + jny;
						jx1 = arb1.nx * j;
						jy1 = arb1.ny * j;
						arb1.b2.velx += jx1 * arb1.b2.imass;
						arb1.b2.vely += jy1 * arb1.b2.imass;
						arb1.b1.velx -= jx1 * arb1.b1.imass;
						arb1.b1.vely -= jy1 * arb1.b1.imass;
						arb1.b2.angvel += (arb1.rn1b * jnx + arb1.rn2b * jny) * arb1.b2.iinertia;
						arb1.b1.angvel -= (arb1.rn1a * jnx + arb1.rn2a * jny) * arb1.b1.iinertia;
					} else {
						if(arb1.radius != 0.0) {
							var dw = arb1.b2.angvel - arb1.b1.angvel;
							j = dw * arb1.rMass;
							jMax = arb1.rfric * arb1.c1.jnAcc;
							jOld = arb1.jrAcc;
							arb1.jrAcc -= j;
							if(arb1.jrAcc > jMax) {
								arb1.jrAcc = jMax;
							} else if(arb1.jrAcc < -jMax) {
								arb1.jrAcc = -jMax;
							}
							j = arb1.jrAcc - jOld;
							arb1.b2.angvel += j * arb1.b2.iinertia;
							arb1.b1.angvel -= j * arb1.b1.iinertia;
						}
						v1x = arb1.k1x + arb1.b2.velx - arb1.c1.r2y * arb1.b2.angvel - (arb1.b1.velx - arb1.c1.r1y * arb1.b1.angvel);
						v1y = arb1.k1y + arb1.b2.vely + arb1.c1.r2x * arb1.b2.angvel - (arb1.b1.vely + arb1.c1.r1x * arb1.b1.angvel);
						j = (arb1.c1.bounce + (arb1.nx * v1x + arb1.ny * v1y) + arb1.surfacey) * arb1.c1.nMass;
						jOld = arb1.c1.jnAcc;
						cjAcc = jOld - j;
						if(cjAcc < 0.0) {
							cjAcc = 0.0;
						}
						j = cjAcc - jOld;
						arb1.c1.jnAcc = cjAcc;
						jx1 = arb1.nx * j;
						jy1 = arb1.ny * j;
						arb1.b2.velx += jx1 * arb1.b2.imass;
						arb1.b2.vely += jy1 * arb1.b2.imass;
						arb1.b1.velx -= jx1 * arb1.b1.imass;
						arb1.b1.vely -= jy1 * arb1.b1.imass;
						arb1.b2.angvel += arb1.rn1b * j * arb1.b2.iinertia;
						arb1.b1.angvel -= arb1.rn1a * j * arb1.b1.iinertia;
					}
				}
				arbi = arbi.next;
				if(fst && arbi == null) {
					arbi = this.c_arbiters_true.head;
					fst = false;
				}
			}
		}
	}
	,iteratePos: function(times) {
		var _g1 = 0;
		var _g = times;
		while(_g1 < _g) {
			var i = _g1++;
			var pre = null;
			var cx_ite = this.live_constraints.head;
			while(cx_ite != null) {
				var con = cx_ite.elt;
				if(!con.__velocity && con.stiff) {
					if(con.applyImpulsePos()) {
						cx_ite = this.live_constraints.erase(pre);
						con.broken();
						this.constraintCbBreak(con);
						if(con.removeOnBreak) {
							con.component.sleeping = true;
							this.midstep = false;
							if(con.compound != null) {
								con.compound.wrap_constraints.remove(con.outer);
							} else {
								this.wrap_constraints.remove(con.outer);
							}
							this.midstep = true;
						} else {
							con.active = false;
						}
						con.clearcache();
						continue;
					}
				}
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			var arbi = this.c_arbiters_false.head;
			var fst = true;
			if(arbi == null) {
				arbi = this.c_arbiters_true.head;
				fst = false;
			}
			while(arbi != null) {
				var arb = arbi.elt;
				if(arb.active && (arb.immState & 1) != 0) {
					if(arb.ptype == 2) {
						var c = arb.c1;
						var dx = 0.0;
						var dy = 0.0;
						var r2x = 0.0;
						var r2y = 0.0;
						r2x = arb.b2.axisy * c.lr2x - arb.b2.axisx * c.lr2y;
						r2y = c.lr2x * arb.b2.axisx + c.lr2y * arb.b2.axisy;
						var t = 1.0;
						r2x += arb.b2.posx * t;
						r2y += arb.b2.posy * t;
						var r1x = 0.0;
						var r1y = 0.0;
						r1x = arb.b1.axisy * c.lr1x - arb.b1.axisx * c.lr1y;
						r1y = c.lr1x * arb.b1.axisx + c.lr1y * arb.b1.axisy;
						var t1 = 1.0;
						r1x += arb.b1.posx * t1;
						r1y += arb.b1.posy * t1;
						var dx1 = 0.0;
						var dy1 = 0.0;
						dx1 = r2x - r1x;
						dy1 = r2y - r1y;
						var dl = Math.sqrt(dx1 * dx1 + dy1 * dy1);
						var r = arb.radius - nape_Config.collisionSlop;
						var err = dl - r;
						if(dx1 * arb.nx + dy1 * arb.ny < 0) {
							dx1 = -dx1;
							dy1 = -dy1;
							err -= arb.radius;
						}
						if(err < 0) {
							if(dl < nape_Config.epsilon) {
								if(arb.b1.smass != 0.0) {
									arb.b1.posx += nape_Config.epsilon * 10;
								} else {
									arb.b2.posx += nape_Config.epsilon * 10;
								}
							} else {
								var t2 = 1.0 / dl;
								dx1 *= t2;
								dy1 *= t2;
								var px = 0.5 * (r1x + r2x);
								var py = 0.5 * (r1y + r2y);
								var pen = dl - r;
								r1x = px - arb.b1.posx;
								r1y = py - arb.b1.posy;
								r2x = px - arb.b2.posx;
								r2y = py - arb.b2.posy;
								var rn1 = dy1 * r1x - dx1 * r1y;
								var rn2 = dy1 * r2x - dx1 * r2y;
								var K = arb.b2.smass + rn2 * rn2 * arb.b2.sinertia + arb.b1.smass + rn1 * rn1 * arb.b1.sinertia;
								if(K != 0) {
									var jn = -arb.biasCoef * pen / K;
									var Jx = 0.0;
									var Jy = 0.0;
									var t3 = jn;
									Jx = dx1 * t3;
									Jy = dy1 * t3;
									var t4 = arb.b1.imass;
									arb.b1.posx -= Jx * t4;
									arb.b1.posy -= Jy * t4;
									var _this = arb.b1;
									var dr = -rn1 * arb.b1.iinertia * jn;
									_this.rot += dr;
									if(dr * dr > 0.0001) {
										_this.axisx = Math.sin(_this.rot);
										_this.axisy = Math.cos(_this.rot);
									} else {
										var d2 = dr * dr;
										var p = 1 - 0.5 * d2;
										var m = 1 - d2 * d2 / 8;
										var nx = (p * _this.axisx + dr * _this.axisy) * m;
										_this.axisy = (p * _this.axisy - dr * _this.axisx) * m;
										_this.axisx = nx;
									}
									var t5 = arb.b2.imass;
									arb.b2.posx += Jx * t5;
									arb.b2.posy += Jy * t5;
									var _this1 = arb.b2;
									var dr1 = rn2 * arb.b2.iinertia * jn;
									_this1.rot += dr1;
									if(dr1 * dr1 > 0.0001) {
										_this1.axisx = Math.sin(_this1.rot);
										_this1.axisy = Math.cos(_this1.rot);
									} else {
										var d21 = dr1 * dr1;
										var p1 = 1 - 0.5 * d21;
										var m1 = 1 - d21 * d21 / 8;
										var nx1 = (p1 * _this1.axisx + dr1 * _this1.axisy) * m1;
										_this1.axisy = (p1 * _this1.axisy - dr1 * _this1.axisx) * m1;
										_this1.axisx = nx1;
									}
								}
							}
						}
					} else {
						var gnormx = 0.0;
						var gnormy = 0.0;
						var gproj;
						var clip1x = 0.0;
						var clip1y = 0.0;
						var clip2x = 0;
						var clip2y = 0;
						if(arb.ptype == 0) {
							gnormx = arb.b1.axisy * arb.lnormx - arb.b1.axisx * arb.lnormy;
							gnormy = arb.lnormx * arb.b1.axisx + arb.lnormy * arb.b1.axisy;
							gproj = arb.lproj + (gnormx * arb.b1.posx + gnormy * arb.b1.posy);
							clip1x = arb.b2.axisy * arb.c1.lr1x - arb.b2.axisx * arb.c1.lr1y;
							clip1y = arb.c1.lr1x * arb.b2.axisx + arb.c1.lr1y * arb.b2.axisy;
							var t6 = 1.0;
							clip1x += arb.b2.posx * t6;
							clip1y += arb.b2.posy * t6;
							if(arb.hpc2) {
								clip2x = arb.b2.axisy * arb.c2.lr1x - arb.b2.axisx * arb.c2.lr1y;
								clip2y = arb.c2.lr1x * arb.b2.axisx + arb.c2.lr1y * arb.b2.axisy;
								var t7 = 1.0;
								clip2x += arb.b2.posx * t7;
								clip2y += arb.b2.posy * t7;
							}
						} else {
							gnormx = arb.b2.axisy * arb.lnormx - arb.b2.axisx * arb.lnormy;
							gnormy = arb.lnormx * arb.b2.axisx + arb.lnormy * arb.b2.axisy;
							gproj = arb.lproj + (gnormx * arb.b2.posx + gnormy * arb.b2.posy);
							clip1x = arb.b1.axisy * arb.c1.lr1x - arb.b1.axisx * arb.c1.lr1y;
							clip1y = arb.c1.lr1x * arb.b1.axisx + arb.c1.lr1y * arb.b1.axisy;
							var t8 = 1.0;
							clip1x += arb.b1.posx * t8;
							clip1y += arb.b1.posy * t8;
							if(arb.hpc2) {
								clip2x = arb.b1.axisy * arb.c2.lr1x - arb.b1.axisx * arb.c2.lr1y;
								clip2y = arb.c2.lr1x * arb.b1.axisx + arb.c2.lr1y * arb.b1.axisy;
								var t9 = 1.0;
								clip2x += arb.b1.posx * t9;
								clip2y += arb.b1.posy * t9;
							}
						}
						var err1 = clip1x * gnormx + clip1y * gnormy - gproj - arb.radius;
						err1 += nape_Config.collisionSlop;
						var err2 = 0.0;
						if(arb.hpc2) {
							err2 = clip2x * gnormx + clip2y * gnormy - gproj - arb.radius;
							err2 += nape_Config.collisionSlop;
						}
						if(err1 < 0 || err2 < 0) {
							if(arb.rev) {
								gnormx = -gnormx;
								gnormy = -gnormy;
							}
							var c1r1x = 0.0;
							var c1r1y = 0.0;
							c1r1x = clip1x - arb.b1.posx;
							c1r1y = clip1y - arb.b1.posy;
							var c1r2x = 0.0;
							var c1r2y = 0.0;
							c1r2x = clip1x - arb.b2.posx;
							c1r2y = clip1y - arb.b2.posy;
							var c2r1x = 0;
							var c2r1y = 0;
							var c2r2x = 0;
							var c2r2y = 0;
							if(arb.hpc2) {
								c2r1x = clip2x - arb.b1.posx;
								c2r1y = clip2y - arb.b1.posy;
								c2r2x = clip2x - arb.b2.posx;
								c2r2y = clip2y - arb.b2.posy;
								var rn1a = gnormy * c1r1x - gnormx * c1r1y;
								var rn1b = gnormy * c1r2x - gnormx * c1r2y;
								var rn2a = gnormy * c2r1x - gnormx * c2r1y;
								var rn2b = gnormy * c2r2x - gnormx * c2r2y;
								var mass_sum = arb.b1.smass + arb.b2.smass;
								arb.kMassa = mass_sum + arb.b1.sinertia * rn1a * rn1a + arb.b2.sinertia * rn1b * rn1b;
								arb.kMassb = mass_sum + arb.b1.sinertia * rn1a * rn2a + arb.b2.sinertia * rn1b * rn2b;
								arb.kMassc = mass_sum + arb.b1.sinertia * rn2a * rn2a + arb.b2.sinertia * rn2b * rn2b;
								var Ka = 0.0;
								var Kb = 0.0;
								var Kc = 0.0;
								Ka = arb.kMassa;
								Kb = arb.kMassb;
								Kc = arb.kMassc;
								var bx = err1 * arb.biasCoef;
								var by = err2 * arb.biasCoef;
								while(true) {
									var xx = 0.0;
									var xy = 0.0;
									xx = bx;
									xy = by;
									xx = -xx;
									xy = -xy;
									var det = arb.kMassa * arb.kMassc - arb.kMassb * arb.kMassb;
									if(det != det) {
										xy = 0;
										xx = xy;
									} else if(det == 0) {
										if(arb.kMassa != 0) {
											xx /= arb.kMassa;
										} else {
											xx = 0;
										}
										if(arb.kMassc != 0) {
											xy /= arb.kMassc;
										} else {
											xy = 0;
										}
									} else {
										det = 1 / det;
										var t10 = det * (arb.kMassc * xx - arb.kMassb * xy);
										xy = det * (arb.kMassa * xy - arb.kMassb * xx);
										xx = t10;
									}
									if(xx >= 0 && xy >= 0) {
										var t11 = (xx + xy) * arb.b1.imass;
										arb.b1.posx -= gnormx * t11;
										arb.b1.posy -= gnormy * t11;
										var _this2 = arb.b1;
										var dr2 = -arb.b1.iinertia * (rn1a * xx + rn2a * xy);
										_this2.rot += dr2;
										if(dr2 * dr2 > 0.0001) {
											_this2.axisx = Math.sin(_this2.rot);
											_this2.axisy = Math.cos(_this2.rot);
										} else {
											var d22 = dr2 * dr2;
											var p2 = 1 - 0.5 * d22;
											var m2 = 1 - d22 * d22 / 8;
											var nx2 = (p2 * _this2.axisx + dr2 * _this2.axisy) * m2;
											_this2.axisy = (p2 * _this2.axisy - dr2 * _this2.axisx) * m2;
											_this2.axisx = nx2;
										}
										var t12 = (xx + xy) * arb.b2.imass;
										arb.b2.posx += gnormx * t12;
										arb.b2.posy += gnormy * t12;
										var _this3 = arb.b2;
										var dr3 = arb.b2.iinertia * (rn1b * xx + rn2b * xy);
										_this3.rot += dr3;
										if(dr3 * dr3 > 0.0001) {
											_this3.axisx = Math.sin(_this3.rot);
											_this3.axisy = Math.cos(_this3.rot);
										} else {
											var d23 = dr3 * dr3;
											var p3 = 1 - 0.5 * d23;
											var m3 = 1 - d23 * d23 / 8;
											var nx3 = (p3 * _this3.axisx + dr3 * _this3.axisy) * m3;
											_this3.axisy = (p3 * _this3.axisy - dr3 * _this3.axisx) * m3;
											_this3.axisx = nx3;
										}
										break;
									}
									xx = -bx / Ka;
									xy = 0;
									var vn2 = Kb * xx + by;
									if(xx >= 0 && vn2 >= 0) {
										var t13 = (xx + xy) * arb.b1.imass;
										arb.b1.posx -= gnormx * t13;
										arb.b1.posy -= gnormy * t13;
										var _this4 = arb.b1;
										var dr4 = -arb.b1.iinertia * (rn1a * xx + rn2a * xy);
										_this4.rot += dr4;
										if(dr4 * dr4 > 0.0001) {
											_this4.axisx = Math.sin(_this4.rot);
											_this4.axisy = Math.cos(_this4.rot);
										} else {
											var d24 = dr4 * dr4;
											var p4 = 1 - 0.5 * d24;
											var m4 = 1 - d24 * d24 / 8;
											var nx4 = (p4 * _this4.axisx + dr4 * _this4.axisy) * m4;
											_this4.axisy = (p4 * _this4.axisy - dr4 * _this4.axisx) * m4;
											_this4.axisx = nx4;
										}
										var t14 = (xx + xy) * arb.b2.imass;
										arb.b2.posx += gnormx * t14;
										arb.b2.posy += gnormy * t14;
										var _this5 = arb.b2;
										var dr5 = arb.b2.iinertia * (rn1b * xx + rn2b * xy);
										_this5.rot += dr5;
										if(dr5 * dr5 > 0.0001) {
											_this5.axisx = Math.sin(_this5.rot);
											_this5.axisy = Math.cos(_this5.rot);
										} else {
											var d25 = dr5 * dr5;
											var p5 = 1 - 0.5 * d25;
											var m5 = 1 - d25 * d25 / 8;
											var nx5 = (p5 * _this5.axisx + dr5 * _this5.axisy) * m5;
											_this5.axisy = (p5 * _this5.axisy - dr5 * _this5.axisx) * m5;
											_this5.axisx = nx5;
										}
										break;
									}
									xx = 0;
									xy = -by / Kc;
									var vn1 = Kb * xy + bx;
									if(xy >= 0 && vn1 >= 0) {
										var t15 = (xx + xy) * arb.b1.imass;
										arb.b1.posx -= gnormx * t15;
										arb.b1.posy -= gnormy * t15;
										var _this6 = arb.b1;
										var dr6 = -arb.b1.iinertia * (rn1a * xx + rn2a * xy);
										_this6.rot += dr6;
										if(dr6 * dr6 > 0.0001) {
											_this6.axisx = Math.sin(_this6.rot);
											_this6.axisy = Math.cos(_this6.rot);
										} else {
											var d26 = dr6 * dr6;
											var p6 = 1 - 0.5 * d26;
											var m6 = 1 - d26 * d26 / 8;
											var nx6 = (p6 * _this6.axisx + dr6 * _this6.axisy) * m6;
											_this6.axisy = (p6 * _this6.axisy - dr6 * _this6.axisx) * m6;
											_this6.axisx = nx6;
										}
										var t16 = (xx + xy) * arb.b2.imass;
										arb.b2.posx += gnormx * t16;
										arb.b2.posy += gnormy * t16;
										var _this7 = arb.b2;
										var dr7 = arb.b2.iinertia * (rn1b * xx + rn2b * xy);
										_this7.rot += dr7;
										if(dr7 * dr7 > 0.0001) {
											_this7.axisx = Math.sin(_this7.rot);
											_this7.axisy = Math.cos(_this7.rot);
										} else {
											var d27 = dr7 * dr7;
											var p7 = 1 - 0.5 * d27;
											var m7 = 1 - d27 * d27 / 8;
											var nx7 = (p7 * _this7.axisx + dr7 * _this7.axisy) * m7;
											_this7.axisy = (p7 * _this7.axisy - dr7 * _this7.axisx) * m7;
											_this7.axisx = nx7;
										}
										break;
									}
									if(!false) {
										break;
									}
								}
							} else {
								var rn11 = gnormy * c1r1x - gnormx * c1r1y;
								var rn21 = gnormy * c1r2x - gnormx * c1r2y;
								var K1 = arb.b2.smass + rn21 * rn21 * arb.b2.sinertia + arb.b1.smass + rn11 * rn11 * arb.b1.sinertia;
								if(K1 != 0) {
									var jn1 = -arb.biasCoef * err1 / K1;
									var Jx1 = 0.0;
									var Jy1 = 0.0;
									var t17 = jn1;
									Jx1 = gnormx * t17;
									Jy1 = gnormy * t17;
									var t18 = arb.b1.imass;
									arb.b1.posx -= Jx1 * t18;
									arb.b1.posy -= Jy1 * t18;
									var _this8 = arb.b1;
									var dr8 = -rn11 * arb.b1.iinertia * jn1;
									_this8.rot += dr8;
									if(dr8 * dr8 > 0.0001) {
										_this8.axisx = Math.sin(_this8.rot);
										_this8.axisy = Math.cos(_this8.rot);
									} else {
										var d28 = dr8 * dr8;
										var p8 = 1 - 0.5 * d28;
										var m8 = 1 - d28 * d28 / 8;
										var nx8 = (p8 * _this8.axisx + dr8 * _this8.axisy) * m8;
										_this8.axisy = (p8 * _this8.axisy - dr8 * _this8.axisx) * m8;
										_this8.axisx = nx8;
									}
									var t19 = arb.b2.imass;
									arb.b2.posx += Jx1 * t19;
									arb.b2.posy += Jy1 * t19;
									var _this9 = arb.b2;
									var dr9 = rn21 * arb.b2.iinertia * jn1;
									_this9.rot += dr9;
									if(dr9 * dr9 > 0.0001) {
										_this9.axisx = Math.sin(_this9.rot);
										_this9.axisy = Math.cos(_this9.rot);
									} else {
										var d29 = dr9 * dr9;
										var p9 = 1 - 0.5 * d29;
										var m9 = 1 - d29 * d29 / 8;
										var nx9 = (p9 * _this9.axisx + dr9 * _this9.axisy) * m9;
										_this9.axisy = (p9 * _this9.axisy - dr9 * _this9.axisx) * m9;
										_this9.axisx = nx9;
									}
								}
							}
						}
					}
				}
				arbi = arbi.next;
				if(fst && arbi == null) {
					arbi = this.c_arbiters_true.head;
					fst = false;
				}
			}
		}
	}
	,narrowPhase: function(s1,s2,stat,in_arb,continuous) {
		var _gthis = this;
		var ret = null;
		var b1 = s1.body;
		var b2 = s2.body;
		var con_ignore;
		con_ignore = false;
		var cx_ite = b1.constraints.head;
		while(cx_ite != null) {
			var con = cx_ite.elt;
			if(con.ignore && con.pair_exists(b1.id,b2.id)) {
				con_ignore = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		var itype;
		var itype1;
		if(!con_ignore) {
			var cur = s1;
			while(cur != null && cur.group == null) if(cur.ishape != null) {
				cur = cur.ishape.body;
			} else if(cur.icompound != null) {
				cur = cur.icompound.compound;
			} else {
				cur = cur.ibody.compound;
			}
			var g1 = cur == null ? null : cur.group;
			var itype2;
			if(g1 == null) {
				itype2 = false;
			} else {
				var cur1 = s2;
				while(cur1 != null && cur1.group == null) if(cur1.ishape != null) {
					cur1 = cur1.ishape.body;
				} else if(cur1.icompound != null) {
					cur1 = cur1.icompound.compound;
				} else {
					cur1 = cur1.ibody.compound;
				}
				var g2 = cur1 == null ? null : cur1.group;
				if(g2 == null) {
					itype2 = false;
				} else {
					var ret1 = false;
					while(g1 != null && g2 != null) {
						if(g1 == g2) {
							ret1 = g1.ignore;
							break;
						}
						if(g1.depth < g2.depth) {
							g2 = g2.group;
						} else {
							g1 = g1.group;
						}
					}
					itype2 = ret1;
				}
			}
			itype1 = !itype2;
		} else {
			itype1 = false;
		}
		if(itype1) {
			var itype3;
			if(s1.sensorEnabled || s2.sensorEnabled) {
				var _this = s1.filter;
				var x = s2.filter;
				if((_this.sensorMask & x.sensorGroup) != 0) {
					itype3 = (x.sensorMask & _this.sensorGroup) != 0;
				} else {
					itype3 = false;
				}
			} else {
				itype3 = false;
			}
			if(itype3) {
				itype = 2;
			} else {
				var itype4;
				var itype5;
				if(s1.fluidEnabled || s2.fluidEnabled) {
					var _this1 = s1.filter;
					var x1 = s2.filter;
					if((_this1.fluidMask & x1.fluidGroup) != 0) {
						itype5 = (x1.fluidMask & _this1.fluidGroup) != 0;
					} else {
						itype5 = false;
					}
				} else {
					itype5 = false;
				}
				if(itype5) {
					itype4 = !(b1.imass == 0 && b2.imass == 0 && b1.iinertia == 0 && b2.iinertia == 0);
				} else {
					itype4 = false;
				}
				if(itype4) {
					itype = 0;
				} else {
					var itype6;
					var _this2 = s1.filter;
					var x2 = s2.filter;
					if((_this2.collisionMask & x2.collisionGroup) != 0 && (x2.collisionMask & _this2.collisionGroup) != 0) {
						itype6 = !(b1.imass == 0 && b2.imass == 0 && b1.iinertia == 0 && b2.iinertia == 0);
					} else {
						itype6 = false;
					}
					if(itype6) {
						itype = 1;
					} else {
						itype = -1;
					}
				}
			}
		} else {
			itype = -1;
		}
		if(itype != -1) {
			var sa;
			var sb;
			if(s1.type > s2.type) {
				sa = s2;
				sb = s1;
			} else if(s1.type == s2.type) {
				if(s1.id < s2.id) {
					sa = s1;
					sb = s2;
				} else {
					sb = s1;
					sa = s2;
				}
			} else {
				sa = s1;
				sb = s2;
			}
			var reverse = sa == s2;
			if(itype == 0) {
				var xarb;
				if(in_arb == null) {
					var ret2 = null;
					var b = b1.arbiters.length < b2.arbiters.length ? b1 : b2;
					var cx_ite1 = b.arbiters.head;
					while(cx_ite1 != null) {
						var arb = cx_ite1.elt;
						if(arb.id == sa.id && arb.di == sb.id) {
							ret2 = arb;
							break;
						}
						cx_ite1 = cx_ite1.next;
					}
					xarb = ret2;
				} else {
					xarb = in_arb;
				}
				var first = xarb == null;
				var arb1;
				var swapped = false;
				if(first) {
					if(zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool == null) {
						arb1 = new zpp_$nape_dynamics_ZPP_$FluidArbiter();
					} else {
						arb1 = zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool = arb1.next;
						arb1.next = null;
					}
				} else if(xarb.fluidarb == null) {
					xarb.cleared = true;
					var _this3 = xarb.b1.arbiters;
					var pre = null;
					var cur2 = _this3.head;
					var ret3 = false;
					while(cur2 != null) {
						if(cur2.elt == xarb) {
							var old;
							var ret4;
							if(pre == null) {
								old = _this3.head;
								ret4 = old.next;
								_this3.head = ret4;
								if(_this3.head == null) {
									_this3.pushmod = true;
								}
							} else {
								old = pre.next;
								ret4 = old.next;
								pre.next = ret4;
								if(ret4 == null) {
									_this3.pushmod = true;
								}
							}
							var o = old;
							o.elt = null;
							o.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o;
							_this3.modified = true;
							_this3.length--;
							_this3.pushmod = true;
							ret3 = true;
							break;
						}
						pre = cur2;
						cur2 = cur2.next;
					}
					var _this4 = xarb.b2.arbiters;
					var pre1 = null;
					var cur3 = _this4.head;
					var ret5 = false;
					while(cur3 != null) {
						if(cur3.elt == xarb) {
							var old1;
							var ret6;
							if(pre1 == null) {
								old1 = _this4.head;
								ret6 = old1.next;
								_this4.head = ret6;
								if(_this4.head == null) {
									_this4.pushmod = true;
								}
							} else {
								old1 = pre1.next;
								ret6 = old1.next;
								pre1.next = ret6;
								if(ret6 == null) {
									_this4.pushmod = true;
								}
							}
							var o1 = old1;
							o1.elt = null;
							o1.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o1;
							_this4.modified = true;
							_this4.length--;
							_this4.pushmod = true;
							ret5 = true;
							break;
						}
						pre1 = cur3;
						cur3 = cur3.next;
					}
					if(xarb.pair != null) {
						xarb.pair.arb = null;
						xarb.pair = null;
					}
					xarb.active = false;
					this.f_arbiters.modified = true;
					if(zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool == null) {
						arb1 = new zpp_$nape_dynamics_ZPP_$FluidArbiter();
					} else {
						arb1 = zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool = arb1.next;
						arb1.next = null;
					}
					arb1.intchange = true;
					first = true;
					swapped = true;
				} else {
					arb1 = xarb.fluidarb;
				}
				var inttype = 4;
				if(first || arb1.stamp != this.stamp || continuous) {
					arb1.stamp = this.stamp;
					if(zpp_$nape_geom_ZPP_$Collide.flowCollide(sa,sb,arb1)) {
						if(first) {
							var di = sb.id;
							arb1.b1 = s1.body;
							arb1.ws1 = s1;
							arb1.b2 = s2.body;
							arb1.ws2 = s2;
							arb1.id = sa.id;
							arb1.di = di;
							var _this5 = arb1.b1.arbiters;
							var ret7;
							if(zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool == null) {
								ret7 = new zpp_$nape_util_ZNPNode_$ZPP_$Arbiter();
							} else {
								ret7 = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = ret7.next;
								ret7.next = null;
							}
							ret7.elt = arb1;
							var temp = ret7;
							temp.next = _this5.head;
							_this5.head = temp;
							_this5.modified = true;
							_this5.length++;
							var _this6 = arb1.b2.arbiters;
							var ret8;
							if(zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool == null) {
								ret8 = new zpp_$nape_util_ZNPNode_$ZPP_$Arbiter();
							} else {
								ret8 = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = ret8.next;
								ret8.next = null;
							}
							ret8.elt = arb1;
							var temp1 = ret8;
							temp1.next = _this6.head;
							_this6.head = temp1;
							_this6.modified = true;
							_this6.length++;
							arb1.active = true;
							arb1.present = 0;
							arb1.cleared = false;
							arb1.sleeping = false;
							arb1.fresh = false;
							arb1.presentable = false;
							arb1.nx = 0;
							arb1.ny = 1;
							arb1.dampx = 0;
							arb1.dampy = 0;
							arb1.adamp = 0.0;
							var _this7 = this.f_arbiters;
							var ret9;
							if(zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool == null) {
								ret9 = new zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter();
							} else {
								ret9 = zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool = ret9.next;
								ret9.next = null;
							}
							ret9.elt = arb1;
							var temp2 = ret9;
							temp2.next = _this7.head;
							_this7.head = temp2;
							_this7.modified = true;
							_this7.length++;
							arb1.fresh = !swapped;
						} else {
							arb1.fresh = arb1.up_stamp < this.stamp - 1 || arb1.endGenerated == this.stamp && continuous;
						}
						arb1.up_stamp = arb1.stamp;
						if(arb1.fresh || (arb1.immState & 4) == 0) {
							arb1.immState = 1;
							var anyimpure = false;
							var arbs1 = arb1.ws1.id > arb1.ws2.id ? arb1.ws2 : arb1.ws1;
							var arbs2 = arb1.ws1.id > arb1.ws2.id ? arb1.ws1 : arb1.ws2;
							var _this8 = this.mrca1;
							while(_this8.head != null) {
								var ret10 = _this8.head;
								_this8.head = ret10.next;
								var o2 = ret10;
								o2.elt = null;
								o2.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = o2;
								if(_this8.head == null) {
									_this8.pushmod = true;
								}
								_this8.modified = true;
								_this8.length--;
							}
							_this8.pushmod = true;
							var _this9 = this.mrca2;
							while(_this9.head != null) {
								var ret11 = _this9.head;
								_this9.head = ret11.next;
								var o3 = ret11;
								o3.elt = null;
								o3.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = o3;
								if(_this9.head == null) {
									_this9.pushmod = true;
								}
								_this9.modified = true;
								_this9.length--;
							}
							_this9.pushmod = true;
							if(arbs1.cbSet != null) {
								var _this10 = this.mrca1;
								var ret12;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
									ret12 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
								} else {
									ret12 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret12.next;
									ret12.next = null;
								}
								ret12.elt = arbs1;
								var temp3 = ret12;
								temp3.next = _this10.head;
								_this10.head = temp3;
								_this10.modified = true;
								_this10.length++;
							}
							if(arbs1.body.cbSet != null) {
								var _this11 = this.mrca1;
								var o4 = arbs1.body;
								var ret13;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
									ret13 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
								} else {
									ret13 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret13.next;
									ret13.next = null;
								}
								ret13.elt = o4;
								var temp4 = ret13;
								temp4.next = _this11.head;
								_this11.head = temp4;
								_this11.modified = true;
								_this11.length++;
							}
							if(arbs2.cbSet != null) {
								var _this12 = this.mrca2;
								var ret14;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
									ret14 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
								} else {
									ret14 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret14.next;
									ret14.next = null;
								}
								ret14.elt = arbs2;
								var temp5 = ret14;
								temp5.next = _this12.head;
								_this12.head = temp5;
								_this12.modified = true;
								_this12.length++;
							}
							if(arbs2.body.cbSet != null) {
								var _this13 = this.mrca2;
								var o5 = arbs2.body;
								var ret15;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
									ret15 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
								} else {
									ret15 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret15.next;
									ret15.next = null;
								}
								ret15.elt = o5;
								var temp6 = ret15;
								temp6.next = _this13.head;
								_this13.head = temp6;
								_this13.modified = true;
								_this13.length++;
							}
							var c1 = arbs1.body.compound;
							var c2 = arbs2.body.compound;
							while(c1 != c2) {
								var d1 = c1 == null ? 0 : c1.depth;
								var d2 = c2 == null ? 0 : c2.depth;
								if(d1 < d2) {
									if(c2.cbSet != null) {
										var _this14 = this.mrca2;
										var ret16;
										if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
											ret16 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
										} else {
											ret16 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
											zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret16.next;
											ret16.next = null;
										}
										ret16.elt = c2;
										var temp7 = ret16;
										temp7.next = _this14.head;
										_this14.head = temp7;
										_this14.modified = true;
										_this14.length++;
									}
									c2 = c2.compound;
								} else {
									if(c1.cbSet != null) {
										var _this15 = this.mrca1;
										var ret17;
										if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
											ret17 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
										} else {
											ret17 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
											zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret17.next;
											ret17.next = null;
										}
										ret17.elt = c1;
										var temp8 = ret17;
										temp8.next = _this15.head;
										_this15.head = temp8;
										_this15.modified = true;
										_this15.length++;
									}
									c1 = c1.compound;
								}
							}
							var cx_ite2 = this.mrca1.head;
							while(cx_ite2 != null) {
								var i1 = cx_ite2.elt;
								var cx_ite3 = this.mrca2.head;
								while(cx_ite3 != null) {
									var i2 = cx_ite3.elt;
									var cb1 = i1.cbSet;
									var cb2 = i2.cbSet;
									var _this16 = cb1.manager;
									var ret18 = null;
									var pairs = cb1.cbpairs.length < cb2.cbpairs.length ? cb1.cbpairs : cb2.cbpairs;
									var cx_ite4 = pairs.head;
									while(cx_ite4 != null) {
										var p = cx_ite4.elt;
										if(p.a == cb1 && p.b == cb2 || p.a == cb2 && p.b == cb1) {
											ret18 = p;
											break;
										}
										cx_ite4 = cx_ite4.next;
									}
									if(ret18 == null) {
										var ret19;
										if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
											ret19 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
										} else {
											ret19 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
											zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret19.next;
											ret19.next = null;
										}
										ret19.zip_listeners = true;
										if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(cb1,cb2)) {
											ret19.a = cb1;
											ret19.b = cb2;
										} else {
											ret19.a = cb2;
											ret19.b = cb1;
										}
										ret18 = ret19;
										cb1.cbpairs.add(ret18);
										if(cb2 != cb1) {
											cb2.cbpairs.add(ret18);
										}
									}
									if(ret18.zip_listeners) {
										ret18.zip_listeners = false;
										ret18.__validate();
									}
									if(ret18.listeners.head == null) {
										cx_ite3 = cx_ite3.next;
										continue;
									}
									var callbackset = null;
									var ncallbackset = null;
									var _this17 = this.prelisteners;
									while(_this17.head != null) {
										var ret20 = _this17.head;
										_this17.head = ret20.next;
										var o6 = ret20;
										o6.elt = null;
										o6.next = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
										zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = o6;
										if(_this17.head == null) {
											_this17.pushmod = true;
										}
										_this17.modified = true;
										_this17.length--;
									}
									_this17.pushmod = true;
									var lite = null;
									var _this18 = cb1.manager;
									var ret21 = null;
									var pairs1 = cb1.cbpairs.length < cb2.cbpairs.length ? cb1.cbpairs : cb2.cbpairs;
									var cx_ite5 = pairs1.head;
									while(cx_ite5 != null) {
										var p1 = cx_ite5.elt;
										if(p1.a == cb1 && p1.b == cb2 || p1.a == cb2 && p1.b == cb1) {
											ret21 = p1;
											break;
										}
										cx_ite5 = cx_ite5.next;
									}
									if(ret21 == null) {
										var ret22;
										if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
											ret22 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
										} else {
											ret22 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
											zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret22.next;
											ret22.next = null;
										}
										ret22.zip_listeners = true;
										if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(cb1,cb2)) {
											ret22.a = cb1;
											ret22.b = cb2;
										} else {
											ret22.a = cb2;
											ret22.b = cb1;
										}
										ret21 = ret22;
										cb1.cbpairs.add(ret21);
										if(cb2 != cb1) {
											cb2.cbpairs.add(ret21);
										}
									}
									if(ret21.zip_listeners) {
										ret21.zip_listeners = false;
										ret21.__validate();
									}
									var cx_ite6 = ret21.listeners.head;
									while(cx_ite6 != null) {
										var x3 = cx_ite6.elt;
										if(x3.event == 5) {
											if((x3.itype & inttype) != 0) {
												var _this19 = _gthis.prelisteners;
												var ret23;
												if(zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool == null) {
													ret23 = new zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener();
												} else {
													ret23 = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
													zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = ret23.next;
													ret23.next = null;
												}
												ret23.elt = x3;
												var temp9 = ret23;
												if(lite == null) {
													temp9.next = _this19.head;
													_this19.head = temp9;
												} else {
													temp9.next = lite.next;
													lite.next = temp9;
												}
												_this19.pushmod = _this19.modified = true;
												_this19.length++;
												lite = temp9;
												if(!anyimpure) {
													anyimpure = !x3.pure;
												} else {
													anyimpure = true;
												}
											}
										}
										cx_ite6 = cx_ite6.next;
									}
									if(this.prelisteners.head == null) {
										cx_ite3 = cx_ite3.next;
										continue;
									}
									callbackset = zpp_$nape_phys_ZPP_$Interactor.get(i1,i2);
									if(callbackset == null) {
										ncallbackset = zpp_$nape_space_ZPP_$CallbackSet.get(i1,i2);
										this.add_callbackset(ncallbackset);
									}
									if(callbackset == null || (callbackset.FLUIDstamp != this.stamp || continuous) && (callbackset.FLUIDstate & 4) == 0) {
										if(ncallbackset != null) {
											callbackset = ncallbackset;
										}
										if(callbackset != null) {
											var cx_ite7 = this.prelisteners.head;
											while(cx_ite7 != null) {
												var listener = cx_ite7.elt;
												if(listener.itype == 7) {
													callbackset.COLLISIONstamp = this.stamp;
													callbackset.SENSORstamp = this.stamp;
													callbackset.FLUIDstamp = this.stamp;
												} else {
													callbackset.FLUIDstamp = this.stamp;
												}
												cx_ite7 = cx_ite7.next;
											}
										}
										arb1.mutable = true;
										if(arb1.wrap_position != null) {
											arb1.wrap_position.zpp_inner._immutable = false;
										}
										var pact = arb1.active;
										arb1.active = true;
										var emptycontacts = false;
										this.precb.zpp_inner.pre_arbiter = arb1;
										this.precb.zpp_inner.set = callbackset;
										var cx_ite8 = this.prelisteners.head;
										while(cx_ite8 != null) {
											var listener1 = cx_ite8.elt;
											this.precb.zpp_inner.listener = listener1;
											var cb = this.precb.zpp_inner;
											var o11 = callbackset.int1;
											var o21 = callbackset.int2;
											var ret24;
											var _this20 = listener1.options1;
											var xs = o11.cbTypes;
											if(_this20.nonemptyintersection(xs,_this20.includes) && !_this20.nonemptyintersection(xs,_this20.excludes)) {
												var _this21 = listener1.options2;
												var xs1 = o21.cbTypes;
												if(_this21.nonemptyintersection(xs1,_this21.includes)) {
													ret24 = !_this21.nonemptyintersection(xs1,_this21.excludes);
												} else {
													ret24 = false;
												}
											} else {
												ret24 = false;
											}
											if(ret24) {
												cb.int1 = o11;
												cb.int2 = o21;
											} else {
												cb.int1 = o21;
												cb.int2 = o11;
											}
											this.precb.zpp_inner.pre_swapped = i1 != this.precb.zpp_inner.int1;
											var ret25 = listener1.handlerp(this.precb);
											if(ret25 != null) {
												var ret26;
												if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT == null) {
													zpp_$nape_util_ZPP_$Flags.internal = true;
													zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT = new nape_callbacks_PreFlag();
													zpp_$nape_util_ZPP_$Flags.internal = false;
												}
												if(ret25 == zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT) {
													ret26 = 5;
												} else {
													if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE == null) {
														zpp_$nape_util_ZPP_$Flags.internal = true;
														zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE = new nape_callbacks_PreFlag();
														zpp_$nape_util_ZPP_$Flags.internal = false;
													}
													if(ret25 == zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE) {
														ret26 = 1;
													} else {
														if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE == null) {
															zpp_$nape_util_ZPP_$Flags.internal = true;
															zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE = new nape_callbacks_PreFlag();
															zpp_$nape_util_ZPP_$Flags.internal = false;
														}
														if(ret25 == zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE) {
															ret26 = 6;
														} else {
															ret26 = 2;
														}
													}
												}
												arb1.immState = ret26;
											}
											cx_ite8 = cx_ite8.next;
										}
										arb1.mutable = false;
										if(arb1.wrap_position != null) {
											arb1.wrap_position.zpp_inner._immutable = true;
										}
										arb1.active = pact;
										if(callbackset != null) {
											var cx_ite9 = this.prelisteners.head;
											while(cx_ite9 != null) {
												var listener2 = cx_ite9.elt;
												if(listener2.itype == 7) {
													callbackset.COLLISIONstate = arb1.immState;
													callbackset.SENSORstate = arb1.immState;
													callbackset.FLUIDstate = arb1.immState;
												} else {
													callbackset.FLUIDstate = arb1.immState;
												}
												cx_ite9 = cx_ite9.next;
											}
										}
									} else if(callbackset == null) {
										if((arb1.immState & 4) == 0) {
											arb1.immState = 1;
										}
									} else {
										arb1.immState = callbackset.FLUIDstate;
									}
									cx_ite3 = cx_ite3.next;
								}
								cx_ite2 = cx_ite2.next;
							}
							if(anyimpure && (arb1.immState & 4) == 0) {
								if(arb1.b1.type == 2) {
									var o7 = arb1.b1;
									if(!o7.world) {
										o7.component.waket = this.stamp + (this.midstep ? 0 : 1);
										if(o7.type == 3) {
											o7.kinematicDelaySleep = true;
										}
										if(o7.component.sleeping) {
											this.really_wake(o7,false);
										}
									}
								}
								if(arb1.b1.type == 2) {
									var o8 = arb1.b2;
									if(!o8.world) {
										o8.component.waket = this.stamp + (this.midstep ? 0 : 1);
										if(o8.type == 3) {
											o8.kinematicDelaySleep = true;
										}
										if(o8.component.sleeping) {
											this.really_wake(o8,false);
										}
									}
								}
							}
						}
						if((arb1.immState & 1) != 0) {
							if(arb1.b1.type == 2 && arb1.b1.component.sleeping) {
								var o9 = arb1.b1;
								if(!o9.world) {
									o9.component.waket = this.stamp + (this.midstep ? 0 : 1);
									if(o9.type == 3) {
										o9.kinematicDelaySleep = true;
									}
									if(o9.component.sleeping) {
										this.really_wake(o9,false);
									}
								}
							}
							if(arb1.b2.type == 2 && arb1.b2.component.sleeping) {
								var o10 = arb1.b2;
								if(!o10.world) {
									o10.component.waket = this.stamp + (this.midstep ? 0 : 1);
									if(o10.type == 3) {
										o10.kinematicDelaySleep = true;
									}
									if(o10.component.sleeping) {
										this.really_wake(o10,false);
									}
								}
							}
						}
						if(arb1.sleeping) {
							arb1.sleeping = false;
							var _this22 = this.f_arbiters;
							var ret27;
							if(zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool == null) {
								ret27 = new zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter();
							} else {
								ret27 = zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool = ret27.next;
								ret27.next = null;
							}
							ret27.elt = arb1;
							var temp10 = ret27;
							temp10.next = _this22.head;
							_this22.head = temp10;
							_this22.modified = true;
							_this22.length++;
						}
						ret = arb1;
					} else if(first) {
						var o12 = arb1;
						o12.next = zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool = o12;
						ret = null;
					} else {
						ret = arb1;
					}
				} else {
					ret = arb1;
				}
			} else if(itype == 1) {
				var carbs = stat ? this.c_arbiters_true : this.c_arbiters_false;
				var xarb1;
				if(in_arb == null) {
					var ret28 = null;
					var b3 = b1.arbiters.length < b2.arbiters.length ? b1 : b2;
					var cx_ite10 = b3.arbiters.head;
					while(cx_ite10 != null) {
						var arb2 = cx_ite10.elt;
						if(arb2.id == sa.id && arb2.di == sb.id) {
							ret28 = arb2;
							break;
						}
						cx_ite10 = cx_ite10.next;
					}
					xarb1 = ret28;
				} else {
					xarb1 = in_arb;
				}
				var first1 = xarb1 == null;
				var arb3;
				var swapped1 = false;
				if(first1) {
					if(zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool == null) {
						arb3 = new zpp_$nape_dynamics_ZPP_$ColArbiter();
					} else {
						arb3 = zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool = arb3.next;
						arb3.next = null;
					}
					arb3.stat = stat;
				} else if(xarb1.colarb == null) {
					xarb1.cleared = true;
					var _this23 = xarb1.b1.arbiters;
					var pre2 = null;
					var cur4 = _this23.head;
					var ret29 = false;
					while(cur4 != null) {
						if(cur4.elt == xarb1) {
							var old2;
							var ret30;
							if(pre2 == null) {
								old2 = _this23.head;
								ret30 = old2.next;
								_this23.head = ret30;
								if(_this23.head == null) {
									_this23.pushmod = true;
								}
							} else {
								old2 = pre2.next;
								ret30 = old2.next;
								pre2.next = ret30;
								if(ret30 == null) {
									_this23.pushmod = true;
								}
							}
							var o13 = old2;
							o13.elt = null;
							o13.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o13;
							_this23.modified = true;
							_this23.length--;
							_this23.pushmod = true;
							ret29 = true;
							break;
						}
						pre2 = cur4;
						cur4 = cur4.next;
					}
					var _this24 = xarb1.b2.arbiters;
					var pre3 = null;
					var cur5 = _this24.head;
					var ret31 = false;
					while(cur5 != null) {
						if(cur5.elt == xarb1) {
							var old3;
							var ret32;
							if(pre3 == null) {
								old3 = _this24.head;
								ret32 = old3.next;
								_this24.head = ret32;
								if(_this24.head == null) {
									_this24.pushmod = true;
								}
							} else {
								old3 = pre3.next;
								ret32 = old3.next;
								pre3.next = ret32;
								if(ret32 == null) {
									_this24.pushmod = true;
								}
							}
							var o14 = old3;
							o14.elt = null;
							o14.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o14;
							_this24.modified = true;
							_this24.length--;
							_this24.pushmod = true;
							ret31 = true;
							break;
						}
						pre3 = cur5;
						cur5 = cur5.next;
					}
					if(xarb1.pair != null) {
						xarb1.pair.arb = null;
						xarb1.pair = null;
					}
					xarb1.active = false;
					this.f_arbiters.modified = true;
					if(zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool == null) {
						arb3 = new zpp_$nape_dynamics_ZPP_$ColArbiter();
					} else {
						arb3 = zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool = arb3.next;
						arb3.next = null;
					}
					arb3.intchange = true;
					arb3.stat = stat;
					first1 = true;
					swapped1 = true;
				} else {
					arb3 = xarb1.colarb;
					reverse = sa != arb3.s1;
					if(arb3.stat != stat) {
						arb3.stat = stat;
						if(!arb3.sleeping) {
							(stat ? this.c_arbiters_false : this.c_arbiters_true).remove(arb3);
							carbs.add(arb3);
						}
					}
				}
				var inttype1 = 1;
				if(first1 || arb3.stamp != this.stamp || continuous) {
					arb3.stamp = this.stamp;
					if(zpp_$nape_geom_ZPP_$Collide.contactCollide(sa,sb,arb3,reverse)) {
						if(first1) {
							var di1 = sb.id;
							arb3.b1 = s1.body;
							arb3.ws1 = s1;
							arb3.b2 = s2.body;
							arb3.ws2 = s2;
							arb3.id = sa.id;
							arb3.di = di1;
							var _this25 = arb3.b1.arbiters;
							var ret33;
							if(zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool == null) {
								ret33 = new zpp_$nape_util_ZNPNode_$ZPP_$Arbiter();
							} else {
								ret33 = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = ret33.next;
								ret33.next = null;
							}
							ret33.elt = arb3;
							var temp11 = ret33;
							temp11.next = _this25.head;
							_this25.head = temp11;
							_this25.modified = true;
							_this25.length++;
							var _this26 = arb3.b2.arbiters;
							var ret34;
							if(zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool == null) {
								ret34 = new zpp_$nape_util_ZNPNode_$ZPP_$Arbiter();
							} else {
								ret34 = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = ret34.next;
								ret34.next = null;
							}
							ret34.elt = arb3;
							var temp12 = ret34;
							temp12.next = _this26.head;
							_this26.head = temp12;
							_this26.modified = true;
							_this26.length++;
							arb3.active = true;
							arb3.present = 0;
							arb3.cleared = false;
							arb3.sleeping = false;
							arb3.fresh = false;
							arb3.presentable = false;
							arb3.s1 = s1;
							arb3.s2 = s2;
							if(!arb3.userdef_restitution) {
								if(arb3.s1.material.elasticity <= -Infinity || arb3.s2.material.elasticity <= -Infinity) {
									arb3.restitution = 0;
								} else if(arb3.s1.material.elasticity >= Infinity || arb3.s2.material.elasticity >= Infinity) {
									arb3.restitution = 1;
								} else {
									arb3.restitution = (arb3.s1.material.elasticity + arb3.s2.material.elasticity) / 2;
								}
								if(arb3.restitution < 0) {
									arb3.restitution = 0;
								}
								if(arb3.restitution > 1) {
									arb3.restitution = 1;
								}
							}
							if(!arb3.userdef_dyn_fric) {
								arb3.dyn_fric = Math.sqrt(arb3.s1.material.dynamicFriction * arb3.s2.material.dynamicFriction);
							}
							if(!arb3.userdef_stat_fric) {
								arb3.stat_fric = Math.sqrt(arb3.s1.material.staticFriction * arb3.s2.material.staticFriction);
							}
							if(!arb3.userdef_rfric) {
								arb3.rfric = Math.sqrt(arb3.s1.material.rollingFriction * arb3.s2.material.rollingFriction);
							}
							var ret35;
							if(zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool == null) {
								ret35 = new zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter();
							} else {
								ret35 = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = ret35.next;
								ret35.next = null;
							}
							ret35.elt = arb3;
							var temp13 = ret35;
							temp13.next = carbs.head;
							carbs.head = temp13;
							carbs.modified = true;
							carbs.length++;
							arb3.fresh = !swapped1;
						} else {
							arb3.fresh = arb3.up_stamp < this.stamp - 1 || arb3.endGenerated == this.stamp && continuous;
						}
						arb3.up_stamp = arb3.stamp;
						if(arb3.fresh || (arb3.immState & 4) == 0) {
							arb3.immState = 1;
							var anyimpure1 = false;
							var arbs11 = arb3.ws1.id > arb3.ws2.id ? arb3.ws2 : arb3.ws1;
							var arbs21 = arb3.ws1.id > arb3.ws2.id ? arb3.ws1 : arb3.ws2;
							var _this27 = this.mrca1;
							while(_this27.head != null) {
								var ret36 = _this27.head;
								_this27.head = ret36.next;
								var o15 = ret36;
								o15.elt = null;
								o15.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = o15;
								if(_this27.head == null) {
									_this27.pushmod = true;
								}
								_this27.modified = true;
								_this27.length--;
							}
							_this27.pushmod = true;
							var _this28 = this.mrca2;
							while(_this28.head != null) {
								var ret37 = _this28.head;
								_this28.head = ret37.next;
								var o16 = ret37;
								o16.elt = null;
								o16.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = o16;
								if(_this28.head == null) {
									_this28.pushmod = true;
								}
								_this28.modified = true;
								_this28.length--;
							}
							_this28.pushmod = true;
							if(arbs11.cbSet != null) {
								var _this29 = this.mrca1;
								var ret38;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
									ret38 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
								} else {
									ret38 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret38.next;
									ret38.next = null;
								}
								ret38.elt = arbs11;
								var temp14 = ret38;
								temp14.next = _this29.head;
								_this29.head = temp14;
								_this29.modified = true;
								_this29.length++;
							}
							if(arbs11.body.cbSet != null) {
								var _this30 = this.mrca1;
								var o17 = arbs11.body;
								var ret39;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
									ret39 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
								} else {
									ret39 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret39.next;
									ret39.next = null;
								}
								ret39.elt = o17;
								var temp15 = ret39;
								temp15.next = _this30.head;
								_this30.head = temp15;
								_this30.modified = true;
								_this30.length++;
							}
							if(arbs21.cbSet != null) {
								var _this31 = this.mrca2;
								var ret40;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
									ret40 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
								} else {
									ret40 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret40.next;
									ret40.next = null;
								}
								ret40.elt = arbs21;
								var temp16 = ret40;
								temp16.next = _this31.head;
								_this31.head = temp16;
								_this31.modified = true;
								_this31.length++;
							}
							if(arbs21.body.cbSet != null) {
								var _this32 = this.mrca2;
								var o18 = arbs21.body;
								var ret41;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
									ret41 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
								} else {
									ret41 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret41.next;
									ret41.next = null;
								}
								ret41.elt = o18;
								var temp17 = ret41;
								temp17.next = _this32.head;
								_this32.head = temp17;
								_this32.modified = true;
								_this32.length++;
							}
							var c11 = arbs11.body.compound;
							var c21 = arbs21.body.compound;
							while(c11 != c21) {
								var d11 = c11 == null ? 0 : c11.depth;
								var d21 = c21 == null ? 0 : c21.depth;
								if(d11 < d21) {
									if(c21.cbSet != null) {
										var _this33 = this.mrca2;
										var ret42;
										if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
											ret42 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
										} else {
											ret42 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
											zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret42.next;
											ret42.next = null;
										}
										ret42.elt = c21;
										var temp18 = ret42;
										temp18.next = _this33.head;
										_this33.head = temp18;
										_this33.modified = true;
										_this33.length++;
									}
									c21 = c21.compound;
								} else {
									if(c11.cbSet != null) {
										var _this34 = this.mrca1;
										var ret43;
										if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
											ret43 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
										} else {
											ret43 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
											zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret43.next;
											ret43.next = null;
										}
										ret43.elt = c11;
										var temp19 = ret43;
										temp19.next = _this34.head;
										_this34.head = temp19;
										_this34.modified = true;
										_this34.length++;
									}
									c11 = c11.compound;
								}
							}
							var cx_ite11 = this.mrca1.head;
							while(cx_ite11 != null) {
								var i11 = cx_ite11.elt;
								var cx_ite12 = this.mrca2.head;
								while(cx_ite12 != null) {
									var i21 = cx_ite12.elt;
									var cb11 = i11.cbSet;
									var cb21 = i21.cbSet;
									var _this35 = cb11.manager;
									var ret44 = null;
									var pairs2 = cb11.cbpairs.length < cb21.cbpairs.length ? cb11.cbpairs : cb21.cbpairs;
									var cx_ite13 = pairs2.head;
									while(cx_ite13 != null) {
										var p2 = cx_ite13.elt;
										if(p2.a == cb11 && p2.b == cb21 || p2.a == cb21 && p2.b == cb11) {
											ret44 = p2;
											break;
										}
										cx_ite13 = cx_ite13.next;
									}
									if(ret44 == null) {
										var ret45;
										if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
											ret45 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
										} else {
											ret45 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
											zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret45.next;
											ret45.next = null;
										}
										ret45.zip_listeners = true;
										if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(cb11,cb21)) {
											ret45.a = cb11;
											ret45.b = cb21;
										} else {
											ret45.a = cb21;
											ret45.b = cb11;
										}
										ret44 = ret45;
										cb11.cbpairs.add(ret44);
										if(cb21 != cb11) {
											cb21.cbpairs.add(ret44);
										}
									}
									if(ret44.zip_listeners) {
										ret44.zip_listeners = false;
										ret44.__validate();
									}
									if(ret44.listeners.head == null) {
										cx_ite12 = cx_ite12.next;
										continue;
									}
									var callbackset1 = null;
									var ncallbackset1 = null;
									var _this36 = this.prelisteners;
									while(_this36.head != null) {
										var ret46 = _this36.head;
										_this36.head = ret46.next;
										var o19 = ret46;
										o19.elt = null;
										o19.next = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
										zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = o19;
										if(_this36.head == null) {
											_this36.pushmod = true;
										}
										_this36.modified = true;
										_this36.length--;
									}
									_this36.pushmod = true;
									var lite1 = null;
									var _this37 = cb11.manager;
									var ret47 = null;
									var pairs3 = cb11.cbpairs.length < cb21.cbpairs.length ? cb11.cbpairs : cb21.cbpairs;
									var cx_ite14 = pairs3.head;
									while(cx_ite14 != null) {
										var p3 = cx_ite14.elt;
										if(p3.a == cb11 && p3.b == cb21 || p3.a == cb21 && p3.b == cb11) {
											ret47 = p3;
											break;
										}
										cx_ite14 = cx_ite14.next;
									}
									if(ret47 == null) {
										var ret48;
										if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
											ret48 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
										} else {
											ret48 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
											zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret48.next;
											ret48.next = null;
										}
										ret48.zip_listeners = true;
										if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(cb11,cb21)) {
											ret48.a = cb11;
											ret48.b = cb21;
										} else {
											ret48.a = cb21;
											ret48.b = cb11;
										}
										ret47 = ret48;
										cb11.cbpairs.add(ret47);
										if(cb21 != cb11) {
											cb21.cbpairs.add(ret47);
										}
									}
									if(ret47.zip_listeners) {
										ret47.zip_listeners = false;
										ret47.__validate();
									}
									var cx_ite15 = ret47.listeners.head;
									while(cx_ite15 != null) {
										var x4 = cx_ite15.elt;
										if(x4.event == 5) {
											if((x4.itype & inttype1) != 0) {
												var _this38 = _gthis.prelisteners;
												var ret49;
												if(zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool == null) {
													ret49 = new zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener();
												} else {
													ret49 = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
													zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = ret49.next;
													ret49.next = null;
												}
												ret49.elt = x4;
												var temp20 = ret49;
												if(lite1 == null) {
													temp20.next = _this38.head;
													_this38.head = temp20;
												} else {
													temp20.next = lite1.next;
													lite1.next = temp20;
												}
												_this38.pushmod = _this38.modified = true;
												_this38.length++;
												lite1 = temp20;
												if(!anyimpure1) {
													anyimpure1 = !x4.pure;
												} else {
													anyimpure1 = true;
												}
											}
										}
										cx_ite15 = cx_ite15.next;
									}
									if(this.prelisteners.head == null) {
										cx_ite12 = cx_ite12.next;
										continue;
									}
									callbackset1 = zpp_$nape_phys_ZPP_$Interactor.get(i11,i21);
									if(callbackset1 == null) {
										ncallbackset1 = zpp_$nape_space_ZPP_$CallbackSet.get(i11,i21);
										this.add_callbackset(ncallbackset1);
									}
									if(callbackset1 == null || (callbackset1.COLLISIONstamp != this.stamp || continuous) && (callbackset1.COLLISIONstate & 4) == 0) {
										if(ncallbackset1 != null) {
											callbackset1 = ncallbackset1;
										}
										if(callbackset1 != null) {
											var cx_ite16 = this.prelisteners.head;
											while(cx_ite16 != null) {
												var listener3 = cx_ite16.elt;
												if(listener3.itype == 7) {
													callbackset1.COLLISIONstamp = this.stamp;
													callbackset1.SENSORstamp = this.stamp;
													callbackset1.FLUIDstamp = this.stamp;
												} else {
													callbackset1.COLLISIONstamp = this.stamp;
												}
												cx_ite16 = cx_ite16.next;
											}
										}
										arb3.mutable = true;
										if(arb3.wrap_normal != null) {
											arb3.wrap_normal.zpp_inner._immutable = false;
										}
										if(arb3.wrap_contacts != null) {
											arb3.wrap_contacts.zpp_inner.immutable = false;
										}
										var pact1 = arb3.active;
										arb3.active = true;
										var emptycontacts1 = false;
										var fst = true;
										var pre4 = null;
										var prei = null;
										var cx_itei = arb3.innards.next;
										arb3.hc2 = false;
										var cx_ite17 = arb3.contacts.next;
										while(cx_ite17 != null) {
											var c = cx_ite17;
											if(c.stamp + nape_Config.arbiterExpirationDelay < arb3.stamp) {
												var _this39 = arb3.contacts;
												var old4;
												var ret50;
												if(pre4 == null) {
													old4 = _this39.next;
													ret50 = old4.next;
													_this39.next = ret50;
													if(_this39.next == null) {
														_this39.pushmod = true;
													}
												} else {
													old4 = pre4.next;
													ret50 = old4.next;
													pre4.next = ret50;
													if(ret50 == null) {
														_this39.pushmod = true;
													}
												}
												old4._inuse = false;
												_this39.modified = true;
												_this39.length--;
												_this39.pushmod = true;
												cx_ite17 = ret50;
												var _this40 = arb3.innards;
												var old5;
												var ret51;
												if(prei == null) {
													old5 = _this40.next;
													ret51 = old5.next;
													_this40.next = ret51;
													if(_this40.next == null) {
														_this40.pushmod = true;
													}
												} else {
													old5 = prei.next;
													ret51 = old5.next;
													prei.next = ret51;
													if(ret51 == null) {
														_this40.pushmod = true;
													}
												}
												old5._inuse = false;
												_this40.modified = true;
												_this40.length--;
												_this40.pushmod = true;
												cx_itei = ret51;
												var o20 = c;
												o20.arbiter = null;
												o20.next = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
												zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = o20;
												continue;
											}
											var ci = c.inner;
											var pact2 = c.active;
											c.active = c.stamp == arb3.stamp;
											if(c.active) {
												if(fst) {
													fst = false;
													arb3.c1 = ci;
													arb3.oc1 = c;
												} else {
													arb3.hc2 = true;
													arb3.c2 = ci;
													arb3.oc2 = c;
												}
											}
											if(pact2 != c.active) {
												arb3.contacts.modified = true;
											}
											pre4 = cx_ite17;
											prei = cx_itei;
											cx_itei = cx_itei.next;
											cx_ite17 = cx_ite17.next;
										}
										if(arb3.hc2) {
											arb3.hpc2 = true;
											if(arb3.oc1.posOnly) {
												var tmp = arb3.c1;
												arb3.c1 = arb3.c2;
												arb3.c2 = tmp;
												var tmp2 = arb3.oc1;
												arb3.oc1 = arb3.oc2;
												arb3.oc2 = tmp2;
												arb3.hc2 = false;
											} else if(arb3.oc2.posOnly) {
												arb3.hc2 = false;
											}
											if(arb3.oc1.posOnly) {
												fst = true;
											}
										} else {
											arb3.hpc2 = false;
										}
										this.precb.zpp_inner.pre_arbiter = arb3;
										this.precb.zpp_inner.set = callbackset1;
										var cx_ite18 = this.prelisteners.head;
										while(cx_ite18 != null) {
											var listener4 = cx_ite18.elt;
											this.precb.zpp_inner.listener = listener4;
											var cb3 = this.precb.zpp_inner;
											var o110 = callbackset1.int1;
											var o22 = callbackset1.int2;
											var ret52;
											var _this41 = listener4.options1;
											var xs2 = o110.cbTypes;
											if(_this41.nonemptyintersection(xs2,_this41.includes) && !_this41.nonemptyintersection(xs2,_this41.excludes)) {
												var _this42 = listener4.options2;
												var xs3 = o22.cbTypes;
												if(_this42.nonemptyintersection(xs3,_this42.includes)) {
													ret52 = !_this42.nonemptyintersection(xs3,_this42.excludes);
												} else {
													ret52 = false;
												}
											} else {
												ret52 = false;
											}
											if(ret52) {
												cb3.int1 = o110;
												cb3.int2 = o22;
											} else {
												cb3.int1 = o22;
												cb3.int2 = o110;
											}
											this.precb.zpp_inner.pre_swapped = i11 != this.precb.zpp_inner.int1;
											var ret53 = listener4.handlerp(this.precb);
											if(ret53 != null) {
												var ret54;
												if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT == null) {
													zpp_$nape_util_ZPP_$Flags.internal = true;
													zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT = new nape_callbacks_PreFlag();
													zpp_$nape_util_ZPP_$Flags.internal = false;
												}
												if(ret53 == zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT) {
													ret54 = 5;
												} else {
													if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE == null) {
														zpp_$nape_util_ZPP_$Flags.internal = true;
														zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE = new nape_callbacks_PreFlag();
														zpp_$nape_util_ZPP_$Flags.internal = false;
													}
													if(ret53 == zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE) {
														ret54 = 1;
													} else {
														if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE == null) {
															zpp_$nape_util_ZPP_$Flags.internal = true;
															zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE = new nape_callbacks_PreFlag();
															zpp_$nape_util_ZPP_$Flags.internal = false;
														}
														if(ret53 == zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE) {
															ret54 = 6;
														} else {
															ret54 = 2;
														}
													}
												}
												arb3.immState = ret54;
											}
											cx_ite18 = cx_ite18.next;
										}
										arb3.mutable = false;
										if(arb3.wrap_normal != null) {
											arb3.wrap_normal.zpp_inner._immutable = true;
										}
										if(arb3.wrap_contacts != null) {
											arb3.wrap_contacts.zpp_inner.immutable = true;
										}
										arb3.active = pact1;
										if(callbackset1 != null) {
											var cx_ite19 = this.prelisteners.head;
											while(cx_ite19 != null) {
												var listener5 = cx_ite19.elt;
												if(listener5.itype == 7) {
													callbackset1.COLLISIONstate = arb3.immState;
													callbackset1.SENSORstate = arb3.immState;
													callbackset1.FLUIDstate = arb3.immState;
												} else {
													callbackset1.COLLISIONstate = arb3.immState;
												}
												cx_ite19 = cx_ite19.next;
											}
										}
									} else if(callbackset1 == null) {
										if((arb3.immState & 4) == 0) {
											arb3.immState = 1;
										}
									} else {
										arb3.immState = callbackset1.COLLISIONstate;
									}
									cx_ite12 = cx_ite12.next;
								}
								cx_ite11 = cx_ite11.next;
							}
							if(anyimpure1 && (arb3.immState & 4) == 0) {
								if(arb3.b1.type == 2) {
									var o23 = arb3.b1;
									if(!o23.world) {
										o23.component.waket = this.stamp + (this.midstep ? 0 : 1);
										if(o23.type == 3) {
											o23.kinematicDelaySleep = true;
										}
										if(o23.component.sleeping) {
											this.really_wake(o23,false);
										}
									}
								}
								if(arb3.b1.type == 2) {
									var o24 = arb3.b2;
									if(!o24.world) {
										o24.component.waket = this.stamp + (this.midstep ? 0 : 1);
										if(o24.type == 3) {
											o24.kinematicDelaySleep = true;
										}
										if(o24.component.sleeping) {
											this.really_wake(o24,false);
										}
									}
								}
							}
						}
						if((arb3.immState & 1) != 0) {
							if(arb3.b1.type == 2 && arb3.b1.component.sleeping) {
								var o25 = arb3.b1;
								if(!o25.world) {
									o25.component.waket = this.stamp + (this.midstep ? 0 : 1);
									if(o25.type == 3) {
										o25.kinematicDelaySleep = true;
									}
									if(o25.component.sleeping) {
										this.really_wake(o25,false);
									}
								}
							}
							if(arb3.b2.type == 2 && arb3.b2.component.sleeping) {
								var o26 = arb3.b2;
								if(!o26.world) {
									o26.component.waket = this.stamp + (this.midstep ? 0 : 1);
									if(o26.type == 3) {
										o26.kinematicDelaySleep = true;
									}
									if(o26.component.sleeping) {
										this.really_wake(o26,false);
									}
								}
							}
						}
						if(arb3.sleeping) {
							arb3.sleeping = false;
							var ret55;
							if(zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool == null) {
								ret55 = new zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter();
							} else {
								ret55 = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = ret55.next;
								ret55.next = null;
							}
							ret55.elt = arb3;
							var temp21 = ret55;
							temp21.next = carbs.head;
							carbs.head = temp21;
							carbs.modified = true;
							carbs.length++;
						}
						ret = arb3;
					} else if(first1) {
						var o27 = arb3;
						o27.userdef_dyn_fric = false;
						o27.userdef_stat_fric = false;
						o27.userdef_restitution = false;
						o27.userdef_rfric = false;
						o27.__ref_edge1 = o27.__ref_edge2 = null;
						o27.next = zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool = o27;
						ret = null;
					} else {
						ret = arb3;
					}
				} else {
					ret = arb3;
				}
			} else {
				var xarb2;
				if(in_arb == null) {
					var ret56 = null;
					var b4 = b1.arbiters.length < b2.arbiters.length ? b1 : b2;
					var cx_ite20 = b4.arbiters.head;
					while(cx_ite20 != null) {
						var arb4 = cx_ite20.elt;
						if(arb4.id == sa.id && arb4.di == sb.id) {
							ret56 = arb4;
							break;
						}
						cx_ite20 = cx_ite20.next;
					}
					xarb2 = ret56;
				} else {
					xarb2 = in_arb;
				}
				var first2 = xarb2 == null;
				var arb5;
				var swapped2 = false;
				if(first2) {
					if(zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool == null) {
						arb5 = new zpp_$nape_dynamics_ZPP_$SensorArbiter();
					} else {
						arb5 = zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool = arb5.next;
						arb5.next = null;
					}
				} else if(xarb2.sensorarb == null) {
					xarb2.cleared = true;
					var _this43 = xarb2.b1.arbiters;
					var pre5 = null;
					var cur6 = _this43.head;
					var ret57 = false;
					while(cur6 != null) {
						if(cur6.elt == xarb2) {
							var old6;
							var ret58;
							if(pre5 == null) {
								old6 = _this43.head;
								ret58 = old6.next;
								_this43.head = ret58;
								if(_this43.head == null) {
									_this43.pushmod = true;
								}
							} else {
								old6 = pre5.next;
								ret58 = old6.next;
								pre5.next = ret58;
								if(ret58 == null) {
									_this43.pushmod = true;
								}
							}
							var o28 = old6;
							o28.elt = null;
							o28.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o28;
							_this43.modified = true;
							_this43.length--;
							_this43.pushmod = true;
							ret57 = true;
							break;
						}
						pre5 = cur6;
						cur6 = cur6.next;
					}
					var _this44 = xarb2.b2.arbiters;
					var pre6 = null;
					var cur7 = _this44.head;
					var ret59 = false;
					while(cur7 != null) {
						if(cur7.elt == xarb2) {
							var old7;
							var ret60;
							if(pre6 == null) {
								old7 = _this44.head;
								ret60 = old7.next;
								_this44.head = ret60;
								if(_this44.head == null) {
									_this44.pushmod = true;
								}
							} else {
								old7 = pre6.next;
								ret60 = old7.next;
								pre6.next = ret60;
								if(ret60 == null) {
									_this44.pushmod = true;
								}
							}
							var o29 = old7;
							o29.elt = null;
							o29.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o29;
							_this44.modified = true;
							_this44.length--;
							_this44.pushmod = true;
							ret59 = true;
							break;
						}
						pre6 = cur7;
						cur7 = cur7.next;
					}
					if(xarb2.pair != null) {
						xarb2.pair.arb = null;
						xarb2.pair = null;
					}
					xarb2.active = false;
					this.f_arbiters.modified = true;
					if(zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool == null) {
						arb5 = new zpp_$nape_dynamics_ZPP_$SensorArbiter();
					} else {
						arb5 = zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool = arb5.next;
						arb5.next = null;
					}
					arb5.intchange = true;
					first2 = true;
					swapped2 = true;
				} else {
					arb5 = xarb2.sensorarb;
				}
				var inttype2 = 2;
				if(first2 || arb5.stamp != this.stamp || continuous) {
					arb5.stamp = this.stamp;
					if(zpp_$nape_geom_ZPP_$Collide.testCollide(sa,sb)) {
						if(first2) {
							var di2 = sb.id;
							arb5.b1 = s1.body;
							arb5.ws1 = s1;
							arb5.b2 = s2.body;
							arb5.ws2 = s2;
							arb5.id = sa.id;
							arb5.di = di2;
							var _this45 = arb5.b1.arbiters;
							var ret61;
							if(zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool == null) {
								ret61 = new zpp_$nape_util_ZNPNode_$ZPP_$Arbiter();
							} else {
								ret61 = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = ret61.next;
								ret61.next = null;
							}
							ret61.elt = arb5;
							var temp22 = ret61;
							temp22.next = _this45.head;
							_this45.head = temp22;
							_this45.modified = true;
							_this45.length++;
							var _this46 = arb5.b2.arbiters;
							var ret62;
							if(zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool == null) {
								ret62 = new zpp_$nape_util_ZNPNode_$ZPP_$Arbiter();
							} else {
								ret62 = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = ret62.next;
								ret62.next = null;
							}
							ret62.elt = arb5;
							var temp23 = ret62;
							temp23.next = _this46.head;
							_this46.head = temp23;
							_this46.modified = true;
							_this46.length++;
							arb5.active = true;
							arb5.present = 0;
							arb5.cleared = false;
							arb5.sleeping = false;
							arb5.fresh = false;
							arb5.presentable = false;
							var _this47 = this.s_arbiters;
							var ret63;
							if(zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool == null) {
								ret63 = new zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter();
							} else {
								ret63 = zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool = ret63.next;
								ret63.next = null;
							}
							ret63.elt = arb5;
							var temp24 = ret63;
							temp24.next = _this47.head;
							_this47.head = temp24;
							_this47.modified = true;
							_this47.length++;
							arb5.fresh = !swapped2;
						} else {
							arb5.fresh = arb5.up_stamp < this.stamp - 1 || arb5.endGenerated == this.stamp && continuous;
						}
						arb5.up_stamp = arb5.stamp;
						if(arb5.fresh || (arb5.immState & 4) == 0) {
							arb5.immState = 1;
							var anyimpure2 = false;
							var arbs12 = arb5.ws1.id > arb5.ws2.id ? arb5.ws2 : arb5.ws1;
							var arbs22 = arb5.ws1.id > arb5.ws2.id ? arb5.ws1 : arb5.ws2;
							var _this48 = this.mrca1;
							while(_this48.head != null) {
								var ret64 = _this48.head;
								_this48.head = ret64.next;
								var o30 = ret64;
								o30.elt = null;
								o30.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = o30;
								if(_this48.head == null) {
									_this48.pushmod = true;
								}
								_this48.modified = true;
								_this48.length--;
							}
							_this48.pushmod = true;
							var _this49 = this.mrca2;
							while(_this49.head != null) {
								var ret65 = _this49.head;
								_this49.head = ret65.next;
								var o31 = ret65;
								o31.elt = null;
								o31.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = o31;
								if(_this49.head == null) {
									_this49.pushmod = true;
								}
								_this49.modified = true;
								_this49.length--;
							}
							_this49.pushmod = true;
							if(arbs12.cbSet != null) {
								var _this50 = this.mrca1;
								var ret66;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
									ret66 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
								} else {
									ret66 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret66.next;
									ret66.next = null;
								}
								ret66.elt = arbs12;
								var temp25 = ret66;
								temp25.next = _this50.head;
								_this50.head = temp25;
								_this50.modified = true;
								_this50.length++;
							}
							if(arbs12.body.cbSet != null) {
								var _this51 = this.mrca1;
								var o32 = arbs12.body;
								var ret67;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
									ret67 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
								} else {
									ret67 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret67.next;
									ret67.next = null;
								}
								ret67.elt = o32;
								var temp26 = ret67;
								temp26.next = _this51.head;
								_this51.head = temp26;
								_this51.modified = true;
								_this51.length++;
							}
							if(arbs22.cbSet != null) {
								var _this52 = this.mrca2;
								var ret68;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
									ret68 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
								} else {
									ret68 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret68.next;
									ret68.next = null;
								}
								ret68.elt = arbs22;
								var temp27 = ret68;
								temp27.next = _this52.head;
								_this52.head = temp27;
								_this52.modified = true;
								_this52.length++;
							}
							if(arbs22.body.cbSet != null) {
								var _this53 = this.mrca2;
								var o33 = arbs22.body;
								var ret69;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
									ret69 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
								} else {
									ret69 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret69.next;
									ret69.next = null;
								}
								ret69.elt = o33;
								var temp28 = ret69;
								temp28.next = _this53.head;
								_this53.head = temp28;
								_this53.modified = true;
								_this53.length++;
							}
							var c12 = arbs12.body.compound;
							var c22 = arbs22.body.compound;
							while(c12 != c22) {
								var d12 = c12 == null ? 0 : c12.depth;
								var d22 = c22 == null ? 0 : c22.depth;
								if(d12 < d22) {
									if(c22.cbSet != null) {
										var _this54 = this.mrca2;
										var ret70;
										if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
											ret70 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
										} else {
											ret70 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
											zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret70.next;
											ret70.next = null;
										}
										ret70.elt = c22;
										var temp29 = ret70;
										temp29.next = _this54.head;
										_this54.head = temp29;
										_this54.modified = true;
										_this54.length++;
									}
									c22 = c22.compound;
								} else {
									if(c12.cbSet != null) {
										var _this55 = this.mrca1;
										var ret71;
										if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
											ret71 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
										} else {
											ret71 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
											zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret71.next;
											ret71.next = null;
										}
										ret71.elt = c12;
										var temp30 = ret71;
										temp30.next = _this55.head;
										_this55.head = temp30;
										_this55.modified = true;
										_this55.length++;
									}
									c12 = c12.compound;
								}
							}
							var cx_ite21 = this.mrca1.head;
							while(cx_ite21 != null) {
								var i12 = cx_ite21.elt;
								var cx_ite22 = this.mrca2.head;
								while(cx_ite22 != null) {
									var i22 = cx_ite22.elt;
									var cb12 = i12.cbSet;
									var cb22 = i22.cbSet;
									var _this56 = cb12.manager;
									var ret72 = null;
									var pairs4 = cb12.cbpairs.length < cb22.cbpairs.length ? cb12.cbpairs : cb22.cbpairs;
									var cx_ite23 = pairs4.head;
									while(cx_ite23 != null) {
										var p4 = cx_ite23.elt;
										if(p4.a == cb12 && p4.b == cb22 || p4.a == cb22 && p4.b == cb12) {
											ret72 = p4;
											break;
										}
										cx_ite23 = cx_ite23.next;
									}
									if(ret72 == null) {
										var ret73;
										if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
											ret73 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
										} else {
											ret73 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
											zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret73.next;
											ret73.next = null;
										}
										ret73.zip_listeners = true;
										if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(cb12,cb22)) {
											ret73.a = cb12;
											ret73.b = cb22;
										} else {
											ret73.a = cb22;
											ret73.b = cb12;
										}
										ret72 = ret73;
										cb12.cbpairs.add(ret72);
										if(cb22 != cb12) {
											cb22.cbpairs.add(ret72);
										}
									}
									if(ret72.zip_listeners) {
										ret72.zip_listeners = false;
										ret72.__validate();
									}
									if(ret72.listeners.head == null) {
										cx_ite22 = cx_ite22.next;
										continue;
									}
									var callbackset2 = null;
									var ncallbackset2 = null;
									var _this57 = this.prelisteners;
									while(_this57.head != null) {
										var ret74 = _this57.head;
										_this57.head = ret74.next;
										var o34 = ret74;
										o34.elt = null;
										o34.next = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
										zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = o34;
										if(_this57.head == null) {
											_this57.pushmod = true;
										}
										_this57.modified = true;
										_this57.length--;
									}
									_this57.pushmod = true;
									var lite2 = null;
									var _this58 = cb12.manager;
									var ret75 = null;
									var pairs5 = cb12.cbpairs.length < cb22.cbpairs.length ? cb12.cbpairs : cb22.cbpairs;
									var cx_ite24 = pairs5.head;
									while(cx_ite24 != null) {
										var p5 = cx_ite24.elt;
										if(p5.a == cb12 && p5.b == cb22 || p5.a == cb22 && p5.b == cb12) {
											ret75 = p5;
											break;
										}
										cx_ite24 = cx_ite24.next;
									}
									if(ret75 == null) {
										var ret76;
										if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
											ret76 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
										} else {
											ret76 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
											zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret76.next;
											ret76.next = null;
										}
										ret76.zip_listeners = true;
										if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(cb12,cb22)) {
											ret76.a = cb12;
											ret76.b = cb22;
										} else {
											ret76.a = cb22;
											ret76.b = cb12;
										}
										ret75 = ret76;
										cb12.cbpairs.add(ret75);
										if(cb22 != cb12) {
											cb22.cbpairs.add(ret75);
										}
									}
									if(ret75.zip_listeners) {
										ret75.zip_listeners = false;
										ret75.__validate();
									}
									var cx_ite25 = ret75.listeners.head;
									while(cx_ite25 != null) {
										var x5 = cx_ite25.elt;
										if(x5.event == 5) {
											if((x5.itype & inttype2) != 0) {
												var _this59 = _gthis.prelisteners;
												var ret77;
												if(zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool == null) {
													ret77 = new zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener();
												} else {
													ret77 = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
													zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = ret77.next;
													ret77.next = null;
												}
												ret77.elt = x5;
												var temp31 = ret77;
												if(lite2 == null) {
													temp31.next = _this59.head;
													_this59.head = temp31;
												} else {
													temp31.next = lite2.next;
													lite2.next = temp31;
												}
												_this59.pushmod = _this59.modified = true;
												_this59.length++;
												lite2 = temp31;
												if(!anyimpure2) {
													anyimpure2 = !x5.pure;
												} else {
													anyimpure2 = true;
												}
											}
										}
										cx_ite25 = cx_ite25.next;
									}
									if(this.prelisteners.head == null) {
										cx_ite22 = cx_ite22.next;
										continue;
									}
									callbackset2 = zpp_$nape_phys_ZPP_$Interactor.get(i12,i22);
									if(callbackset2 == null) {
										ncallbackset2 = zpp_$nape_space_ZPP_$CallbackSet.get(i12,i22);
										this.add_callbackset(ncallbackset2);
									}
									if(callbackset2 == null || (callbackset2.SENSORstamp != this.stamp || continuous) && (callbackset2.SENSORstate & 4) == 0) {
										if(ncallbackset2 != null) {
											callbackset2 = ncallbackset2;
										}
										if(callbackset2 != null) {
											var cx_ite26 = this.prelisteners.head;
											while(cx_ite26 != null) {
												var listener6 = cx_ite26.elt;
												if(listener6.itype == 7) {
													callbackset2.COLLISIONstamp = this.stamp;
													callbackset2.SENSORstamp = this.stamp;
													callbackset2.FLUIDstamp = this.stamp;
												} else {
													callbackset2.SENSORstamp = this.stamp;
												}
												cx_ite26 = cx_ite26.next;
											}
										}
										var pact3 = arb5.active;
										arb5.active = true;
										var emptycontacts2 = false;
										this.precb.zpp_inner.pre_arbiter = arb5;
										this.precb.zpp_inner.set = callbackset2;
										var cx_ite27 = this.prelisteners.head;
										while(cx_ite27 != null) {
											var listener7 = cx_ite27.elt;
											this.precb.zpp_inner.listener = listener7;
											var cb4 = this.precb.zpp_inner;
											var o111 = callbackset2.int1;
											var o210 = callbackset2.int2;
											var ret78;
											var _this60 = listener7.options1;
											var xs4 = o111.cbTypes;
											if(_this60.nonemptyintersection(xs4,_this60.includes) && !_this60.nonemptyintersection(xs4,_this60.excludes)) {
												var _this61 = listener7.options2;
												var xs5 = o210.cbTypes;
												if(_this61.nonemptyintersection(xs5,_this61.includes)) {
													ret78 = !_this61.nonemptyintersection(xs5,_this61.excludes);
												} else {
													ret78 = false;
												}
											} else {
												ret78 = false;
											}
											if(ret78) {
												cb4.int1 = o111;
												cb4.int2 = o210;
											} else {
												cb4.int1 = o210;
												cb4.int2 = o111;
											}
											this.precb.zpp_inner.pre_swapped = i12 != this.precb.zpp_inner.int1;
											var ret79 = listener7.handlerp(this.precb);
											if(ret79 != null) {
												var ret80;
												if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT == null) {
													zpp_$nape_util_ZPP_$Flags.internal = true;
													zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT = new nape_callbacks_PreFlag();
													zpp_$nape_util_ZPP_$Flags.internal = false;
												}
												if(ret79 == zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT) {
													ret80 = 5;
												} else {
													if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE == null) {
														zpp_$nape_util_ZPP_$Flags.internal = true;
														zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE = new nape_callbacks_PreFlag();
														zpp_$nape_util_ZPP_$Flags.internal = false;
													}
													if(ret79 == zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE) {
														ret80 = 1;
													} else {
														if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE == null) {
															zpp_$nape_util_ZPP_$Flags.internal = true;
															zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE = new nape_callbacks_PreFlag();
															zpp_$nape_util_ZPP_$Flags.internal = false;
														}
														if(ret79 == zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE) {
															ret80 = 6;
														} else {
															ret80 = 2;
														}
													}
												}
												arb5.immState = ret80;
											}
											cx_ite27 = cx_ite27.next;
										}
										arb5.active = pact3;
										if(callbackset2 != null) {
											var cx_ite28 = this.prelisteners.head;
											while(cx_ite28 != null) {
												var listener8 = cx_ite28.elt;
												if(listener8.itype == 7) {
													callbackset2.COLLISIONstate = arb5.immState;
													callbackset2.SENSORstate = arb5.immState;
													callbackset2.FLUIDstate = arb5.immState;
												} else {
													callbackset2.SENSORstate = arb5.immState;
												}
												cx_ite28 = cx_ite28.next;
											}
										}
									} else if(callbackset2 == null) {
										if((arb5.immState & 4) == 0) {
											arb5.immState = 1;
										}
									} else {
										arb5.immState = callbackset2.SENSORstate;
									}
									cx_ite22 = cx_ite22.next;
								}
								cx_ite21 = cx_ite21.next;
							}
							if(anyimpure2 && (arb5.immState & 4) == 0) {
								if(arb5.b1.type != 1) {
									var o35 = arb5.b1;
									if(!o35.world) {
										o35.component.waket = this.stamp + (this.midstep ? 0 : 1);
										if(o35.type == 3) {
											o35.kinematicDelaySleep = true;
										}
										if(o35.component.sleeping) {
											this.really_wake(o35,false);
										}
									}
								}
								if(arb5.b2.type != 1) {
									var o36 = arb5.b2;
									if(!o36.world) {
										o36.component.waket = this.stamp + (this.midstep ? 0 : 1);
										if(o36.type == 3) {
											o36.kinematicDelaySleep = true;
										}
										if(o36.component.sleeping) {
											this.really_wake(o36,false);
										}
									}
								}
							}
						}
						if(arb5.sleeping) {
							arb5.sleeping = false;
							var _this62 = this.s_arbiters;
							var ret81;
							if(zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool == null) {
								ret81 = new zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter();
							} else {
								ret81 = zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool = ret81.next;
								ret81.next = null;
							}
							ret81.elt = arb5;
							var temp32 = ret81;
							temp32.next = _this62.head;
							_this62.head = temp32;
							_this62.modified = true;
							_this62.length++;
						}
						ret = arb5;
					} else if(first2) {
						var o37 = arb5;
						o37.next = zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool = o37;
						ret = null;
					} else {
						ret = arb5;
					}
				} else {
					ret = arb5;
				}
			}
		}
		return ret;
	}
	,MRCA_chains: function(s1,s2) {
		var _this = this.mrca1;
		while(_this.head != null) {
			var ret = _this.head;
			_this.head = ret.next;
			var o = ret;
			o.elt = null;
			o.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = o;
			if(_this.head == null) {
				_this.pushmod = true;
			}
			_this.modified = true;
			_this.length--;
		}
		_this.pushmod = true;
		var _this1 = this.mrca2;
		while(_this1.head != null) {
			var ret1 = _this1.head;
			_this1.head = ret1.next;
			var o1 = ret1;
			o1.elt = null;
			o1.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = o1;
			if(_this1.head == null) {
				_this1.pushmod = true;
			}
			_this1.modified = true;
			_this1.length--;
		}
		_this1.pushmod = true;
		if(s1.cbSet != null) {
			var _this2 = this.mrca1;
			var ret2;
			if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
				ret2 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
			} else {
				ret2 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret2.next;
				ret2.next = null;
			}
			ret2.elt = s1;
			var temp = ret2;
			temp.next = _this2.head;
			_this2.head = temp;
			_this2.modified = true;
			_this2.length++;
		}
		if(s1.body.cbSet != null) {
			var _this3 = this.mrca1;
			var o2 = s1.body;
			var ret3;
			if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
				ret3 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
			} else {
				ret3 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret3.next;
				ret3.next = null;
			}
			ret3.elt = o2;
			var temp1 = ret3;
			temp1.next = _this3.head;
			_this3.head = temp1;
			_this3.modified = true;
			_this3.length++;
		}
		if(s2.cbSet != null) {
			var _this4 = this.mrca2;
			var ret4;
			if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
				ret4 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
			} else {
				ret4 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret4.next;
				ret4.next = null;
			}
			ret4.elt = s2;
			var temp2 = ret4;
			temp2.next = _this4.head;
			_this4.head = temp2;
			_this4.modified = true;
			_this4.length++;
		}
		if(s2.body.cbSet != null) {
			var _this5 = this.mrca2;
			var o3 = s2.body;
			var ret5;
			if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
				ret5 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
			} else {
				ret5 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret5.next;
				ret5.next = null;
			}
			ret5.elt = o3;
			var temp3 = ret5;
			temp3.next = _this5.head;
			_this5.head = temp3;
			_this5.modified = true;
			_this5.length++;
		}
		var c1 = s1.body.compound;
		var c2 = s2.body.compound;
		while(c1 != c2) {
			var d1 = c1 == null ? 0 : c1.depth;
			var d2 = c2 == null ? 0 : c2.depth;
			if(d1 < d2) {
				if(c2.cbSet != null) {
					var _this6 = this.mrca2;
					var ret6;
					if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
						ret6 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
					} else {
						ret6 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret6.next;
						ret6.next = null;
					}
					ret6.elt = c2;
					var temp4 = ret6;
					temp4.next = _this6.head;
					_this6.head = temp4;
					_this6.modified = true;
					_this6.length++;
				}
				c2 = c2.compound;
			} else {
				if(c1.cbSet != null) {
					var _this7 = this.mrca1;
					var ret7;
					if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
						ret7 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
					} else {
						ret7 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret7.next;
						ret7.next = null;
					}
					ret7.elt = c1;
					var temp5 = ret7;
					temp5.next = _this7.head;
					_this7.head = temp5;
					_this7.modified = true;
					_this7.length++;
				}
				c1 = c1.compound;
			}
		}
	}
	,__class__: zpp_$nape_space_ZPP_$Space
};
var zpp_$nape_space_ZPP_$SweepData = function() {
	this.aabb = null;
	this.shape = null;
	this.prev = null;
	this.next = null;
};
zpp_$nape_space_ZPP_$SweepData.__name__ = true;
zpp_$nape_space_ZPP_$SweepData.prototype = {
	__class__: zpp_$nape_space_ZPP_$SweepData
};
var zpp_$nape_space_ZPP_$SweepPhase = function(space) {
	this.list = null;
	zpp_$nape_space_ZPP_$Broadphase.call(this);
	this.space = space;
	this.is_sweep = true;
	this.sweep = this;
};
zpp_$nape_space_ZPP_$SweepPhase.__name__ = true;
zpp_$nape_space_ZPP_$SweepPhase.__super__ = zpp_$nape_space_ZPP_$Broadphase;
zpp_$nape_space_ZPP_$SweepPhase.prototype = $extend(zpp_$nape_space_ZPP_$Broadphase.prototype,{
	__insert: function(shape) {
		var dat;
		if(zpp_$nape_space_ZPP_$SweepData.zpp_pool == null) {
			dat = new zpp_$nape_space_ZPP_$SweepData();
		} else {
			dat = zpp_$nape_space_ZPP_$SweepData.zpp_pool;
			zpp_$nape_space_ZPP_$SweepData.zpp_pool = dat.next;
			dat.next = null;
		}
		shape.sweep = dat;
		dat.shape = shape;
		dat.aabb = shape.aabb;
		dat.next = this.list;
		if(this.list != null) {
			this.list.prev = dat;
		}
		this.list = dat;
	}
	,__remove: function(shape) {
		var dat = shape.sweep;
		if(dat.prev == null) {
			this.list = dat.next;
		} else {
			dat.prev.next = dat.next;
		}
		if(dat.next != null) {
			dat.next.prev = dat.prev;
		}
		shape.sweep = null;
		var o = dat;
		o.prev = null;
		o.shape = null;
		o.aabb = null;
		o.next = zpp_$nape_space_ZPP_$SweepData.zpp_pool;
		zpp_$nape_space_ZPP_$SweepData.zpp_pool = o;
	}
	,broadphase: function(space,discrete) {
		if(this.list != null) {
			var a = this.list.next;
			while(a != null) {
				var n = a.next;
				var b = a.prev;
				if(a.aabb.minx > b.aabb.minx) {
					a = n;
					continue;
				}
				while(b.prev != null && b.prev.aabb.minx > a.aabb.minx) b = b.prev;
				var prev = a.prev;
				prev.next = a.next;
				if(a.next != null) {
					a.next.prev = prev;
				}
				if(b.prev == null) {
					a.prev = null;
					this.list = a;
					a.next = b;
					b.prev = a;
				} else {
					a.prev = b.prev;
					b.prev = a;
					a.prev.next = a;
					a.next = b;
				}
				a = n;
			}
			var d1 = this.list;
			while(d1 != null) {
				var d2 = d1.next;
				var s1 = d1.shape;
				var b1 = s1.body;
				var bottom = d1.aabb.maxx;
				while(d2 != null) {
					if(d2.aabb.minx > bottom) {
						break;
					}
					var s2 = d2.shape;
					var b2 = s2.body;
					if(b2 == b1) {
						d2 = d2.next;
						continue;
					}
					if(b1.type == 1 && b2.type == 1) {
						d2 = d2.next;
						continue;
					}
					if(b1.component.sleeping && b2.component.sleeping) {
						d2 = d2.next;
						continue;
					}
					var _this = s1.aabb;
					var x = s2.aabb;
					if(!(x.miny > _this.maxy || _this.miny > x.maxy)) {
						if(discrete) {
							space.narrowPhase(s1,s2,b1.type != 2 || b2.type != 2,null,false);
						} else {
							space.continuousEvent(s1,s2,b1.type != 2 || b2.type != 2,null,false);
						}
					}
					d2 = d2.next;
				}
				d1 = d1.next;
			}
		}
	}
	,__class__: zpp_$nape_space_ZPP_$SweepPhase
});
var zpp_$nape_util_ZNPList_$ZPP_$Compound = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$Compound.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$Compound.prototype = {
	remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret1;
				if(pre == null) {
					old = this.head;
					ret1 = old.next;
					this.head = ret1;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret1 = old.next;
					pre.next = ret1;
					if(ret1 == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Compound
};
var zpp_$nape_util_ZNPList_$ZPP_$Edge = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$Edge.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$Edge.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Edge();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,insert: function(cur,o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Edge();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool = o;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Edge
};
var zpp_$nape_util_ZNPList_$ZPP_$AABBPair = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$AABBPair.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$AABBPair.prototype = {
	pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = o;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret1;
				if(pre == null) {
					old = this.head;
					ret1 = old.next;
					this.head = ret1;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret1 = old.next;
					pre.next = ret1;
					if(ret1 == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$AABBPair
};
var zpp_$nape_util_ZNPList_$ZPP_$Shape = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$Shape.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$Shape.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Shape();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,insert: function(cur,o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Shape();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret1;
				if(pre == null) {
					old = this.head;
					ret1 = old.next;
					this.head = ret1;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret1 = old.next;
					pre.next = ret1;
					if(ret1 == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Shape
};
var zpp_$nape_util_ZNPList_$ZPP_$Arbiter = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$Arbiter.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$Arbiter.prototype = {
	pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Arbiter
};
var zpp_$nape_util_ZNPList_$ZPP_$Body = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$Body.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$Body.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Body();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,insert: function(cur,o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Body();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool = o;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret1;
				if(pre == null) {
					old = this.head;
					ret1 = old.next;
					this.head = ret1;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret1 = old.next;
					pre.next = ret1;
					if(ret1 == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Body
};
var zpp_$nape_util_ZNPList_$ZPP_$CallbackSet = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$CallbackSet.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$CallbackSet.prototype = {
	__class__: zpp_$nape_util_ZNPList_$ZPP_$CallbackSet
};
var zpp_$nape_util_ZNPList_$ZPP_$Component = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$Component.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$Component.prototype = {
	pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool = o;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Component
};
var zpp_$nape_util_ZNPList_$ZPP_$FluidArbiter = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$FluidArbiter.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$FluidArbiter.prototype = {
	__class__: zpp_$nape_util_ZNPList_$ZPP_$FluidArbiter
};
var zpp_$nape_util_ZNPList_$ZPP_$SensorArbiter = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$SensorArbiter.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$SensorArbiter.prototype = {
	__class__: zpp_$nape_util_ZNPList_$ZPP_$SensorArbiter
};
var zpp_$nape_util_ZNPList_$ZPP_$Listener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$Listener.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$Listener.prototype = {
	remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret1;
				if(pre == null) {
					old = this.head;
					ret1 = old.next;
					this.head = ret1;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret1 = old.next;
					pre.next = ret1;
					if(ret1 == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Listener
};
var zpp_$nape_util_ZNPList_$ZPP_$ColArbiter = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$ColArbiter.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$ColArbiter.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret1;
				if(pre == null) {
					old = this.head;
					ret1 = old.next;
					this.head = ret1;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret1 = old.next;
					pre.next = ret1;
					if(ret1 == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$ColArbiter
};
var zpp_$nape_util_ZNPList_$ZPP_$ToiEvent = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$ToiEvent.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$ToiEvent.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool = o;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$ToiEvent
};
var zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup.prototype = {
	iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup
};
var zpp_$nape_util_ZNPList_$ZPP_$CbSetPair = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$CbSetPair.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$CbSetPair.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool = o;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret1;
				if(pre == null) {
					old = this.head;
					ret1 = old.next;
					this.head = ret1;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret1 = old.next;
					pre.next = ret1;
					if(ret1 == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$CbSetPair
};
var zpp_$nape_util_ZNPList_$ConvexResult = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ConvexResult.__name__ = true;
zpp_$nape_util_ZNPList_$ConvexResult.prototype = {
	iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ConvexResult
};
var zpp_$nape_util_ZNPList_$ZPP_$GeomPoly = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$GeomPoly.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$GeomPoly.prototype = {
	iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$GeomPoly
};
var zpp_$nape_util_ZNPList_$RayResult = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$RayResult.__name__ = true;
zpp_$nape_util_ZNPList_$RayResult.prototype = {
	iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$RayResult
};
var zpp_$nape_util_ZNPNode_$ZPP_$Compound = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$Compound.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$Compound.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$Compound
};
var zpp_$nape_util_ZNPNode_$ZPP_$Edge = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$Edge.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$Edge.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$Edge
};
var zpp_$nape_util_ZNPNode_$ZPP_$AABBPair = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$AABBPair
};
var zpp_$nape_util_ZNPNode_$ZPP_$Shape = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$Shape.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$Shape.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$Shape
};
var zpp_$nape_util_ZNPNode_$ZPP_$Arbiter = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$Arbiter
};
var zpp_$nape_util_ZNPNode_$ZPP_$Constraint = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$Constraint.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$Constraint.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$Constraint
};
var zpp_$nape_util_ZNPNode_$ZPP_$Body = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$Body.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$Body.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$Body
};
var zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet
};
var zpp_$nape_util_ZNPNode_$ZPP_$CbType = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$CbType.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$CbType.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$CbType
};
var zpp_$nape_util_ZNPNode_$ZPP_$Component = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$Component.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$Component.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$Component
};
var zpp_$nape_util_ZNPNode_$ZPP_$Vec2 = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$Vec2.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$Vec2.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$Vec2
};
var zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter
};
var zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter
};
var zpp_$nape_util_ZNPNode_$ZPP_$Listener = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$Listener.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$Listener.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$Listener
};
var zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter
};
var zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent
};
var zpp_$nape_util_ZNPNode_$ZPP_$Interactor = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$Interactor.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$Interactor.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$Interactor
};
var zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener
};
var zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup
};
var zpp_$nape_util_ZNPNode_$ZPP_$CbSet = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$CbSet.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$CbSet.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$CbSet
};
var zpp_$nape_util_ZNPNode_$ZPP_$BodyListener = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$BodyListener
};
var zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener
};
var zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair
};
var zpp_$nape_util_ZNPNode_$ConvexResult = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ConvexResult.__name__ = true;
zpp_$nape_util_ZNPNode_$ConvexResult.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ConvexResult
};
var zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly
};
var zpp_$nape_util_ZNPNode_$RayResult = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$RayResult.__name__ = true;
zpp_$nape_util_ZNPNode_$RayResult.prototype = {
	__class__: zpp_$nape_util_ZNPNode_$RayResult
};
var zpp_$nape_util_ZPP_$MixVec2List = function() {
	this.at_index = 0;
	this.at_ite = null;
	this.zip_length = false;
	this._length = 0;
	this.inner = null;
	nape_geom_Vec2List.call(this);
	this.at_ite = null;
	this.at_index = 0;
	this.zip_length = true;
	this._length = 0;
};
zpp_$nape_util_ZPP_$MixVec2List.__name__ = true;
zpp_$nape_util_ZPP_$MixVec2List.get = function(list,immutable) {
	if(immutable == null) {
		immutable = false;
	}
	var ret = new zpp_$nape_util_ZPP_$MixVec2List();
	ret.inner = list;
	ret.zpp_inner.immutable = immutable;
	return ret;
};
zpp_$nape_util_ZPP_$MixVec2List.__super__ = nape_geom_Vec2List;
zpp_$nape_util_ZPP_$MixVec2List.prototype = $extend(nape_geom_Vec2List.prototype,{
	zpp_gl: function() {
		this.zpp_vm();
		if(this.zip_length) {
			this._length = 0;
			var cx_ite = this.inner.next;
			while(cx_ite != null) {
				var i = cx_ite;
				this._length++;
				cx_ite = cx_ite.next;
			}
			this.zip_length = false;
		}
		return this._length;
	}
	,zpp_vm: function() {
		this.zpp_inner.validate();
		if(this.inner.modified) {
			this.zip_length = true;
			this._length = 0;
			this.at_ite = null;
		}
	}
	,at: function(index) {
		this.zpp_vm();
		if(index < 0 || index >= this.zpp_gl()) {
			throw new js__$Boot_HaxeError("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			index = this.zpp_gl() - 1 - index;
		}
		if(index < this.at_index || this.at_ite == null) {
			this.at_index = 0;
			this.at_ite = this.inner.next;
			while(true) {
				var x = this.at_ite;
				break;
			}
		}
		while(this.at_index != index) {
			this.at_index++;
			this.at_ite = this.at_ite.next;
			while(true) {
				var x1 = this.at_ite;
				break;
			}
		}
		var _this = this.at_ite;
		if(_this.outer == null) {
			_this.outer = new nape_geom_Vec2();
			var o = _this.outer.zpp_inner;
			if(o.outer != null) {
				o.outer.zpp_inner = null;
				o.outer = null;
			}
			o._isimmutable = null;
			o._validate = null;
			o._invalidate = null;
			o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
			_this.outer.zpp_inner = _this;
		}
		return _this.outer;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + "List is immutable");
		}
		this.zpp_inner.modify_test();
		this.zpp_vm();
		if(obj.zpp_inner._inuse) {
			throw new js__$Boot_HaxeError("Error: " + "Vec2" + " is already in use");
		}
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				this.inner.add(obj.zpp_inner);
			} else {
				var ite = this.inner.iterator_at(this.zpp_gl() - 1);
				this.inner.insert(ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,__class__: zpp_$nape_util_ZPP_$MixVec2List
});
var zpp_$nape_util_ZPP_$EdgeList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Edge();
	this._invalidated = true;
};
zpp_$nape_util_ZPP_$EdgeList.__name__ = true;
zpp_$nape_util_ZPP_$EdgeList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,__class__: zpp_$nape_util_ZPP_$EdgeList
};
var zpp_$nape_util_ZPP_$ShapeList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Shape();
	this._invalidated = true;
};
zpp_$nape_util_ZPP_$ShapeList.__name__ = true;
zpp_$nape_util_ZPP_$ShapeList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new nape_shape_ShapeList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$ShapeList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modify_test: function() {
		if(this._modifiable != null) {
			this._modifiable();
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) {
			this._invalidate(this);
		}
	}
	,__class__: zpp_$nape_util_ZPP_$ShapeList
};
var zpp_$nape_util_ZPP_$BodyList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Body();
	this._invalidated = true;
};
zpp_$nape_util_ZPP_$BodyList.__name__ = true;
zpp_$nape_util_ZPP_$BodyList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new nape_phys_BodyList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$BodyList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modify_test: function() {
		if(this._modifiable != null) {
			this._modifiable();
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) {
			this._invalidate(this);
		}
	}
	,__class__: zpp_$nape_util_ZPP_$BodyList
};
var zpp_$nape_util_ZPP_$CompoundList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Compound();
	this._invalidated = true;
};
zpp_$nape_util_ZPP_$CompoundList.__name__ = true;
zpp_$nape_util_ZPP_$CompoundList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new nape_phys_CompoundList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$CompoundList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modify_test: function() {
		if(this._modifiable != null) {
			this._modifiable();
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) {
			this._invalidate(this);
		}
	}
	,__class__: zpp_$nape_util_ZPP_$CompoundList
};
var zpp_$nape_util_ZPP_$InteractorList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
	this._invalidated = true;
};
zpp_$nape_util_ZPP_$InteractorList.__name__ = true;
zpp_$nape_util_ZPP_$InteractorList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,__class__: zpp_$nape_util_ZPP_$InteractorList
};
var zpp_$nape_util_ZPP_$ConvexResultList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ConvexResult();
	this._invalidated = true;
};
zpp_$nape_util_ZPP_$ConvexResultList.__name__ = true;
zpp_$nape_util_ZPP_$ConvexResultList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,__class__: zpp_$nape_util_ZPP_$ConvexResultList
};
var zpp_$nape_util_ZPP_$GeomPolyList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$GeomPoly();
	this._invalidated = true;
};
zpp_$nape_util_ZPP_$GeomPolyList.__name__ = true;
zpp_$nape_util_ZPP_$GeomPolyList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,__class__: zpp_$nape_util_ZPP_$GeomPolyList
};
var zpp_$nape_util_ZPP_$RayResultList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$RayResult();
	this._invalidated = true;
};
zpp_$nape_util_ZPP_$RayResultList.__name__ = true;
zpp_$nape_util_ZPP_$RayResultList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,__class__: zpp_$nape_util_ZPP_$RayResultList
};
var zpp_$nape_util_ZPP_$Vec2List = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Vec2();
	this._invalidated = true;
};
zpp_$nape_util_ZPP_$Vec2List.__name__ = true;
zpp_$nape_util_ZPP_$Vec2List.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modify_test: function() {
		if(this._modifiable != null) {
			this._modifiable();
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) {
			this._invalidate(this);
		}
	}
	,__class__: zpp_$nape_util_ZPP_$Vec2List
};
var zpp_$nape_util_ZPP_$ArbiterList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Arbiter();
	this._invalidated = true;
};
zpp_$nape_util_ZPP_$ArbiterList.__name__ = true;
zpp_$nape_util_ZPP_$ArbiterList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new nape_dynamics_ArbiterList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$ArbiterList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,__class__: zpp_$nape_util_ZPP_$ArbiterList
};
var zpp_$nape_util_ZPP_$ContactList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_dynamics_ZPP_$Contact();
	this._invalidated = true;
};
zpp_$nape_util_ZPP_$ContactList.__name__ = true;
zpp_$nape_util_ZPP_$ContactList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,__class__: zpp_$nape_util_ZPP_$ContactList
};
var zpp_$nape_util_ZPP_$InteractionGroupList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup();
	this._invalidated = true;
};
zpp_$nape_util_ZPP_$InteractionGroupList.__name__ = true;
zpp_$nape_util_ZPP_$InteractionGroupList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,__class__: zpp_$nape_util_ZPP_$InteractionGroupList
};
var zpp_$nape_util_ZPP_$ConstraintList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this._invalidated = true;
};
zpp_$nape_util_ZPP_$ConstraintList.__name__ = true;
zpp_$nape_util_ZPP_$ConstraintList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new nape_constraint_ConstraintList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$ConstraintList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modify_test: function() {
		if(this._modifiable != null) {
			this._modifiable();
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) {
			this._invalidate(this);
		}
	}
	,__class__: zpp_$nape_util_ZPP_$ConstraintList
};
var zpp_$nape_util_ZPP_$CbTypeList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
	this._invalidated = true;
};
zpp_$nape_util_ZPP_$CbTypeList.__name__ = true;
zpp_$nape_util_ZPP_$CbTypeList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new nape_callbacks_CbTypeList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$CbTypeList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modify_test: function() {
		if(this._modifiable != null) {
			this._modifiable();
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) {
			this._invalidate(this);
		}
	}
	,__class__: zpp_$nape_util_ZPP_$CbTypeList
};
var zpp_$nape_util_ZPP_$ListenerList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Listener();
	this._invalidated = true;
};
zpp_$nape_util_ZPP_$ListenerList.__name__ = true;
zpp_$nape_util_ZPP_$ListenerList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new nape_callbacks_ListenerList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$ListenerList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modify_test: function() {
		if(this._modifiable != null) {
			this._modifiable();
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) {
			this._invalidate(this);
		}
	}
	,__class__: zpp_$nape_util_ZPP_$ListenerList
};
var zpp_$nape_util_ZPP_$PubPool = function() { };
zpp_$nape_util_ZPP_$PubPool.__name__ = true;
var zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.__name__ = true;
zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.prototype = {
	empty: function() {
		return this.parent == null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) {
			cur = cur.prev;
		} else {
			cur = cur.next;
		}
		return cur;
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) {
			cur = cur.prev;
		} else if(this.lt(cur.data,obj)) {
			cur = cur.next;
		} else {
			break;
		}
		return cur;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) {
				this.swapped(cur.data,sm.data);
			}
			cur = sm;
		}
		var child = cur.prev == null ? cur.next : cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) {
				child.colour = 1;
			} else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child2 = parent.next;
					if(child2.colour == -1) {
						this.__fix_neg_red(child2);
						break;
					} else if(child2.colour == 0) {
						if(child2.prev != null && child2.prev.colour == 0) {
							this.__fix_dbl_red(child2.prev);
							break;
						}
						if(child2.next != null && child2.next.colour == 0) {
							this.__fix_dbl_red(child2.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) {
							parent.colour = 1;
						} else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) {
			this.parent = child;
		} else if(par.prev == cur) {
			par.prev = child;
		} else {
			par.next = child;
		}
		if(child != null) {
			child.parent = par;
		}
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool = o;
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child;
		if(parent.prev == negred) {
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			negred.next = trl;
			if(trl != null) {
				trl.parent = negred;
			}
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
			if(this.swapped != null) {
				this.swapped(parent.data,nr.data);
			}
			nr.prev = trr;
			if(trr != null) {
				trr.parent = nr;
			}
			nr.next = parent.next;
			if(parent.next != null) {
				parent.next.parent = nr;
			}
			parent.next = nr;
			if(nr != null) {
				nr.parent = parent;
			}
			child = nl;
		} else {
			var nl1 = negred.next;
			var nr1 = negred.prev;
			var trl1 = nr1.next;
			var trr1 = nr1.prev;
			nl1.colour = 0;
			negred.colour = parent.colour = 1;
			negred.prev = trl1;
			if(trl1 != null) {
				trl1.parent = negred;
			}
			var t1 = parent.data;
			parent.data = nr1.data;
			nr1.data = t1;
			if(this.swapped != null) {
				this.swapped(parent.data,nr1.data);
			}
			nr1.next = trr1;
			if(trr1 != null) {
				trr1.parent = nr1;
			}
			nr1.prev = parent.prev;
			if(parent.prev != null) {
				parent.prev.parent = nr1;
			}
			parent.prev = nr1;
			if(nr1 != null) {
				nr1.parent = parent;
			}
			child = nl1;
		}
		if(child.prev != null && child.prev.colour == 0) {
			this.__fix_dbl_red(child.prev);
		} else if(child.next != null && child.next.colour == 0) {
			this.__fix_dbl_red(child.next);
		}
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1;
			var n2;
			var n3;
			var t1;
			var t2;
			var t3;
			var t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) {
				this.parent = n2;
			} else if(par1.prev == g) {
				par1.prev = n2;
			} else {
				par1.next = n2;
			}
			if(n2 != null) {
				n2.parent = par1;
			}
			n1.prev = t1;
			if(t1 != null) {
				t1.parent = n1;
			}
			n1.next = t2;
			if(t2 != null) {
				t2.parent = n1;
			}
			n2.prev = n1;
			if(n1 != null) {
				n1.parent = n2;
			}
			n2.next = n3;
			if(n3 != null) {
				n3.parent = n2;
			}
			n3.prev = t3;
			if(t3 != null) {
				t3.parent = n3;
			}
			n3.next = t4;
			if(t4 != null) {
				t4.parent = n3;
			}
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) {
				this.parent.colour = 1;
			} else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,insert: function(obj) {
		var x;
		if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool == null) {
			x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet();
		} else {
			x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool;
			zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool = x.next;
			x.next = null;
		}
		x.data = obj;
		if(this.parent == null) {
			this.parent = x;
		} else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else {
					cur = cur.prev;
				}
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.next;
			}
		}
		if(x.parent == null) {
			x.colour = 1;
		} else {
			x.colour = 0;
			if(x.parent.colour == 0) {
				this.__fix_dbl_red(x);
			}
		}
		return x;
	}
	,__class__: zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet
};
var zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.__name__ = true;
zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.prototype = {
	__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1;
			var n2;
			var n3;
			var t1;
			var t2;
			var t3;
			var t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) {
				this.parent = n2;
			} else if(par1.prev == g) {
				par1.prev = n2;
			} else {
				par1.next = n2;
			}
			if(n2 != null) {
				n2.parent = par1;
			}
			n1.prev = t1;
			if(t1 != null) {
				t1.parent = n1;
			}
			n1.next = t2;
			if(t2 != null) {
				t2.parent = n1;
			}
			n2.prev = n1;
			if(n1 != null) {
				n1.parent = n2;
			}
			n2.next = n3;
			if(n3 != null) {
				n3.parent = n2;
			}
			n3.prev = t3;
			if(t3 != null) {
				t3.parent = n3;
			}
			n3.next = t4;
			if(t4 != null) {
				t4.parent = n3;
			}
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) {
				this.parent.colour = 1;
			} else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool == null) {
				x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair();
			} else {
				x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
				zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = x.next;
				x.next = null;
			}
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool == null) {
						x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair();
					} else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = x.next;
						x.next = null;
					}
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else {
					cur = cur.prev;
				}
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool == null) {
						x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair();
					} else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = x.next;
						x.next = null;
					}
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else {
					cur = cur.next;
				}
			} else {
				break;
			}
		}
		if(x == null) {
			return cur;
		} else {
			if(x.parent == null) {
				x.colour = 1;
			} else {
				x.colour = 0;
				if(x.parent.colour == 0) {
					this.__fix_dbl_red(x);
				}
			}
			return x;
		}
	}
	,__class__: zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = ["Date"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
Perf.MEASUREMENT_INTERVAL = 1000;
Perf.FONT_FAMILY = "Helvetica,Arial";
Perf.FPS_BG_CLR = "#00FF00";
Perf.FPS_WARN_BG_CLR = "#FF8000";
Perf.FPS_PROB_BG_CLR = "#FF0000";
Perf.MS_BG_CLR = "#FFFF00";
Perf.MEM_BG_CLR = "#086A87";
Perf.INFO_BG_CLR = "#00FFFF";
Perf.FPS_TXT_CLR = "#000000";
Perf.MS_TXT_CLR = "#000000";
Perf.MEM_TXT_CLR = "#FFFFFF";
Perf.INFO_TXT_CLR = "#000000";
Perf.DELAY_TIME = 4000;
js_Boot.__toStr = ({ }).toString;
nape_Config.epsilon = 1e-8;
nape_Config.fluidAngularDragFriction = 2.5;
nape_Config.fluidAngularDrag = 100;
nape_Config.fluidVacuumDrag = 0.5;
nape_Config.fluidLinearDrag = 0.5;
nape_Config.collisionSlop = 0.2;
nape_Config.collisionSlopCCD = 0.5;
nape_Config.distanceThresholdCCD = 0.05;
nape_Config.staticCCDLinearThreshold = 0.05;
nape_Config.staticCCDAngularThreshold = 0.005;
nape_Config.bulletCCDLinearThreshold = 0.125;
nape_Config.bulletCCDAngularThreshold = 0.0125;
nape_Config.dynamicSweepLinearThreshold = 17;
nape_Config.dynamicSweepAngularThreshold = 0.6;
nape_Config.angularCCDSlipScale = 0.75;
nape_Config.arbiterExpirationDelay = 6;
nape_Config.staticFrictionThreshold = 2;
nape_Config.elasticThreshold = 20;
nape_Config.sleepDelay = 60;
nape_Config.linearSleepThreshold = 0.2;
nape_Config.angularSleepThreshold = 0.4;
nape_Config.contactBiasCoef = 0.3;
nape_Config.contactStaticBiasCoef = 0.6;
nape_Config.contactContinuousBiasCoef = 0.4;
nape_Config.contactContinuousStaticBiasCoef = 0.5;
nape_Config.constraintLinearSlop = 0.1;
nape_Config.constraintAngularSlop = 1e-3;
nape_Config.illConditionedThreshold = 2e+8;
nape_constraint_Constraint.zpp_internalAlloc = false;
nape_phys_Interactor.zpp_internalAlloc = false;
nape_shape_Shape.zpp_internalAlloc = false;
zpp_$nape_ZPP_$ID._Interactor = 0;
zpp_$nape_ZPP_$ID._Constraint = 0;
zpp_$nape_ZPP_$ID._CbType = 0;
zpp_$nape_ZPP_$ID._CbSet = 0;
zpp_$nape_ZPP_$ID._Listener = 0;
zpp_$nape_callbacks_ZPP_$Callback.internal = false;
zpp_$nape_callbacks_ZPP_$CbType.ANY_SHAPE = new nape_callbacks_CbType();
zpp_$nape_callbacks_ZPP_$CbType.ANY_BODY = new nape_callbacks_CbType();
zpp_$nape_callbacks_ZPP_$CbType.ANY_COMPOUND = new nape_callbacks_CbType();
zpp_$nape_callbacks_ZPP_$CbType.ANY_CONSTRAINT = new nape_callbacks_CbType();
zpp_$nape_util_ZPP_$Flags.internal = false;
zpp_$nape_callbacks_ZPP_$Listener.internal = false;
zpp_$nape_callbacks_ZPP_$InteractionListener.UCbSet = new zpp_$nape_util_ZNPList_$ZPP_$CbSet();
zpp_$nape_callbacks_ZPP_$InteractionListener.VCbSet = new zpp_$nape_util_ZNPList_$ZPP_$CbSet();
zpp_$nape_callbacks_ZPP_$InteractionListener.WCbSet = new zpp_$nape_util_ZNPList_$ZPP_$CbSet();
zpp_$nape_callbacks_ZPP_$InteractionListener.UCbType = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
zpp_$nape_callbacks_ZPP_$InteractionListener.VCbType = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
zpp_$nape_callbacks_ZPP_$InteractionListener.WCbType = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
zpp_$nape_dynamics_ZPP_$Arbiter.internal = false;
zpp_$nape_dynamics_ZPP_$Arbiter.COL = 1;
zpp_$nape_dynamics_ZPP_$Arbiter.FLUID = 4;
zpp_$nape_dynamics_ZPP_$Arbiter.SENSOR = 2;
zpp_$nape_dynamics_ZPP_$Contact.internal = false;
zpp_$nape_geom_ZPP_$Collide.flowpoly = new zpp_$nape_util_ZNPList_$ZPP_$Vec2();
zpp_$nape_geom_ZPP_$Collide.flowsegs = new zpp_$nape_util_ZNPList_$ZPP_$Vec2();
zpp_$nape_geom_ZPP_$ConvexRayResult.internal = false;
zpp_$nape_phys_ZPP_$Body.types = (function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.BodyType_STATIC == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.BodyType_STATIC = new nape_phys_BodyType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	var tmp = zpp_$nape_util_ZPP_$Flags.BodyType_STATIC;
	if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	var tmp1 = zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC;
	if(zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC = new nape_phys_BodyType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = [null,tmp,tmp1,zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC];
	return $r;
}(this));
zpp_$nape_phys_ZPP_$Material.WAKE = 1;
zpp_$nape_phys_ZPP_$Material.PROPS = 2;
zpp_$nape_phys_ZPP_$Material.ANGDRAG = 4;
zpp_$nape_phys_ZPP_$Material.ARBITERS = 8;
zpp_$nape_shape_ZPP_$Edge.internal = false;
zpp_$nape_space_ZPP_$AABBTree.tmpaabb = new zpp_$nape_geom_ZPP_$AABB();
zpp_$nape_util_ZPP_$EdgeList.internal = false;
zpp_$nape_util_ZPP_$ShapeList.internal = false;
zpp_$nape_util_ZPP_$BodyList.internal = false;
zpp_$nape_util_ZPP_$CompoundList.internal = false;
zpp_$nape_util_ZPP_$InteractorList.internal = false;
zpp_$nape_util_ZPP_$ConvexResultList.internal = false;
zpp_$nape_util_ZPP_$GeomPolyList.internal = false;
zpp_$nape_util_ZPP_$RayResultList.internal = false;
zpp_$nape_util_ZPP_$Vec2List.internal = false;
zpp_$nape_util_ZPP_$ArbiterList.internal = false;
zpp_$nape_util_ZPP_$ContactList.internal = false;
zpp_$nape_util_ZPP_$InteractionGroupList.internal = false;
zpp_$nape_util_ZPP_$ConstraintList.internal = false;
zpp_$nape_util_ZPP_$CbTypeList.internal = false;
zpp_$nape_util_ZPP_$ListenerList.internal = false;
nape_Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=nape.js.map